en:
  api:
    description: Description
    method: Method and URL format
    name: Name
    overview:
      api_token:
        paragraph_1: ! 'All operations available on the API interface should always use a valid token API. The API token management is done directly on the CloudWalk Manager, by simply accessing the menu <strong>API</strong>, as shown below:'
        paragraph_2: ! 'Example of URL:'
      crud:
        paragraph_1: To perform an operation on a resource (app, logical number, group, etc), a HTTP request is made to the URL using the appropriate HTTP verb.
        paragraph_2: ! 'The four HTTP verbs used in CRUD operations are:'
        paragraph_3: ! '<strong>GET: </strong>Finds a specific resource or collection of resources from an URL. For example, <span class=''code''>GET /%{version}/devices</span> returns a list with all serial numbers, while a <span class=''code''>GET /%{version}/devices/135</span> returns only the serial number with the ID 135.'
        paragraph_4: ! '<strong>POST: </strong>Creates a new resource. For example, <span class=''code''>POST /%{version}/devices</span> creates a new serial number. The information sent in the POST request would then be used to fill the properties of the serial number.'
        paragraph_5: ! '<strong>PUT: </strong>Updates an existing resource. For example, <span class=''code''>PUT /%{version}/devices/135</span> updates the serial number with the ID 135. The information sent in the PUT request would then be used to update the properties of the serial number.'
        paragraph_6: ! '<strong>DELETE: </strong>Deletes an existing resource. For example, <span class=''code''>DELETE /%{version}/devices/135</span> deletes the serial number with the ID 135.'
      description: ! 'Access to the API must be done from the domain <a href=''https://manager.cloudwalk.io/api''>https://manager.cloudwalk.io/api</a>. CRUD: Create, Retrieve, Update and Destroy.'
      functionality:
        paragraph_1: The access to the API must be done from the domain <span class='code'>https://api.cloudwalk.io/%{version}</span>.
        paragraph_2: The requests should be made using the <strong>HTTPS</strong> protocol.
        paragraph_3: ! 'All date and time records are returned in ISO 8601 standard:'
      pagination:
        paragraph_1: Requests that return multiple records are paginated, where the default pagination size is 30 records. The sub-sequent pages are defined by the parameter <span class='code'>&page</span>. The default amount of returned records can be changed by defining the parameter <span class='code'>&per_page</span>, up to 100 records.
      table_of_contents:
        api_token: API Token
        crud: ! 'CRUD: Create, Retrieve, Update and Destroy'
        functionality: Functionality
        pagination: Pagination
        versioning: Versioning
      title: Developer API
      versioning:
        paragraph_1: When using the CloudWalk API, it is necessary to provide the version being used. Currently only the version <strong>v1</strong> is available for use, but eventually new versions will become available.
        paragraph_2: ! 'Example of URL: <span class=''code''>https://api.cloudwalk.io/v1/devices</span>'
    response: Example of response
    sample: Example of use
    type: Type
    v1:
      apps:
        attributes:
          list:
            authorizer_url: Authorizer IP address or URL.
            crc: Application <a href='http://en.wikipedia.org/wiki/Cyclic_redundancy_check' class='external'>CRC</a>
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            description: Brief description
            displayable: Determine wether the application should be displayed in the services menu
            id: Record ID
            name: Application name
            pos_display_label: POS exibition name (if displayable is true)
            posxml: POSXML souce, Base64 encoded
            size: Application size (bytes)
            updated_at: Timestamp in ISO 8601 format
            uuid: Universally unique identifier
          paragraph_1: ! 'An application POSXML have the following attributes:'
        create:
          paragraph_1: Create a new POSXML application.
        description: Check how CRUD operations for application should be performed.
        destroy:
          paragraph_1: Delete a POSXML application.
        index:
          paragraph_1: Return an array with all applications.
        show:
          paragraph_1: Return the details of a specific application.
        table_of_contents:
          attributes: Application attributes
          create: Create a new application
          destroy: Delete an application
          index: List of all applications
          show: Find a specific application
          update: Update an application
        title: Developer API - Applications
        update:
          paragraph_1: Update an existing application.
          paragraph_2: The bytecode sent on the parameter <strong>posxml</strong> must be encoded with Base64.
      assets:
        attributes:
          list:
            content: File content (binay), Base64 encoded
            crc: File <a href='http://en.wikipedia.org/wiki/Cyclic_redundancy_check' class='external'>CRC</a>
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            description: File description
            id: Record ID
            name: File name
            size: File size (bytes)
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: ! 'Os seguintes atributos compõe um arquivo:'
        create:
          paragraph_1: Create a new file.
        description: Check how CRUD operations for files should be performed.
        destroy:
          paragraph_1: Delete a file.
        index:
          paragraph_1: Return an array with all files.
        show:
          paragraph_1: Return the details of a specific file.
        table_of_contents:
          attributes: Atributos de um arquivo
          create: Cadastro de um novo arquivo
          destroy: Exclusão de um arquivo
          index: Listagem de todos arquivos
          show: Busca de um arquivo específico
          update: Atualização de um arquivo
        title: Developer API - Files
        update:
          paragraph_1: Update an existing file.
      devices:
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            enabled: Determine wether the device can access CloudWalk (default true)
            id: Record ID
            serial_number: Equipment serial number
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: ! 'A device have the following attributes:'
        create:
          paragraph_1: Grant CloudWalk access to a new device.
        description: Check how CRUD operations for unlocking devices should be performed.
        destroy:
          paragraph_1: Delete a device. The equipment with the deleted serial number will not be able to access CloudWalk.
        index:
          paragraph_1: Return an array with all devices.
        show:
          paragraph_1: Return the details of a specific device.
        table_of_contents:
          attributes: Device attributes
          create: Grant access to a new device
          destroy: Delete a device
          index: List of all devices
          show: Find a specific device
          update: Update a device
        title: Developer API - Devices
        update:
          paragraph_1: Update an existing device.
      groups:
        attributes:
          list:
            checksum: Checksum based on CRC of all apps that belongs to the group
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            id: Record ID
            name: Group name
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: ! 'A group have the following attributes:'
        create:
          paragraph_1: Create a new group.
        description: Check how CRUD operations for groups should be performed.
        destroy:
          paragraph_1: Delete a group. To perform this operation the group must be empty (no apps or logical numbers).
        index:
          paragraph_1: Return an array with all groups.
        name: group name
        show:
          paragraph_1: Return the details of a specific group.
        table_of_contents:
          attributes: Group attributes
          create: Create a new group
          destroy: Delete a group
          index: List of all groups
          show: Find a specific group
          update: Update a group
        title: Developer API - Groups
        update:
          paragraph_1: Update an existing logical number.
      logical_numbers:
        attributes:
          list:
            app_ids: List of app IDs (from group) that the logical number has access
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            group_id: Group ID that the logical number belongs
            id: Record ID
            number: Logical number
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: ! 'A logical number have the following attributes:'
        create:
          paragraph_1: Create a new logical number.
        description: Check how CRUD operations for logical numbers should be performed.
        destroy:
          paragraph_1: Delete a logical number. The equipment with the deleted logical number will not be able to download CloudWalk apps.
        index:
          paragraph_1: Return an array with all logical numbers.
        show:
          paragraph_1: Return the details of a specific logical number.
        table_of_contents:
          attributes: Logical number attributes
          create: Create a new logical number
          destroy: Delete a logical number
          index: List of all logical numbers
          show: Find a specific logical number
          update: Update a logical number
        title: Developer API - Logical numbers
        update:
          paragraph_1: Update an existing logical number.
      logs:
        attributes:
          list:
            app_name: Application that originated the transaction
            finished_at: Timestamp in ISO 8601 format
            framework_version: Framework version installed on the device
            id: Record ID
            logical_number: Device logical number
            serial_number: Device serial number
            started_at: Timestamp in ISO 8601 format
            status: ! 'Record status: Success <span class=''code''>success</span>, Processing <span class=''code''>running</span> or Error <span class=''code''>fail</span>'
            transaction_type: ! 'Record type: Release <span class=''code''>company</span>, Transaction <span class=''code''>switch</span> or Download <span class=''code''>get_asset</span>'
          paragraph_1: ! 'A log have the following attributes:'
        description: The log records have some acronyms in fields transaction_type, status and received. Check out the definition of all acronyms.
        index:
          paragraph_1: Return an array with all logs.
        search_by_multiple_params:
          paragraph_1: Return an array with all logs with the defined parameters.
        search_by_serial_number:
          paragraph_1: Return an array with all logs with the <strong>serial number</strong> defined on parameter <span class='code'>&serial_number</span>.
          paragraph_2: It is also possible to search logs with a specific <strong>logical number</strong> by defining the parameter <span class='code'>&logical_number</span>
          serial_number: serial number
        search_by_status:
          paragraph_1: Return an array with all logs with the <strong>status</strong> defined on parameter <span class='code'>&status</span>.
        search_by_transaction_type:
          paragraph_1: Return an array with all logs with the <strong>record type</strong> defined on parameter <span class='code'>&transaction_type</span>.
          transaction_type: record type
        table_of_contents:
          attributes: Log attributes
          index: List of all logs
          search_by_multiple_params: Find logs by multiple parameters
          search_by_serial_number: Find logs by serial number
          search_by_status: Find logs by status
          search_by_transaction_type: Find logs by transaction type
        title: Developer API - Logs
      parameters:
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            description: Parameter description
            group_id: Group ID, if the parameter belongs to a group
            id: Record ID
            key: Parameter key
            logical_number_id: Logical number ID, if the parameter belongs to a logical number
            updated_at: Timestamp in ISO 8601 format
            value: Parameter value
          paragraph_1: A parameter can reference a <strong>logical number</strong> or a <strong>group</strong>. What defines the type of parameter being handled is the definition of the properties <strong>number</strong> (refer to a logical number) or <strong>name</strong> (refer to a group).
          paragraph_2: ! 'A parameter have the following attributes:'
        create:
          paragraph_1: Create a new parameter.
        description: The parameters can be related to a logical number or a group. Check how CRUD operations for parameters should be performed.
        destroy:
          paragraph_1: Delete a parameter.
        group: Group
        index:
          paragraph_1: Return an array with all parameters of a group or logical number.
        logical_number: Logical number
        show:
          paragraph_1: Return the details of a specific parameter.
        table_of_contents:
          attributes: Parameter attributes
          create: Create a new parameter
          destroy: Delete a parameter
          index: List of all parameters
          show: Find a specific parameter
          update: Update a parameter
        title: Developer API - Parameters
        update:
          paragraph_1: Update an existing parameter.
      users:
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            email: Account e-mail
            first_name: First name
            id: Record ID
            last_name: Last name
            last_sign_in_at: Timestamp of last session (ISO 8601)
            last_sign_in_ip: IP address used on last sign in
            sign_in_count: Sign in count
            time_zone: Time zone utilizado no CloudWalk Manager (padrão America/Sao_Paulo)
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: ! 'An user have the following attributes:'
        description: Check how CRUD operations for users should be performed.
        index:
          paragraph_1: Return an array with all users.
        show:
          paragraph_1: Return the details of a specific user.
        table_of_contents:
          attributes: User attributes
          index: List of all users
          show: Find a specific user
          token: Get the API Token of an specific user
        title: Developer API - Users
        token:
          paragraph_1: It is possible to get the API Token of a specific user, through its email and password.
    version: ! '{version}'
  development_environment:
    overview:
      compilation_console:
        paragraph_1: ! 'It is on the compilation console that important information is displayed, such as the return of the compilation proccess: ''Compilation Succeeded!'' and additional application details:'
        properties:
          base64: Compiled source code
          functions: Number of declared functions
          integers: Number of declared integer variables
          maxfuncs: Maximum amount of function declaration allowed
          maxvars: Maximum amount of variable declaration allowed
          size: Application size
          strings: Number of declared string variables
      description: The CloudWalk IDE enables the application development for mobile devices using POSXML language.
      introduction:
        paragraph_1: The Cloudwalk service provides a simple, fast and intuitive development environment, also providing the innovative use of real-time collaboration, which means, multiple developers can work on the same application simultaneously.
        paragraph_2: ! 'Meet the CloudWalk IDE interface:'
      real_time_colaboration:
        paragraph_1: Always working to increase developers productivity, we have incorporated this feature in our IDE (development environment). To start real-time collaboration, simply copy the <strong>complete</strong> URL of the CloudWalk IDE and share it with the developers that are going to work together.
        paragraph_2: ! 'The image below demonstrates an example URL:'
      table_of_contents:
        compilation_console: Compilation console
        introduction: Introduction
        real_time_colaboration: Real time colaboration
      title: Development environment
  errors:
    not_found:
      description: Sorry we could not find the requested page.
      title: Page not found
  footer:
    get_in_touch: Get in touch
    paragraph_1: The names and logos WALK are trademarks of Plano Bê. All rights reserved.
    terms: Terms of Responsability
  general:
    index: Index
    search: Search...
    search_results: Search results
    search_with_no_results: Sorry but the search for <strong>%{query}</strong> returned nothing.
    updated_at: Updated on %{date}
  integration:
    advanced_http:
      description: There is a way to integrate CloudWalk POSXML applications with REST APIs using the command network.send.
      http_samples:
        http_verb: HTTP-VERB
        path: PATH
        variables: VARIABLES
      introduction:
        paragraph_1: ! 'There is a way to integrate CloudWalk POSXML applications with <a href=''https://en.wikipedia.org/wiki/REST'' class=''external'' target=''blank''>REST</a> APIs. It can be done by using the command <a href=''/posxml/commands/network.send'' class=''command''>network.send</a> with a string in the following format:'
        paragraph_2: The CloudWalk Switch will receive the request sent through the command <a href='/posxml/commands/network.send' class='command'>network.send</a> and will perform the HTTP request on the url defined on the application configured on <a href='https://manager.cloudwalk.io'>https://manager.cloudwalk.io</a>.
        paragraph_3: To receive the answer from CloudWalk Switch, it is necessary to use the command <a href='/posxml/commands/network.receive' class='command'>network.receive</a> to receive the first 4 bytes that indicates the size of the message, and then receive the rest of the message with a second <a href='/posxml/commands/network.receive' class='command'>network.receive</a> call. This approach avoid timeouts and long wait times to receive the response from your HTTP endpoint.
      posxml_sample:
        paragraph_1: ! 'The following example can be used to test this kind of HTTP integration:'
      table_of_contents:
        http_samples: Examples of HTTP verbs and paths
        introduction: Introduction
        posxml_sample: Example of POSXML application
      title: Integration with host - REST HTTP
    architecture:
      description: ! 'Simplified architecture of CloudWalk service, with all the components involved: mobile device, authorizer, transactional switch, etc.'
      service_architecture:
        paragraph_1: ! 'The diagram below shows a simplified architecture of CloudWalk service, with all the components involved: A mobile device, an authorizer, the transactional switch, etc.'
      table_of_contents:
        service_architecture: Service architecture
      title: Integration with host
    http:
      description: One way to establish communication between CloudWalk service and a host authorizer is through HTTP. Example of use, configuring the device, compiling the application, configuring the WALK Manager, testing the communication.
      pos_setup:
        paragraph_1: This guide assumes that your device already has the WALK Framework properly <strong>installed and configured</strong>, and that the device serial number is already registered on WALK Manager.
        paragraph_2: If you are unsure of the steps above, check the session <a href='/walk-framework/configuration'>%{configuration}</a>
      sample:
        list:
          item_1: ! '<strong>Account at WALK Manager: </strong>Create free at <a href=''https://manager.cloudwalk.io'' class=''external'' target=''_blank''>https://manager.cloudwalk.io</a>'
          item_2: ! '<strong>WALK Framework: </strong> Device properly installed and configured'
          item_3: ! '<strong>Internet access: </strong> It is necessary that the device has internet access (Ethernet, Dial or GPRS)'
        paragraph_1: For testing purposes, we provide a host authorizer ready to use. The authorizer is extremely simple, used only for testing purposes.
        prerequisites: Prerequisites
      table_of_contents:
        development_environment: Compiling the application
        pos_setup: Configuring the device
        sample: Example of use
        testing: Testing the communication
        understanding_the_service: Understanding the communication
        walk_manager_setup: Configuring the WALK Manager
      testing:
        download_application: 1. Download the application
        if_fail: If fail
        paragraph_1: ! 'With the device properly prepared, compiled application and everything correct configures in WALK Manager, it''s time to test the communication between all the components involved: Mobile device, CloudWalk and host authorizer.'
        paragraph_2: ! 'Press the green button and the process of downloading previously configured on Manager WALK application will start:'
        paragraph_3: ! 'At the end of the process, the following message appears:'
        paragraph_4: After downloading the application and pressing the green button, the application will be executed.
        paragraph_5: Check the device communication setup, cables and internet connection.
        paragraph_6: ! 'Several tools and services can help you to test the return of their requests. An example is <strong>telnet</strong>, which offers a very simple interface, as can be seen below:'
        run_application: 2. Application execution
        testing_post_request: Testing your request
      title: Integration with host - Simple HTTP
      understanding_the_service:
        list:
          item_1: The device executes the command network.send;
          item_2: The transactional switch receives the content sent and forwards it to the socket in the url/port and configured for the application in WALK Manager;
          item_3: The response of the socket is returned to the transactional switch;
          item_4: The device executes the command network.receive and receives the response.
        paragraph_1: ! 'One way to establish communication between CloudWalk service and a host authorizer is through HTTP. The diagram below represents communication between the mobile device, the CloudWalk service and the host authorizer:'
        paragraph_2: <strong>Attention:</strong> After performing a network.send and network.receive, you must perform a network.hosdisconnect so you can make a new call (send).
      walk_manager_setup:
        associate_logical_number:
          header: Associate the logical number
          paragraph_1: ! 'The next step is to associate the device with the newly created logical number, by pressing <strong>F1</strong> (VeriFone) or <strong>F</strong> (Telium). The following screen will appear:'
          paragraph_2: ! 'Then select the option <strong>1 LOGICAL NUMBER</strong> and enter the newly registered logical number (0001):'
          paragraph_3: After entering the logical number, press enter (green).
        create_application:
          list:
            item_1: Login to your WALK Manager account
            item_10: A message indicating that the application was successfully registered should be be shown
            item_11: Copy the POSXML source code below (CTRL + C), click <strong>Edit source code</strong>, paste the previously copied code (CTRL + V) and click on <strong>Compile</strong>
            item_2: ! 'Select the first option: <strong>Applications</strong>'
            item_3: Click the button <strong>New application</strong>
            item_4: ! 'Fill in the application name, for example: <strong>httpapp</strong>'
            item_5: Fill in the application description, for example <strong>Test with HTTP</strong>
            item_6: Fill in the authorizer with the URL <strong>http://http-echo.cloudwalk.io</strong>
            item_7: Mark <strong>Yes</strong> on the 'Application should be displayed in the menu of services?'
            item_8: Fill <strong>HTTP</strong> in the display name in POS
            item_9: Click the button <strong>Register application</strong>
        create_group:
          header: Register a group
          list:
            item_1: ! 'Select the option: <strong>Groups</strong>'
            item_2: Click the button <strong>New Group</strong>
            item_3: ! 'Fill in the group name, for example: <strong>GROUP TEST</strong>'
            item_4: Click the button <strong>Register group</strong>
            item_5: Then click the button <strong>Update group</strong>
            item_6: Select the application previously registered by clicking the checkbox
            item_7: Click the button <strong>Update group's applications</strong>
        create_logical_number:
          header: Register logical number
          list:
            item_1: ! 'Select the option: <strong>Logical Numbers</strong>'
            item_2: Click the button <strong>New logical number</strong>
            item_3: Fill in a logical number, for example <strong>0001</strong>
            item_4: Select the previously registered group (GROUP TEST) and click the button <strong>Register logical number</strong>
          paragraph_1: ! 'Every device must have a logical number, which is the device identification on CloudWalk. To configure the logical number, follow the following steps:'
        paragraph_1: ! 'The last step is to configure the WALK Manager. Follow the procedure:'
    tcp:
      description: One way to establish communication between CloudWalk service and a host authorizer is through TCP/IP. Example of use, configuring the device, compiling the application, configuring the WALK Manager, testing the communication.
      pos_setup:
        paragraph_1: This guide assumes that your device already has the WALK Framework properly <strong>installed and configured</strong>, and that the device serial number is already registered on WALK Manager.
        paragraph_2: If you are unsure of the steps above, check the session <a href='/walk-framework/configuration'>%{configuration}</a>
      sample:
        list:
          item_1: ! '<strong>Account at WALK Manager: </strong>Create free at <a href=''https://manager.cloudwalk.io'' class=''external'' target=''_blank''>https://manager.cloudwalk.io</a>'
          item_2: <strong>WALK Framework:</strong> Device properly installed and configured
          item_3: <strong>Internet access:</strong> It is necessary that the device has internet access (Ethernet, Dial or GPRS)
        paragraph_1: For testing purposes, we provide a host authorizer ready to use. The authorizer is extremely simple, used only for testing purposes.
        prerequisites: Prerequisites
      table_of_contents:
        development_environment: Compiling the application
        pos_setup: Configuring the device
        sample: Example of use
        testing: Testing the communication
        understanding_the_service: Understanding the communication
        walk_manager_setup: Configuring the WALK Manager
      testing:
        download_application: 1. Download the application
        if_fail: If fail
        paragraph_1: ! 'With the device properly prepared, compiled application and everything correct configures in WALK Manager, it''s time to test the communication between all the components involved: Mobile device, CloudWalk and host authorizer.'
        paragraph_2: ! 'Press the green button and the process of downloading previously configured on Manager WALK application will start:'
        paragraph_3: ! 'At the end of the process, the following message appears:'
        paragraph_4: After downloading the application and pressing the green button, the application will be executed.
        paragraph_5: Check the device communication setup, cables and internet connection.
        paragraph_6: ! 'Several tools and services can help you to test the return of their requests. An example is <strong>telnet</strong>, which offers a very simple interface, as can be seen below:'
        run_application: 2. Application execution
        testing_post_request: Testing your request
      title: Integration with host - Plain TCP (socket tunnel)
      understanding_the_service:
        list:
          item_1: The device executes the command network.send;
          item_2: The transactional switch receives the content sent and forwards it to the socket in the url and configured port for the application in WALK Manager;
          item_3: The response of the socket is returned to the transactional switch;
          item_4: The device executes the command network.receive and receives the response.
        paragraph_1: ! 'One way to establish communication between CloudWalk service and a host authorizer is through TCP/IP. The diagram below represents communication between the mobile device, CloudWalk service and host authorizer:'
        paragraph_2: <strong>Attention:</strong> After performing a network.send and network.receive, you must perform a network.hosdisconnect so you can make a new call (send).
      walk_manager_setup:
        associate_logical_number:
          header: Associate the logical number
          paragraph_1: ! 'The next step is to associate the device with the newly created logical number, by pressing <strong>F1</strong> (VeriFone) or <strong>F</strong> (Telium). The following screen will appear:'
          paragraph_2: ! 'Then select the option <strong>1 LOGICAL NUMBER</strong> and enter the newly registered logical number (0001):'
          paragraph_3: After entering the logical number, press enter (green).
        create_application:
          list:
            item_1: Login to your WALK Manager account
            item_10: A message indicating that the application was successfully registered should be be shown
            item_11: Copy the POSXML source code below (CTRL + C), click <strong>Edit source code</strong>, paste the previously copied code (CTRL + V) and click on <strong>Compile</strong>
            item_2: ! 'Select the first option: <strong>Applications</strong>'
            item_3: Click the button <strong>New application</strong>
            item_4: ! 'Fill in the application name, for example: <strong>tcpapp</strong>'
            item_5: Fill in the application description, for example <strong>Test with TCP IP</strong>
            item_6: Fill in the authorizer with the URL <strong>tcp://tcp-echo.cloudwalk.io:800</strong>
            item_7: Mark <strong>Yes</strong> on the 'Application should be displayed in the menu of services?'
            item_8: Fill <strong>TCP IP</strong> in the display name in POS
            item_9: Click the button <strong>Register application</strong>
        create_group:
          header: Register a group
          list:
            item_1: ! 'Select the option: <strong>Groups</strong>'
            item_2: Click the button <strong>New Group</strong>
            item_3: ! 'Fill in the group name, for example: <strong>GROUP TEST</strong>'
            item_4: Click the button <strong>Register group</strong>
            item_5: Then click the button <strong>Update group</strong>
            item_6: Select the application previously registered by clicking the checkbox
            item_7: Click the button <strong>Update group's applications</strong>
        create_logical_number:
          header: Register logical number
          list:
            item_1: ! 'Select the option: <strong>Logical Numbers</strong>'
            item_2: Click the button <strong>New logical number</strong>
            item_3: Fill in a logical number, for example <strong>0001</strong>
            item_4: Select the previously registered group (GROUP TEST) and click the button <strong>Register logical number</strong>
          paragraph_1: ! 'Every device must have a logical number, which is the device identification on CloudWalk. To configure the logical number, follow the following steps:'
        paragraph_1: ! 'The last step is to configure the WALK Manager. Follow the procedure:'
  introduction:
    development_environment:
      description: The CloudWalk IDE enables the application development for mobile devices using POSXML language.
      more_info:
        overview: overview
        paragraph_1: ! 'More information available at '
      overview:
        paragraph_1: The Cloudwalk service provides a simple, fast and intuitive development environment, also providing the innovative use of real-time collaboration, which means, multiple developers can work on the same application simultaneously.
      table_of_contents:
        more_info: More information
        overview: Presentation
      title: Development environment
    index:
      benefits:
        feature_1: — Free and unlimited licenses for all your devices:</strong> do not worry about license costs or activation equipment.
        feature_2: — Easy preparation:</strong> installation, configuration and testing done directly by the retailer.
        feature_3: — Full EMV support:</strong> use the full potential of chip cards.
        feature_4: — Multi application:</strong> various applications running on one device.
        feature_5: — Multi device:</strong> Your application will be always ready to run on any approved device.
        feature_6: — <em>Contactless</em> technology:</strong> innovation, agility and practicality using contactless payments.
        feature_7: — Rapid development:</strong> quickly and easily develop applications with POSXML.
        feature_8: — Remote update:</strong> update your devices remotely, without going into the field.
        paragraph_1: ! 'The foundations of CloudWalk service are based on the quality of network services, cost minimization, agility in the applications development and logistical control of the devices updates, such as:'
      description: CloudWalk is a SaaS based application platform for devices such as POS terminals and smartphones. The service offers hardware agnostic solution, which allows any application developed with CloudWalk to be compatible with all approved devices, offering many benefits, such as EMV and contactless technology.
      how_it_works:
        paragraph_1: CloudWalk is a <a href='http://en.wikipedia.org/wiki/Software_as_a_service' target='blank' class='external'>SaaS</a> based application platform for devices such as POS terminals and smartphones. The service offers a <em>hardware agnostic</em> solution, which allows any application developed with CloudWalk to be compatible with all approved devices, offering many benefits, such as EMV and contactless technology.
      markets:
        item_1: — Administrators/Card Processor
        item_10: — Among many other market segments
        item_2: — Networks capture
        item_3: — Software Developers
        item_4: — Door-to-door sales
        item_5: — Healthcare providers
        item_6: — Logistics Operators
        item_7: — Universities and Colleges
        item_8: — Payments companies
        item_9: — Public service companies (water, energy, gas, etc.)
        paragraph_1: ! 'CloudWalk service is not limited to administration or processing credit or debit card, but it adheres to any market segment that might have a need to collect data in the field and issuing receipts and reports:'
      table_of_contents:
        benefits: Advantages and benefits
        how_it_works: How it works
        markets: Potential markets and applications
      title: CloudWalk Service Overview
    posxml:
      description: Programming language that is used to create applications for mobile devices.
      more_info:
        paragraph_1: Learn more about the <a href='https://en.wikipedia.org/wiki/POSXML' target='_blank' class='external'>POSXML</a> language on Wikipedia!
      overview:
        paragraph_1: POSXML is a name given to the programming language created by Plano Bê, aimed at developing applications for devices such as POS terminals and smartphones. It is organized and structured in the form of tags, showing levels and subsets of a set of commands and instructions, which form the logical structure of a POSXML application.
        paragraph_2: Structured and based on XML (acronym for eXtensible Markup Language), POSXML is easy to learn, has mathematical features and powerful graphical capabilities that enable the creation of animated interfaces with icons and animations.
      table_of_contents:
        more_info: More information
        overview: Presentation
      title: Language POSXML
    walk_framework:
      approved_devices:
        cloudwalk_reader: CloudWalk devices
        line_evo: VeriFone Evo Line
        line_telium_1: Ingenico Telium 1
        line_telium_2: Ingenico Telium 2
        line_verix: VeriFone Verix Line
        paragraph_1: The component WALK Framework, which is installed on devices, differs between various lines of equipments, since each device has its own specifications. If the equipment you want to use does not appear on the list below, <a href='mailto:cloudwalk@cloudwalk.io'>contact us</a>, because we might consider the approval of it.
        paragraph_2: ! 'Currently, the following devices are approved by WALK Framework:'
      contactless:
        paragraph_1: ! 'The CloudWalk service also offers the possibility of using the contactless technology with the following equipments:'
        paragraph_2: The contactless communication on Verifone terminals is done through the <strong>pinpad 1000 SE CTLS</strong>, together with the terminals Vx510 or Vx520.
        paragraph_3: The EVO contactless terminals have not been approved yet.
        paragraph_4: The contactless communication on Ingenico ICT terminals (ICT220 and ICT250) is done through the <strong>pinpad IPP220 CTLS</strong>. The IWL terminals (IWL220, IWL250 and IWL280) have a built-in native contactless communication interface.
      description: ! 'The WALK Framework is a virtual machine that has the ability to interpret the commands of POSXML language. Currently, the following devices are approved by WALK Framework: VeriFone Verix Line, VeriFone Evo Line, Ingenico Telium 2 Line.'
      overview:
        paragraph_1: The WALK Framework, installed directly on the device, is a virtual machine that has the ability to interpret the commands of POSXML language.
      table_of_contents:
        approved_devices: Approved devices
        overview: Presentation
      title: WALK Framework
    walk_manager:
      api:
        paragraph_1: All operations available through WALK Manager web interface can also be performed via JSON API by simply generating an API Token.
        paragraph_2: More information on
      description: WALK Manager is a tool used to grant access to devices, register applications, files, logical numbers and groups. All operations available through WALK Manager web interface can also be performed via JSON API.
      how_to_access:
        paragraph_1: Access to WALK Manager is done via Internet, using the address <a href='https://manager.cloudwalk.io'>https://manager.cloudwalk.io</a>.
      overview:
        paragraph_1: ! 'WALK Manager is a tool used to grant access to devices, register applications, files, logical numbers and groups. Also through WALK Manager are made: users management and monitoring of transactions performed by devices.'
      table_of_contents:
        api: API
        how_to_access: How to access
        overview: Presentation
      title: WALK Manager
  main_menu:
    docs: Documentation
    get_in_touch: Get in touch
    home: Home
    settings: My account
    sign_in: Log in
    sign_out: Logout
    sign_up: Create account
    support: Support
  menu:
    api:
      group_name: Developer API
      overview: Overview
      v1:
        apps: Applications
        assets: Files
        devices: Devices
        groups: Groups
        logical_numbers: Logical numbers
        logs: Logs
        parameters: Parameters
        users: Users
    development_environment:
      group_name: Development environment
      overview: Overview
    integration:
      advanced_http: REST HTTP
      architecture: Service architecture
      group_name: Integration with host
      http: Simple HTTP
      tcp: Plain TCP (socket tunnel)
    posxml:
      commands_list: List of commands
      configuration: Configuration
      file_system: File System
      group_name: POSXML language
      memory_and_variables: Variables and memory
      structure: Language structure
    understanding_the_service:
      development_environment: Development environment
      group_name: Understanding the service
      overview: Overview
      posxml: POSXML language
      walk_framework: WALK Framework
      walk_manager: WALK Manager
    walk_framework:
      configuration: Initial setup
      group_name: WALK Framework
      ingenico_telium_1: Ingenico Telium 1
      ingenico_telium_2: Ingenico Telium 2
      verifone_evo: VeriFone EVO
      verifone_verix: VeriFone Verix
    walk_manager:
      apps: Applications
      assets: Files
      devices: Devices
      group_name: WALK Manager
      groups: Groups
      logical_numbers: Logical numbers
      transactions_monitor: Monitor of transactions
  posxml:
    commands:
      adjustdatetime:
        description: Updates the device internal clock
        paragraph_1: Command <span class='code'>adjustdatetime</span> is used to update the date and time of the device.
        paragraph_2: In the above example, date and time of the device will be changed to <strong>01/01/2010 10:10:10</strong> every time the application runs.
        parameters:
          parameter_1: <strong>datetime</strong> <span class='data-type'>[string]</span><br/>Data format mmddyyyyhhmmss.
      break:
        description: The break command allows immediate exit from while loop
        paragraph_1: The command <span class='code'>break</span> is used to stop the execution of a loop.
        paragraph_2: In the above example, when the value of the variable <em>iNumber</em> is equal to <em>3</em> the condition of the command <a href='if' class='command'>if</a> is true, causing the execution of the command <strong>break</strong> which stopps the execution of the block <a href='while' class='command'>while</a> even if the condition has not been met yet.
      callfunction:
        description: Makes a call on a previously defined function
        paragraph_1: The command <span class='code'>callfunction</span> performs a function (<a href='function' class='command'>function</a>).
        paragraph_2: In the above example, function <em>double_value</em> has been declared, that encapsulates the command <a href='mathematicaloperation' class='command'>mathematicaloperation</a> which doubles the value of the variable <em>$(iNumber)</em>.
        paragraph_3: The command <a href='callfunction' class='command'>callfunction</a> calls the function <em>dobra_valor</em>.
        paragraph_4: To display the value of the variable <em>$(iNumber)</em>, which is an <a href='integervariable' class='command'>integervariable</a>, you need to change your type to <a href='stringvariable' class='command'>stringvariable</a> using the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>name</strong> <span class='data-type'>[string]</span><br/>Function name.
      checkpaperout:
        description: Checks if the paper compartment still contains paper
        paragraph_1: The command <span class='code'>checkpaperout</span> is used to check whether there is paper in the printer.
        paragraph_2: In the above example has been created a variable <em>$(iPaper)</em> that will store the result of the command <strong>checkpaperout</strong> through its parameter <em>variablereturn</em>.
        paragraph_3: The block <a href='if' class='command'>if</a> checks the value of the variable <em>$(iPaper)</em> and displays the message on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the result of the command, which may be 0 or 1.
      cleandisplay:
        description: Clean the device display (like a clear or cls)
        paragraph_1: The command <span class='code'>cleandisplay</span> is used to delete the entire contents of <a href='display' class='command'>display</a>.
        paragraph_2: In the example above, the four lines that were displayed has been removed from <a href='display' class='command'>display</a>
      closeserialport:
        description: Closes the serial port
        paragraph_1: The command <span class='code'>closeserialport</span> is used to close an open serial port.
        paragraph_2: In the above example the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>.
        paragraph_3: The command <a href='closeserialport' class='command'>closeserialport</a> will close the serial port.
        parameters:
          parameter_1: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/>Handle of the open door.
      comments: Comments
      comments_message: Leave your comment...
      convert_toint:
        description: Converts binary, decimal or hexadecimal to integer
        paragraph_1: The command <span class='code'>convert.toint</span> is used to specify a decision or logic comparison in the POSXML application. Other commands can be used within block <span class='code'>if</span>, and these commands are executed if the logical expression is true.
        paragraph_2: In the above example the binary <strong>1010</strong> will be converted to decimal.
        paragraph_3: To display the converted value on the <a href='display' class='command'>display</a>, you need to convert it using the command  <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: ! '<strong>base</strong> <span class=''data-type''>[integer]</span><br/>What base is used in the conversion:<ul><li>2: binary</li><li>10: decimal</li><li>16: hexadecimal</li></ul>'
          parameter_2: <strong>number</strong> <span class='data-type'>[string]</span><br/>Binary, decimal or hexadecimal that will be converted.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will receive return of the command.
      crypto_crc:
        description: 16-bit CRC calculation, support CRC-CCITT
        paragraph_1: The command <span class='code'>crypto.crc</span> is used for 16-bit CRC calculation and CRC-CCITT support.
        paragraph_2: In the above example, the buffer <strong>30313233343536</strong> will be used in the <strong>CRC</strong> calculation and the return of the command will be inserted in the variable <strong>iReturn</strong> and then turned into <a href='stringvariable' class='command'>stringvariable</a> in the variable <strong>sReturn</strong>.
        paragraph_3: The return should be <strong>31712</strong>.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal representation that will be used to calculate CRC.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes in buffer.
          parameter_3: <strong>type</strong> <span class='data-type'>[string]</span><br/>CRC or CRC-CCITT.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string or integer]</span><br/>Variable that will store the return of the command.
      crypto_encryptdecrypt:
        description: Encryption routines with algorithms DES, 3DES or NEWDES
        paragraph_1: The command <span class='code'>crypto.encryptdecrypt</span> is used to specify a decision or logic comparison in the POSXML application. Other commands can be used within block <span class='code'>if</span>, and these commands are executed if the logical expression is true.
        paragraph_2: In the example above, the command <a href='string.tohex' class='command'>string.tohex</a> has been used to transform the value of the variable <strong>sAscii</strong> in hexadecimal, which is the value required for the attribute <strong>crypto.encryptdecrypt</strong>.
        paragraph_3: The first <a href='display' class='command'>display</a> will display the value <strong>3031323334353637</strong> encrypted with type <strong>NEWDES</strong>.
        paragraph_4: The second <a href='display' class='command'>display</a> shows the decrypted value.
        parameters:
          parameter_1: <strong>cryptotype</strong> <span class='data-type'>[string]</span><br/>Algorithm to be used:<ul><li>DES</li><li>3DES</li><li>3DESTripleLength</li><li>NEWDES</li></ul>
          parameter_2: ! '<strong>key</strong> <span class=''data-type''>[string]</span><br/>Hexadecimal encryption key.<ul><li>DES: 8 bytes or 16 characters</li><li>3DES: 16 bytes or 32 characters</li><li>3DESTripleLength: 24 bytes or 48 characters</li><li>NEWDES: 15 bytes or 30 characters</li></ul>'
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Value, hexadecimal, which will be encrypted or decrypted. If the value has more than 8 bytes must be separated into blocks with the command <a href='string.elementat' class='command'>string.elementat</a>
          parameter_4: ! '<strong>type</strong> <span class=''data-type''>[integer]</span><br/><ul><li>0: Encrypt</li><li>1: Decrypt</li></ul>'
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      crypto_lrc:
        description: Generates a LRC byte of the string in the buffer
        paragraph_1: The command <span class='code'>crypto.lrc</span> is used to generate a LRC byte of the string in the buffer.
        paragraph_2: In the above example, the buffer <strong>30313233343536</strong> will be used to generate a <strong>LRC</strong> byte.
        paragraph_3: The return should be <strong>37</strong>.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal representation that will be used to generate a byte LRC.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes in the buffer.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string or integer]</span><br/>Variable that will store the return command.
      crypto_xor:
        description: Performs a binary XOR operation between the bytes of two strings
        paragraph_1: The command <span class='code'>crypto.xor</span> is used to perform a XOR binary operation between the bytes of two strings.
        paragraph_2: In the example above, <strong>buffer1</strong> <strong>123456</strong> is different from <strong>buffer2</strong> <strong>123450</strong> making that the <strong>XOR</strong> operation returns the result (hexadecimal) <strong>000 006 000 000</strong>.
        parameters:
          parameter_1: <strong>buffer1</strong> <span class='data-type'>[string]</span><br/>Hexadecimal string that will be used on the XOR operation.
          parameter_2: <strong>buffer2</strong> <span class='data-type'>[string]</span><br/>Hexadecimal string that will be used on the XOR operation.
          parameter_3: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Buffer size in bytes.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the hexadecimal return of the XOR command.
      deletefile:
        description: Deletes a file from the device memory
        paragraph_1: The command <span class='code'>deletefile</span> deletes a file from the device memory.
        paragraph_2: In the above example, the file <strong>test.txt</strong> has been downloaded with the command <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The command <a href='deletefile' class='command'>deletefile</a> deletes the file <strong>test.txt</strong> from the device's memory, making sure that the variable <strong>sPeople</strong> is empty and does not show anything on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
      description: Listing with a brief description of all POSXML commands.
      display:
        description: Displays a custom message on device's display
        paragraph_1: The command <span class='code'>display</span> is used to display a customized message, considering the row and column passed as parameter to the command.
        paragraph_2: In the above example, the message <strong>CLOUDWALK</strong> would be displayed on line <strong>0</strong> and column <strong>0</strong>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message that will be displayed.
      displaybitmap:
        description: Displays a monochromatic bitmap on the display
        paragraph_1: The command <span class='code'>displaybitmap</span> is used to display a bitmap.
        paragraph_2: In the above example, to display a bitmap with the command <strong>displaybitmap</strong>, first needs to be downloaded the file using <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: In this case it is not necessary to use the command <a href='display' class='command'>display</a> to view the image.
        paragraph_4: The variable <strong>iReturn</strong> will store the result of the command.
        paragraph_5: ! 'The image dimensions that will be shown must be aligned according to the device model and specification. Check an example image: <a href=''https://dl.dropboxusercontent.com/u/436039/CLOUDWALK/img/walk.bmp'' class=''external'' target=''_blank''>CloudWalk_Wallpaper</a>'
        parameters:
          parameter_1: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will receive return of the command.<ul><li>-2: Bitmap is monochrome</li><li>-1: invalid bitmap size</li><li>0: bitmap not found</li><li>1: bitmap successfully displayed</li></ul>'
          parameter_2: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name with extension.
      downloadfile:
        description: Downloads a file previously registered on the WALK Manager
        paragraph_1: The command <span class='code'>downloadfile</span> is used to download a file.
        paragraph_2: In the example above, the file <strong>wallpaper_walkpb.bmp</strong> will be downloaded by the command <strong>downloadFile</strong>, displaying the response <strong>1</strong> on the <a href='display' class='command'>display</a>.
        paragraph_3: As the return of the command <strong>downloadFile</strong> is an <a href='integervariable' class='command'>integervariable</a>, it must be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a> with the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name with extension.
          parameter_2: <strong>remotepath</strong> <span class='data-type'>[string]</span><br/>File name with extension.
          parameter_3: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return command. <ul><li>2: The file has the CRC of a file on the server </li><li>1: Download performed successfully </li><li>0: Error encode base 64 </li><li>-1: File not found or error on encode</li><li>-2: connection Error in buffer send</li><li>-4: error when receiving Walk Server package </li><li>-5: Error connecting to Walk Server</li><li>-6: Error message transfer</li><li>-7: Error sending confirmation of completed download</li><li>-8: number unauthorized</li></ul>'
      editfile:
        description: Allows write a file in WALK dbfile format (key/value)
        paragraph_1: The command <span class='code'>editfile</span> is used to edit a file in <a href='#walk_db' class='command'>Walk DB</a> format.
        paragraph_2: In the above example, has been downloaded the file <strong>test.txt</strong> with the command <a href='downloadfile' class='command'> downloadFile </a>.
        paragraph_3: The command <a href='editfile' class='command'>editfile</a> makes the edition of the key <strong>Population</strong>, passing the value from <strong>3.792.621</strong> to <strong>3.792.700</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: <strong>key</strong> <span class='data-type'>[string]</span><br/>Key.
          parameter_3: <strong>value</strong> <span class='data-type'>[integer]</span><br/>New value for the key.
      else:
        description: Logical condition in a block of the if statement
        paragraph_1: The <span class='code'>else</span> statement is used to specify a condition contrary to the <span class='code'>if</span> statement in an POSXML application. Other commands can be used within an <span class='code'>else</span> block, and these commands are executed if the logical expression of the <span class='code'>if</span> statement is not true.
        paragraph_2: ! 'There are three conditions in the example above:'
        paragraph_3: 1st - comparison between two texts resulting in <strong>false</strong> because <strong>Blue</strong> is different from the value of the variable <strong>sColor</strong>;
        paragraph_4: 2nd - comparison between two numbers resulting in <strong>false</strong> because <strong>111</strong> isn't greater than the value of the variable <strong>iNumber</strong>;
        paragraph_5: 3rd - comparison between two texts resulting in <strong>false</strong> because <strong>blue</strong> is equal to the value of the variable <strong>$(sColor)</strong>;
        paragraph_6: POSXML is <strong>case-sensitive</strong>, so uppercase letters are different than lowercase letters.
      emv_adddata:
        description: Adds parameters to EMV process
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_10: For the type <em><strong>'finish'</strong> &lt;emv.finishtransaction/&gt;</em>
        paragraph_11: In the above example was demonstrated an example for each parameter type, <span class='code'>init</span>, <span class='code'>process</span> and <span class='code'>finish</span>.
        paragraph_12: The example shown here is fictitious, since in order to succeed with a full EMV transaction is necessary several other factors such as an ISO-8583 answer from the card issuer, keys injected into the terminal and other requirements defined by the EMV standard.
        paragraph_2: The command <span class='code'>emv.adddata</span> is used to pass parameters to the <em>Kernel EMV</em> on commands <a href='emv.inittransaction' class='command'>emv.inittransaction</a>, <a href='emv.processtransaction' class='command'>emv.processtransaction</a> and <a href='emv.finishtransaction' class='command'>emv.finishtransaction</a>.
        paragraph_3: ! 'Allowed parameters:'
        paragraph_4: Parameter
        paragraph_5: Description
        paragraph_6: Contact
        paragraph_7: Cless
        paragraph_8: For the type <em><strong>'init'</strong> &lt;emv.inittransaction/&gt;</em>
        paragraph_9: For the type <em><strong>'process'</strong> &lt;emv.processtransaction/&gt;</em>
        parameters:
          parameter_1: <strong>parameter</strong> <span class='data-type'>[string]</span><br/> Parameter name to be sent. <a href='#table-of-parameters'>(see table below)</a>
          parameter_2: ! '<strong>type</strong> <span class=''data-type''>[string]</span><br/> Possible types: <br/><ul><li>init</li><li>process</li><li>finish</li></ul>'
          parameter_3: <strong>value</strong> <span class='data-type'>[string]</span><br/> Parameter value.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Command return, where: <br/><ul><li>0: OK</li><li>-1: Error. Type, key or value doesn''t exist.'
      emv_cleanstructures:
        description: Clears all input and output parameters
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.cleanstructures</span> is used to clean the data entry and search information structures. It's necessary to be executed when starting a transaction.
        paragraph_3: In the above example, the first command to be executed is <span class='code'>emv.cleanstructures</span>, to clean up the data structures for the new transaction, then the command <a href='emv.adddata' class='command'>emv.adddata</a> is executed to pass the parameters to the <em>Kernel EMV</em>, and then the command <a href='emv.inittransaction' class='command'>emv.inittransaction</a> initiates the transaction.
        paragraph_4: The command <a href='if' class='command'>if</a> should be used to evaluate the returning of the commands. In the process of developing an application, the commands <a href='inttostring' class='command'>inttostring</a> and <a href='print' class='command'>print</a> can be used to <strong>DEBUG</strong> and help the developer.
      emv_finishtransaction:
        description: Terminates the execution of the EMV process
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.finishtransaction</span> finishes chip processing, if <a href='emv.processtransaction' class='command'>emv.processtransaction</a> has requested online approval or if the transaction has already been approved offline.
        paragraph_3: A transaction denied in <a href='emv.processtransaction' class='command'>emv.processtransaction</a> does not require a call to this instruction.
        paragraph_4: In the above example, the command <a href='emv.adddata' class='command'>emv.adddata</a> was used to pass parameters to the <em>Kernel EMV</em>.
        paragraph_5: After that, the command <span class='code'>emv.finishtransaction</span> is executed to finish the chip processing; since the command return is an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert and show the variable through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter passed on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li><li>16: Internal error</li><li>20: Device timestamp doesn''t match with the parameter''s timestamp passed through <em>emv.adddata</em></li><li>40: Execution error</li><li>41: Error while reading the card<li>43: Card removed in the middle of the operation</li></ul>'
      emv_getinfo:
        description: Returns information parameters after the execution of the EMV process
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_10: For the type <em><strong>'finish'</strong> &lt;emv.finishtransaction/&gt;</em>
        paragraph_11: In the above example, the command <span class='code'>emv.getinfo</span> was used to fetch the parameters after the execution of the commands <a href='emv.inittransaction' class='command'>emv.inittransaction</a>, <a href='emv.processtransaction' class='command'>emv.processtransaction</a> and <a href='emv.finishtransaction' class='command'>emv.finishtransaction</a>. The command <a href='print' class='command'>print</a> was used to display the ticket information.
        paragraph_12: Note that before performing the commands <strong>init</strong>, <strong>process</strong> and <strong>finish</strong> it is necessary to pass parameters to the <em>Kernel EMV</em> with the command <a href='emv.adddata' class='command'>emv.adddata</a>.
        paragraph_2: The command <span class='code'>emv.getinfo</span> is used to search for results in the instructions <a href='emv.inittransaction' class='command'>emv.inittransaction</a>, <a href='emv.processtransaction' class='command'>emv.processtransaction</a> and <a href='emv.finishtransaction' class='command'>emv.finishtransaction</a>.
        paragraph_3: ! 'Allowed parameters:'
        paragraph_4: Parameter
        paragraph_5: Description
        paragraph_6: Contact
        paragraph_7: Cless
        paragraph_8: For the type <em><strong>'init'</strong> &lt;emv.inittransaction/&gt;</em>
        paragraph_9: For the type <em><strong>'process'</strong> &lt;emv.processtransaction/&gt;</em>
        parameters:
          parameter_1: <strong>parameter</strong> <span class='data-type'>[string]</span><br/>Parameter name to search for <a href='#table-of-parameters'>(see table below)</a>.
          parameter_2: <strong>type</strong> <span class='data-type'>[string]</span><br/>Possible types:<br/><ul><li>init</li><li>process</li><li>finish</li></ul>
          parameter_3: <strong>value</strong> <span class='data-type'>[string]</span><br/>Variable that will store the parameter value that will be returned by the <em>Kernel EMV</em>.
      emv_inittransaction:
        description: Initializes the EMV process with inserted parameters
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.inittransaction</span> begins processing the EMV card, either magnetic stripe or chip. At this time, the EMV library will ask the card <strong>insertion/swipe</strong> in order to choose and start the EMV application on the smartcard. The answer is the card data to be analyzed by the device application.
        paragraph_3: This instruction uses the timeout on the operation of card insertion and choice of application, if it has been defined by <a href='emv.settimeout' class='command'>emv.settimeout</a>.
        paragraph_4: In the above example, the command <a href='emv.cleanstructures' class='command'>emv.cleanstructures</a> was used to clean the data structures, and the command <a href='emv.adddata' class='command'>emv.adddata</a> was used pass the parameters to the <em>Kernel EMV</em>.
        paragraph_5: After that, the command <span class='code'>emv.inittransaction</span> is executed to start the EMV processing. Since the return of command is an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert and show the variable through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter passed on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li></ul>'
      emv_loadtables:
        description: load tables EMV and PKI of the file for the buyer
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.loadtables</span> is used to load the tables of settings for each application by EMV acquirer network.
        paragraph_3: The loading of tables should be done in the device initialization. To load a table, a file should be sent to the device, with a standard name plus the number of the acquirer network.
        paragraph_4: In the above example, the command <a href='emv.open' class='command'>emv.open</a> is used to start the EMV library, and then the command <a href='if' class='command'>if</a> is used to evaluate the result of the operation.
        paragraph_5: The command <span class='code'>emv.loadtables</span> is used to load the tables, and since the command return is a <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert and display the variable through the command <a href='display' class='command'>display</a>.
        paragraph_6: <strong>ATTENTION!</strong>
        paragraph_7: It is necessary to initialize the library EMV and load the tables only if the device is <strong>turned on</strong> or <strong>restarted</strong>, otherwise it is not necessary to use this command every time on an EMV transaction.
        parameters:
          parameter_1: <strong>acquirer</strong> <span class='data-type'>[integer]</span><br/> Acquirer network identification number.
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>0: OK</li><li>10: Error while starting the tables</li><li>15: Library EMV not initiated</li><li>16: Internal error</li><li>21: Error while trying to store records</li><li>30: Communication error, PIN-Pad serial port is probably busy</li></ul>'
      emv_open:
        description: Initializes EMV library
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.open</span> is used to initialize the EMV library, allocating hardware and software resources necessary for the EMV Kernel operation. A successful call to this command is a prerequisite for all other EMV library calls.
        paragraph_3: In the above example, the command <span class='code'>emv.open</span> was used to initialize the device's EMV library. Since the command returns an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> was used to convert the variable to <a href='stringvariable' class='command'>stringvariable</a>, displaying its content through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>mkslot</strong> <span class='data-type'>[integer]</span><br/> Device slot that the master key is stored.
          parameter_2: ! '<strong>pinpadtype</strong> <span class=''data-type''>[integer]</span><br/> PIN-Pad type: <br/><ul><li>1: Internal</li><li>2: External</li></ul>'
          parameter_3: <strong>pinpadwk</strong> <span class='data-type'>[string]</span><br/> Working key used on the pinpad session.
          parameter_4: ! '<strong>showamount</strong> <span class=''data-type''>[integer]</span><br/> Defines wether the library should show the amount: <br/><ul><li>1: Show the amount</li><li>0: Does not show the amount</li></ul>'
          parameter_5: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Command return, where: <br/><ul><li>0: OK</li><li>14: Library already started</li><li>16: Error</li></ul>'
      emv_processtransaction:
        description: Starts the execution of the EMV process
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.processtransaction</span> continues the chip card handling process. If the command <a href='emv.inittransaction' class='command'>emv.inittransaction</a> returns that a magnetic card was swiped, then this command should not be executed.
        paragraph_3: This command uses the timeout when capturing the PIN if it was defined by <a href='emv.settimeout' class='command'>emv.settimeout</a>.
        paragraph_4: In the above example, the command <a href='emv.adddata' class='command'>emv.adddata</a> was used to pass parameters to the <em>Kernel EMV</em>.
        paragraph_5: Then, the command <span class='code'>emv.processtransaction</span> is executed to continue the chip card handling process. Since the command returns an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable, displaying its content through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>ctls</strong> <span class=''data-type''>[integer]</span><br/>Defines wether the transaction should be <em><strong>contact-less</strong></em>, where:<br/><ul><li>1: Contact-less transaction</li><li>0: Contact (standard) transaction</li></ul>'
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter passed on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li><li>16: Internal error</li><li>19: Absence of data for the mandatory field 55, or mandatory data is not accessible (if that''s the case, pass the tag on baOptionalTags)</li><li>31: PIN-Pad communication error</li><li>40: Execution error</li><li>43: Card removed in the middle of the operation</li></ul>'
      emv_removecard:
        description: Waits for card removal
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.removecard</span> awaits the chip card removal. It is advised to always use this command at the end of the operation flow, whether successful or unsuccessful.
        paragraph_3: This command uses the timeout to remove the card if it was defined by <a href='emv.settimeout' class='command'>emv.settimeout</a>.
        paragraph_4: In the above example, the command <a href='emv.adddata' class='command'>emv.adddata</a> was used to pass parameters to the <em>Kernel EMV</em>.
        paragraph_5: Then, the command <span class='code'>emv.finishtransaction</span> is executed to finish the chip card handling process. After that, the command <span class='code'>emv.removecard</span> requests the user to remove the chip card. Since the command returns an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable, displaying its content through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter set on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li></ul>'
      emv_settimeout:
        description: Define timeout (in seconds) of the library of the EMV process
        paragraph_1: Knowledge about <a href='http://www.emvco.com' class='external' target='blank'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.settimeout</span> is used to set a timeout to be used be blocking commands.
        paragraph_3: This timeout can be changed before performing a command, that is, this statement can be called several times during the transaction cycle.
        paragraph_4: In the above example, the command <span class='code'>emv.settimeout</span> is executed passing 10 seconds to the parameter <em><strong>seconds</strong></em>, that is, when the next command <a href='emv.inittransaction' class='commands'>emv.inittransaction</a> is executed, the device will wait for 10 seconds until the user inserts or swipes the card.
        parameters:
          parameter_1: <strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Timeout in seconds
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>0: OK</li><li>15: Library EMV not initiated</li><li>16: Internal error</li></ul>'
      example: Example
      execute:
        app_name: ! 'Application name:'
        description: Execute a POSXML application stored on the device
        paragraph_1: The command <span class='code'>execute</span> executes a compiled POSXML file.
        paragraph_2: In the examples above, two POSXML applications were created; The first one with the name <strong>appone</strong> and the second one with the name <strong>apptwo</strong>.
        paragraph_3: By starting the first application and assuming that the connection is successfully established, the second application is going to be downloaded and then excuted through the command <a href='execute' class='command'>execute</a>. The second application (<strong>apptwo</strong>) will then show a confirmation message when executed by the application <strong>appone</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the POSXML file that will be executed.
      exit:
        description: Immediately closes the execution of the POSXML application
        paragraph_1: The command  <span class='code'>exit</span> is used to cancel the execution of a POSXML application.
        paragraph_2: In this example, despite the use of the command <a href='waitkey' class='command'>waitkey</a>, the command <strong>exit</strong> will close the application after the command <a href='display 'class='command'>display</a> run.
      file_close:
        description: Closes a file that was previously opened by file.open
        paragraph_1: The command  <span class='code'>file.close</span> is used to close an open file.
        paragraph_2: In the above example, with the command <a href='downloadfile' class='command'>downloadfile</a> has been downloaded the file <strong>test.txt</strong>.
        paragraph_3: The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a> and closed by command <a href='file.close' class='command'>file.close</a>.
        parameters:
          parameter_1: <strong>handle</strong> <span class='data-type'>[integer]</span><br/>Handle of the opened file.
      file_open:
        description: Opens a file for reading or writing
        paragraph_1: The command <span class='code'>file.open</span> is used to open a file for reading or writing.
        paragraph_2: In the above example, by the command <a href='downloadfile' class='command'>downloadfile</a> has been downloaded the file <strong>test.txt</strong>. The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a>.
        paragraph_3: The command <a href='display' class='command'>display</a> will display <strong>-1</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: ! '<strong>mode</strong> <span class=''data-type''>[string]</span><br/><ul><li>r: Reading</li><li>w: Writing</li></ul>'
          parameter_3: ! '<strong>variablehandle</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command.<ul><li>-1: Could not open file</li><li>>-1: Open file</li></ul>'
      file_read:
        description: Reads a file that was previously opened by file.open
        paragraph_1: The command <span class='code'>file.read</span> is used to read a file open.
        paragraph_2: In the above example, with the command <a href='downloadfile' class='command'>downloadfile</a> has been downloaded the file <strong>test.txt</strong>. The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a>
        paragraph_3: Note that to inform the file size, in bytes, for the command <a href='file.read' class='command'>file.read</a>, had to be used the command <a href='filesystem.filesize' class='command'>filesystem.filesize</a>.
        paragraph_4: The return of the reading of the file executed by the command <a href='file.read' class='command'>file.read</a> will appear on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>handle</strong> <span class='data-type'>[integer]</span><br/>Handle of the opened file.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes to be read.
          parameter_3: <strong>variablebuffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal of the content of read bytes.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Number of read bytes.
      file_write:
        description: Writes a file that was previously opened by file.open
        paragraph_1: The command <span class='code'>file.write</span> is used to writing on an open file.
        paragraph_2: In the above example, with the command <a href='downloadfile' class='command'>downloadfile</a> has been downloaded the file <strong>test.txt</strong>. The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a>.
        paragraph_3: Note that to inform the file size, in bytes, for the command <a href='file.read' class='command'>file.read</a>, had to be used the command <a href='filesystem.filesize' class='command'>filesystem.filesize</a>.
        paragraph_4: The return of the reading of the file executed by the command <a href='file.read' class='command'>file.read</a> will appear in the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>handle</strong> <span class='data-type'>[integer]</span><br/>Handle of the opened file.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes to be written.
          parameter_3: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal of the content to be written.
      filesystem_filesize:
        description: Returns the size of a file in the memory of the POS
        paragraph_1: The command <span class='code'>filesystem.filesize</span> is used to get the size, in bytes, of a file in the device memory.
        paragraph_2: In the example above, the file <strong>wallpaper_walkpb.bmp</strong> will be downloaded by the command <strong>downloadFile</strong> and the command <strong>filesystem.filesize</strong> will return the size in bytes.
        paragraph_3: As the return of the command <strong>filesystem.filesize</strong> is an <a href='integervariable' class='command'>integervariable</a>, it must be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a> by the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name with extension.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      filesystem_listfiles:
        description: Lists the files of a directory by saving them in a file
        paragraph_1: The command <span class='code'>filesystem.listfiles</span> is used to list the directory files by saving them in a file.
        paragraph_2: At this moment this commands is not supported by <strong>Telium 2</strong> terminals.
        paragraph_3: In the above example, a file called <em><strong>files.dat</strong></em> will be created, and this file will save the name and size of all files that are in the directory being analyzed, in this case the directory <strong>F</strong>.<br/> Since the command return is an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert and show the variable through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>dir</strong> <span class='data-type'>[string]</span><br/>Directory which is going to be analyzed, that can be I or F (VeriFone).
          parameter_2: <strong>listfilename</strong> <span class='data-type'>[string]</span><br/>Name of the file that will store the name and size of the files in the specified directory.
          parameter_3: ! '<strong>variablereturn</strong> <span class=''data-type''>[inteiro]</span><br/>Variable that will store the return of the command.<ul><li>0: File list created</li><li>-1: Empty directory</li></ul>'
      filesystem_space:
        description: Checks the space (free and used) and the number of files in memory
        paragraph_1: This command does not work on <strong>Telium</strong> terminals
        paragraph_2: The command <span class='code'>filesystem.space</span> is used to get the information about the device memory.
        paragraph_3: In the example above, on the <a href='display' class='command'>display</a> appear all the information about the device memory.
        paragraph_4: As the return of the command <strong>filesystem.filespace</strong> is an <a href='integervariable' class='command'>integervariable</a>, it must be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a> by the command <a href='inttostring' class='command'>inttostring</a>
        parameters:
          parameter_1: <strong>dir</strong> <span class='data-type'>[string]</span><br/>Unit.
          parameter_2: ! '<strong>type</strong> <span class=''data-type''>[string]</span><br/><ul><li>total: Total space</li><li>used: Used space</li><li>free: Free space</li><li>countfiles: Number of files</li></ul>'
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      function:
        description: Defines a block of code that can be executed later
        paragraph_1: The command <span class='code'>function</span> encapsulates other commands and actions and can be called by the command <a href='callfunction' class='command'>callfunction</a> when needed. Functions are used to avoid code repetition.
        paragraph_2: In the above example, has been declared the function <em>double_value</em> that encapsulates the command <a href='mathematicaloperation' class='command'>mathematicaloperation</a> which doubles the value of the variable <em>$(iNumber)</em>.
        paragraph_3: The command <a href='callfunction' class='command'>callfunction</a> calls the function <em>dobra_valor</em>.
        paragraph_4: To display the value of the variable <em>$(iNumber)</em>, which is an <a href='integervariable' class='command'>integervariable</a>, you need to change your type to <a href='stringvariable' class='command'>stringvariable</a> using the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>name</strong> <span class='data-type'>[string]</span><br/>Name given to the function, used when the function is called.
      getcardvariable:
        description: Gets the card number and stores it directly on a variable
        paragraph_1: The command <span class='code'>getcardvariable</span> is used to retrieve the card number passed through the magnetic reader.
        paragraph_2: In the above example, when the card is passed through the magnetic reader, its number will be displayed.
        parameters:
          parameter_1: <strong>firstmessage</strong> <span class='data-type'>[string]</span><br/>Message that appears before the card is passed in magnetic reader.
          parameter_2: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>The maximum size of the card number.
          parameter_3: <strong>minimum</strong> <span class='data-type'>[integer]</span><br/>The minimum size of the card number.
          parameter_4: <strong>secondmessage</strong> <span class='data-type'>[string]</span><br/>Message that appears when the user presses the <strong>Enter</strong> key.
          parameter_5: <strong>variable</strong> <span class='data-type'>[string]</span><br/>Variable that will receive the return of function.
      getdatetime:
        description: Stores in a variable date and time at runtime
        paragraph_1: The command <span class='code'>getdatetime</span> is used to get the device date/time.
        paragraph_2: The command <a href='getdatetime' class='command'>getdatetime</a> receives the desired format and informs the variable that will hold your return which is then displayed on the device screen.
        parameters:
          parameter_1: ! '<strong>format</strong> <span class=''data-type''>[string]</span><br/>Date format retrieved where:<ul><li>yy: four-digit year</li><li>y: two-digit year</li><li>M: two-digit month</li><li>d: two-digit day</li><li>h: two-digit hour</li><li>m: two-digit minute</li><li>second: two-digit second</li>separators / and : are added automatically.</ul>'
          parameter_2: <strong>returnvariable</strong> <span class='data-type'>[string]</span><br/> Store the returned date.
      if:
        description: Instruction of decision making or logical comparison
        operators:
          operator_1: <strong>greaterthan:</strong> greater than <span class='code'>&gt;</span>
          operator_2: <strong>lessthan:</strong> less than <span class='code'>&lt;</span>
          operator_3: <strong>greaterthanorequalto:</strong> grater than or equal to <span class='code'>&gt;=</span>
          operator_4: <strong>lessthanorequalto:</strong> less than or equal to <span class='code'>&lt;=</span>
          operator_5: <strong>equalto:</strong> equal to <span class='code'>=</span>
          operator_6: <strong>notequalto:</strong> not equal to <span class='code'>!</span>
        operators_integer:
          paragraph_1: <strong>Operators with variables of type integer</strong>
          paragraph_2: For variables of type integer, all operations are performed following the standard of any programming language.
        operators_list: <strong>List of operators</strong>
        operators_string:
          paragraph_1: <strong>Operators with variables of type string</strong>
          paragraph_2: Operators <span class='code'>greaterthan</span>, <span class='code'>lessthan</span>, <span class='code'>greaterthanorequalto</span>, <span class='code'>lessthanorequalto</span>, in the case of variables of type string, convert the variable that is being compared to floating point, and then perform the comparison.
        other_operators: Operators <span class='code'>equalto</span> and <span class='code'>notequalto</span> follow the same logic of comparision that any programming language.
        paragraph_1: The command <span class='code'>if</span> is used to specify a decision or logic comparison in a POSXML application. Other commands can be used within block <span class='code'>if</span>, and these commands are executed if the logical expression is true.
        paragraph_2: In the example above, there are three conditions:<ul><li>1st - compares two texts causing it to be <em>true</em> as <em>Blue</em> is equal to the value of the variable <em>sColor</em></li><li>2nd - compares two numbers causing it to be <em>false</em> as <em>111</em> is not greater than the value of the variable <em>iNumber</em></li><li>3rd - compares two texts causing it to be <em>false</em> as <em>Blue</em> is different from the value of the variable <em>sColor</em>. POSXML considers uppercase and lowercase letters (<em>case-sensitive</em>)</li></ul> The command <a href='waitkey' class='command'>waitkey</a> awaits a click of any key to continue code execution.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will be used in the comparision.
          parameter_2: ! '<strong>operator</strong> <span class=''data-type''>[string]</span><br/>Comparison operators: <span class=''code''>lessthan</span>, <span class=''code''>greaterthan</span>, <span class=''code''>equalto</span>, <span class=''code''>notequalto</span>, <span class=''code''>greaterthanorequalto</span> or <span class=''code''>lessthanorequalto</span>.'
          parameter_3: <strong>value</strong> <span class='data-type'>[string or integer]</span><br/>Value that will be used in the comparison.
      input_getvalue:
        description: Captures a string and displays it on the screen in any position
        paragraph_1: The command <span class='code'>input.getvalue</span> is used to store a value in a variable.
        paragraph_2: In the above example the command <a href='input.getvalue' class='command'>input.getvalue</a> will receive an input and store the value in the variable <strong>sReturn</strong>.
        parameters:
          parameter_1: <strong>allowsempty</strong> <span class='data-type'>[string]</span><br/>Defines the mandatory.
          parameter_2: <strong>caption</strong> <span class='data-type'>[string]</span><br/>Header.
          parameter_3: <strong>columncaption</strong> <span class='data-type'>[integer]</span><br/>Column where the entered value should appear.
          parameter_4: <strong>linecaption</strong> <span class='data-type'>[integer]</span><br/>Line where the entered value should appear on the header.
          parameter_5: <strong>columninput</strong> <span class='data-type'>[integer]</span><br/>Column where the entered value should appear.
          parameter_6: <strong>lineinput</strong> <span class='data-type'>[integer]</span><br/>Line where the entered value should appear.
          parameter_7: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>Maximum number of characters.
          parameter_8: <strong>minimun</strong> <span class='data-type'>[integer]</span><br/>Minimum number of characters.
          parameter_9: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      inputfloat:
        description: Allows the entry of a value with dot (.) by pressing (*)
        paragraph_1: The command <span class='code'>inputfloat</span> is used to allow the entry of a decimal value (for example 1.99).
        paragraph_2: In the above example, the string variable <strong>sNumber</strong> was created and will store the <em>float</em> value entered by the user. The value is then displayed through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column that message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      inputformat:
        description: Allows the entry of a value based on a pre-defined format
        paragraph_1: The command <span class='code'>inputformat</span> is used to define the entrance to a value based on a pre-defined format.
        paragraph_2: In the above example, each command has a predefined format and the value is displayed on the <a href='display' class='command'>display</a> when a key is pressed and its numerical value is stored in the variable <strong>sReturn</strong>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column that message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
          parameter_5: ! '<strong>format</strong> <span class=''data-type''>[integer]</span><br/>Input format <ul><li>9: any numeric character</li><li>A: any non-numeric character</li><li>*: password</li></ul> You can use only one format for command.'
      inputinteger:
        description: Allows the entry of an integer
        paragraph_1: The command <span class='code'>inputinteger</span> is used to allow entry of an integer, following a maximum and a minimum limit.
        paragraph_2: In the above example the command <strong>inputinteger</strong> awaits an integer, which is converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
          parameter_5: <strong>minimum</strong> <span class='data-type'>[integer]</span><br/>Maximum length of the number.
          parameter_6: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>Minimum length of the number.
      inputmoney:
        description: Allows the entry of a monetary value
        paragraph_1: The command <span class='code'>inputmoney</span> is used to enter monetary values. The separators are automatically added, eliminating the need for the user to type dot or comma.
        paragraph_2: In the above example the command <strong>inputinteger</strong> awaits for a integer number to be entered by the user. The entered value will be stored without formatting, and then the value is converted to <a href='stringvariable' class='command'>stringvariable</a> through the command <a href='inttostring' class='command'>inttostring</a>, and after that the value is displayed in the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column that message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      inputoption:
        description: Allows the entry of an integer
        paragraph_1: The command <span class='code'>inputoption</span> is used to allow entry of an integer, following a maximum and a minimum limit.
        paragraph_2: In the above example the command <strong>inputoption</strong> awaits an integer, which is converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
          parameter_5: <strong>minimum</strong> <span class='data-type'>[integer]</span><br/>Maximum length of the number.
          parameter_6: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>Minimum length of the number.
      integerconvert:
        description: Conversion from integer to binary, octal or hexadecimal
        paragraph_1: The command <span class='code'>integerconvert</span> is used to convert an integer into binary, octal or hexadecimal.
        paragraph_2: In the above example number <strong>10</strong> will be converted to binary, octal and hexadecimal values and will be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>base</strong> <span class=''data-type''>[integer]</span><br/>What base is used in the conversion:<ul><li>2: binary</li><li>8: octal</li><li>16: hexadecimal</li></ul>'
          parameter_2: <strong>number</strong> <span class='data-type'>[string]</span><br/>Decimal number to be converted.
          parameter_3: <strong>sizereturn</strong> <span class='data-type'>[integer]</span><br/>Size of the return, if the entered number is greater, there will be added 0 on the left.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      integeroperator:
        description: Increases by 1 (+1) or decrements by 1 (-1) a variable of integer type
        paragraph_1: The command <span class='code'>integeroperator</span> is used to increment or decrement its value contained in the variable.
        paragraph_2: In the above example number <strong>10</strong> will be incremented, and its value changed to <strong>11</strong> and will be stored in the variable <strong>sGreaterNumber</strong>.
        paragraph_3: The new value of the variable <strong>iNumber</strong>, <strong>11</strong> will be decremented, and its value changed to <strong>10</strong> and will be stored in the variable <strong>sLowerNumber</strong>.
        paragraph_4: To display the values on the <a href='display' class='command'>display</a>, you will need to convert them to <a href='stringvariable' class='command'>stringvariable</a> with the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>operator</strong> <span class='data-type'>[string]</span><br/>Increase (++) or decrease (--).
          parameter_2: <strong>variablesource</strong> <span class='data-type'>[integer]</span><br/>Number that will be used in the operation.
      integervariable:
        description: Creates an instance of the variable of integer type
        paragraph_1: The command <span class='code'>integervariable</span> is used to declare a variable to store only whole numbers, positive or negative.
        paragraph_2: To display a variable of type <strong>integervariable</strong>, you must convert your type to <a href='stringvariable' class='command'>stringvariable</a>, as has been done in the example above.
        paragraph_3: In the above example, two variables has been created, one of <strong>integervariable</strong> type and another of <a href='stringvariable' class='command'>stringvariable</a> type. The variable <em>$(iNumber)</em> has an initial value of <em>10</em>.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[string]</span><br/>Variable Name.
          parameter_2: <strong>value</strong> <span class='data-type'>[integer or string]</span><br/>Initial value of the variable.
      inttostring:
        description: Conversion from integer to string
        paragraph_1: The command <span class='code'>inttostring</span> is used to convert an integer to string.
        paragraph_2: In the above example number <strong>10</strong> will be converted into string and displayed on the <a href='display' class='command'>display</a>.
        paragraph_3: The command <a href='display' class='command'>display</a> displays only variables of type <a href='stringvariable' class='command'>stringvariable</a>.
        parameters:
          parameter_1: <strong>variableinteger</strong> <span class='data-type'>[integer]</span><br/>Integer value to be converted to string.
          parameter_2: <strong>variablestring</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      iso8583_analyzemessage:
        description: Starts the process of analysis and decomposition of the fields of the message
        paragraph_1: The command <span class='code'>iso8583.analyzemessage</span> is used to start the process of analysis and decomposition of the fields of the message.
        paragraph_2: The command <span class='code'>iso8583.analyzemessage</span> is used to start the process of analysis and decomposition of the fields of the message.
        paragraph_3: In the above example, after performing the transaction with the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>, the authorizer responds by sending another ISO message, which is stored on the variable <em><strong>ReceiveMsgISO</strong></em>, and the amount of bytes of the variable on <em><strong>iRecvBytes</strong></em>.
        paragraph_4: The command <span class='code'>iso8583.analyzemessage</span> is executed to analyze the message returned by the authorizer, if executed successfully, then the <em><strong>function</strong></em> <em><strong>Getfields</strong></em> is executed to retrieve the fields of the reply message.
        parameters:
          parameter_1: <strong>format</strong> <span class='data-type'>[string]</span><br/> Format of the message to be analyzed, which can be ASCII or BCD.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/> Size of the message being analyzed.
          parameter_3: <strong>variableid</strong> <span class='data-type'>[string]</span><br/> Variable that stores the message ID.
          parameter_4: <strong>variablemessage</strong> <span class='data-type'>[string]</span><br/> Variable that has stored the message to be analyzed.
          parameter_5: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Variable that will store the return of the command, where: <br/> <span class=''data-type''> 0: message successfully analyzed <br/> -806: error on the analyzed message</span>'
      iso8583_endmessage:
        description: Ends assembly of the ISO message
        paragraph_1: The command <span class='code'>iso8583.endmessage</span> is used to finish the ISO8583 message being mounted.
        paragraph_2: In the above example, after starting the ISO8583 message through the command <a href='iso8583.initmessage' class='command'>iso8583.initmessage</a> and inserting the fields through the command <a href='iso8583.putfield' class='command'>iso8583.putfield</a> according to the bitmap (<strong>bitmap.dat</strong>), the command <a href='iso8583.endmessage' class='command'>iso8583.endmessage</a> will be responsible to finish the message, storing on the variable <strong>iSizeMessageISO</strong> the message size and also storing the complete message on the variable <strong>sMsgIso8583</strong>.
        paragraph_3: To visualize the data stored on the variable <strong>sMsgIso8583</strong>, the command <a href='print' class='command'>print</a> was used, where the command <span class='code'>print</span> receives the message as a parameter, letting the device print it. Now it is possible to begin the transaction through the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>.
        paragraph_4: To view the data stored on the variable <strong>sMsgIso8583</strong>, the command <a href='print' class='command'>print</a> was added, passing as a parameter the ISO8583 message, to get the message printed. Now it's possible to start the transaction with the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>.
        parameters:
          parameter_1: <strong>variablesize</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the size of the message.
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/> <span class=''data-type''> 0: message successfully finished <br/> -802: function error <br/> -803: buffer overrun </span>'
      iso8583_getfield:
        description: Extracts a field of the previously analyzed message
        paragraph_1: The command <span class='code'>iso8583.getfield</span> is used to extract a field from the message previously analyzed.
        paragraph_2: The command <span class='code'>iso8583.getfield</span> is used to extract a field from a message previously analyzed in ascending order.
        paragraph_3: In the above example, after processing the transaction and analyzing the ISO message returned by the authorizer, as shown in the example <a href='iso8583.analyzemessage' class='command'>iso8583.analyzemessage</a>, it is possible to start retrieving the field values of the message with the command <span class='code'>iso8583.getfield</span>.
        paragraph_4: <strong>ATTENTION!</strong>
        paragraph_5: The field extraction must be done in ascending order.
        parameters:
          parameter_1: <strong>fieldnumber</strong> <span class='data-type'>[integer]</span><br/> Number of the field to be extracted.
          parameter_2: <strong>type</strong> <span class='data-type'>[string]</span><br/> Field type to be extracted from the message, which can be <strong>string</strong> or <strong>integer</strong>.
          parameter_3: <strong>variablevalue</strong> <span class='data-type'>[string ou integer]</span><br/> Variable where the extracted value will be stored.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Variable that will store the return of the command, where: <br/><span class=''data-type''>0: Field extracted successfully<br/>-801: Invalid parameter<br/>-802: Function error<br/>-803: Buffer overrun<br/>-805: No field<br/>-806: Msg error'
      iso8583_initfieldtable:
        description: Starts field table ISO8583 based on a specified file
        paragraph_1: The command <span class='code'>iso8583.initfieldtable</span> starts the ISO8583 field table according to the fields specified on the file defined on the parameter <strong>filename</strong>. This command must be executed before starting to use the ISO8583 messages.
        paragraph_2: ! 'In the above example, two functions were created:'
        paragraph_3: 1. <strong>downloadBitmap</strong> that downloads the file <span class='code'>bitmap.dat</span> which contains the bitmap. The file should be stored on the <a href='/walk-manager/assets'>files</a> repository on <a href='https://manager.cloudwalk.io' class='external' target='_blank'>CloudWalk Manager</a>.
        paragraph_4: 2. <strong>startEngineISO8583</strong> that starts the table through the command <span class='code'>iso8583.initfieldtable</span>.
        paragraph_5: If the download has been successfully completed, the value 1 is defined on the parameter bitmap on file <span class='code'>params.dat</span>, only to indicate that the file is available on the device; Otherwise an error message (based on the command return) will be shown and the application will be closed after pressing the Enter key.
        paragraph_6: After downloading and being sure that file bitmap.dat is present, the function <strong>startEngineISO8583</strong> containing the command <span class='code'>iso8583.initfieldtable</span> is executed, in order to start the table. If the returned value on the variable <strong>iReturn</strong> is <strong>0</strong>, the table was successfully started; Otherwise, the error <strong>-802</strong> will be shown, indicating a problem while starting the table.
        paragraph_7: After downloading and verifying the existence of the file bitmap.dat, the function <strong>startEngineISO8583</strong> will be executed. The function references the command <span class='code'>iso8583.initfieldtable</span> that initializes the table. If the value returned on the variable <strong>iReturn</strong> is <strong>0</strong>, the table was successfully initiated; other else the error <strong>-802</strong> will be displayed, indicating failure at starting up the bitmap table.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the file containing the size and format of all 128 fields defined by the ISO8583 standard.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      iso8583_initmessage:
        description: Initiates assembly of the ISO message
        paragraph_1: The command <span class='code'>iso8583.initmessager</span> is used to start mounting an ISO8583 message.
        paragraph_2: ! 'In the above example, the function <strong>initISO8583Message</strong> was created in order to perform the following steps:'
        paragraph_3: 1. Start mounting the ISO8583 message.
        paragraph_4: 2. Insert the value in the fields of each corresponding bit, according to the specification on the bitmap.
        paragraph_5: 3. Finish the ISO8583 message.
        paragraph_6: This procedure must be performed after validating the file <span class='code'>bitmap.dat</span> and after initializing the field table through the command <a href='iso8583.initfieldtable' class='command'>iso8583.initfieldtable</a>.
        paragraph_7: To better illustrate the process of building an ISO8583 message using the POSXML language, the bits BIT41 and BIT64 were included, and they are going to be added to the message through the command <a href='iso8583.putfield' class='command'>iso8583.putfield</a> after starting the ISO8583 message through the command <a href='iso8583.initmessage' class='command'>iso8583.initmessage</a>.
        paragraph_8: If no error occurs during the message inicialization or while adding fields, the message is finished through the command <a href='iso8583.endmessage' class='command'>iso8583.endmessage</a>.
        paragraph_9: If no error occurs while starting up the message or while inserting the fields, the message is finished using the command <a href='iso8583.endmessage' class='command'>iso8583.endmessage</a>
        parameters:
          parameter_1: <strong>format</strong> <span class='data-type'>[string]</span><br/>Format of the message to be mounted, which can be ASCII or BCD.
          parameter_2: ! '<strong>id</strong> <span class=''data-type''>[string]</span><br/>Message identifier (4 digits), for example: 0800, 0200, 0400.'
          parameter_3: <strong>variablemessage</strong> <span class='data-type'>[string]</span><br/>Variable that stores the message being mounted.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Result of the operation, where:<br/> <span class=''data-type''> 0: message successfully started<br/> -801: invalid parameter<br/> -803: buffer overrun </span>'
      iso8583_putfield:
        description: Inserts a field in the message, necessarily in ascending order
        paragraph_1: The command <span class='code'>iso8583.putfield</span> is used to insert a field in the message, in ascending order (mandatorily).
        paragraph_2: In the above example, the function <strong>initISO8583Message</strong> was created in order to start the message, insert the fields (the ones with value) and finish the message.
        paragraph_3: For demonstration purposes, only the bits <strong>BIT41</strong> and <strong>BIT64</strong> are being used; Both bits are going to be added to the ISO8583 message through the command <a href='iso8583.putfield' class='command'>iso8583.putfield</a>.
        paragraph_4: The value must be formatted and aligned according to the specification (<strong>bitmap.dat</strong>).
        paragraph_5: The value should be formatted and aligned according to the specification of the bitmap (<strong>bitmap.dat</strong>).
        parameters:
          parameter_1: <strong>fieldnumber</strong> <span class='data-type'>[integer]</span><br/>Field number of the message that the value should be inserted. It is possible to use from 2 to 128, according to the bitmap.
          parameter_2: <strong>type</strong> <span class='data-type'>[string]</span><br/>Inserted field type (<strong>string</strong> or <strong>integer</strong>).
          parameter_3: <strong>value</strong> <span class='data-type'>[string ou integer]</span><br/>Field content, formatted according to the specification.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Result of the operation, where:<br/> <span class=''data-type''> 0: field successfully inserted <br/> -801: invalid parameter <br/> -802: function error <br/> -803: buffer overrun <br/> -804: invalid field</span>'
      iso8583_transactmessage:
        description: Adds size, header and trailer and sends the ISO message to the authorizer
        paragraph_1: The command <span class='code'>iso8583.transactmessage</span> is used to add size, header, trailer and send the ISO message to the authorizer.
        paragraph_2: In the above example, the function <strong>transactIsoMessage</strong> was created to handle the host communication through the command <a href='preconnect' class='command'>preconnect</a>, and also to send the ISO message to the authorizer through the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>.
        paragraph_3: The ISO8583 message is stored on the variable <strong>sMsgIso8583</strong> and ready to be sent. The information regarding the header and trailer are going to be stored on the variables to be defined, according to the parameters defined on the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>, assuming that the host authorizer is expecting this behavior.
        paragraph_4: When successfully finishing the transaction, the ISO8583 message received from the host will be stored on the variable <strong>sReceiveMsgISO</strong>, with the information defined on the bitmap.
        paragraph_5: ! 'When successfully finishing the transaction, the ISO8583 message received from the host will be stored on the variable <strong>sReceiveMsgISO</strong>, with the data according to the bitmap specification. '
        parameters:
          parameter_1: ! '<strong>channel</strong> <span class=''data-type''>[string]</span><br/> Size that will be added. Available channels: <br/><span class=''data-type''> NONE: No size added <br/> NAC: 2 binary bytes (x01 x00 or 0000-0001 0000-0000) <br/> NCC: 2 bytes on the format BCD (x02 x56) <br/> RAW: 4 binary bytes (x00 x00 x01 x00 ou 0000-0000 0000-0000 0000-0001 0000-0000) <br/> ASCII: 4 ASCII bytes (x30 x32 x35 x36 or 0256)</span>'
          parameter_2: <strong>header</strong> <span class='data-type'>[string]</span><br/> Header used to route and ensure the message integrity, added on the beginning of the message.
          parameter_3: <strong>trailler</strong> <span class='data-type'>[string]</span><br/> Trailer used to route and ensure the message integrity, added on the end of the message.
          parameter_4: <strong>isomsg</strong> <span class='data-type'>[string]</span><br/> ISO8583 message including the ISO data (message fields).
          parameter_5: <strong>variableresponse</strong> <span class='data-type'>[string]</span><br/> ISO8583 message with the data sent by the host authorizer.
          parameter_6: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Variable that will store the return of the command, where:<br/> <span class=''data-type''> 0: Size of the response message <br/> -1: Channel unknown or not implemented <br/> -2: Failed to connect to the host or while attempting to dial <br/> -3: Failed to send send the message to the host authorizer <br/> -4: Failed to receive the size of the response message <br/> -5: Failed to receive the response message</span>'
      joinstring:
        description: Concatenates in a string the value of another 2 strings
        paragraph_1: The command <span class='code'>joinstring</span> is used to join two strings.
        paragraph_2: In the above example the command <a href='joinstring' class='command'>joinstring</a> will unite variables <strong>sTextOne</strong> and <strong>sTextTwo</strong>.
        parameters:
          parameter_1: <strong>firstvalue</strong> <span class='data-type'>[string]</span><br/>First string.
          parameter_2: <strong>secondvalue</strong> <span class='data-type'>[string]</span><br/>Second string.
          parameter_3: <strong>variabledestination</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      mathematicaloperation:
        description: Performs a mathematical operation between two values
        paragraph_1: The command <span class='code'>mathematicaloperation</span> is used to perform mathematical operations.
        paragraph_2: In the example above, with variables <strong>$(number_1)</strong> and <strong>$(number_2)</strong> has been performed 6 math operations.
        paragraph_3: ! '<ul><li>1st operation: 200 + 100 = <strong>300</strong></li><li>2nd operation: 200 - 100 = <strong>100</strong></li><li>3rd operation: 200 * 100 = <strong>2000</strong></li><li>4th operation: 200 / 100 = <strong>2</strong></li><li>5th operation: 200 % 100 = <strong>0</strong></li><li>6th operation: 200 ^ 100 = <strong>2147483647</strong></li></ul>'
        parameters:
          parameter_1: <strong>firstvalue</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will make part of the operation.
          parameter_2: <strong>operator</strong> <span class='data-type'>[string]</span></br>Mathematical Operators:<span class='code'>+</span> sum <span class='code'>-</span> subtraction, <span class='code'>*</span> multiplication, <span class='code'>/</span> division <span class='code'>%</span> rest of the division, <span class='code'>^</span> exponentiation.
          parameter_3: <strong>firstvalue</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will make part of the operation.
          parameter_4: <strong>variabledestination</strong> <span class='data-type'>[string ou integer]</span><br/>Variable where the operation value will be stored.
      menu:
        description: Displays a menu based on the device screen (number of lines)
        paragraph_1: The command <span class='code'>Menu</span> is used to generate a list of options.
        paragraph_2: In the example above has been created a menu with three options, where slash (<strong>/</strong>) is the separator and the variable <strong>$(option)</strong> will store the result of the command, which will be the number of key pressed, a value between <strong>0</strong> and <strong>9</strong>.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will be used in the comparison.
          parameter_2: <strong>options</strong> <span class='data-type'>[string]</span><br/>List containing descriptions of each menu item, separated by slash <strong>/</strong>.
      menuwithheader:
        description: Displays a header with a menu based on the device screen (number of lines)
        paragraph_1: The command <span class='code'>menuwithheader</span> is used to generate a list of options.
        paragraph_2: In the above example needs to be made the change in the <strong>config.dat</strong>, which contains some parameters, including <strong>iskeytimeout</strong>, set to the value <strong>1</strong>, that allows the command <strong>menuwithheader</strong> work.
        paragraph_3: If the file <strong>config.dat</strong> does not have its parameter <strong>iskeytimeout</strong> set to <strong>1</strong>, there will be no error returned but the command <strong>menuwithheader</strong> will not work as expected.
        paragraph_4: If the seconds of the property <strong>timeout</strong> finish without user interaction, the command returned <strong>-1</strong>.
        parameters:
          parameter_1: <strong>header</strong> <span class='data-type'>[string]</span><br/>Define the content of the menu header, separated by <strong>|</strong>. If the content is larger, then the screen space displays a plus sign (<strong>+</strong>) informing the continuity of the text.
          parameter_2: <strong>timeoutheader</strong> <span class='data-type'>[integer]</span><br/>Time in seconds for the description of the menu header to change.
          parameter_3: <strong>options</strong> <span class='data-type'>[string]</span><br/>Menu options separated by a bar <strong>\</strong>.
          parameter_4: <strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Value that determines the time in seconds to wait for user interaction.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will receive the return command.
      network_checkgprssignal:
        description: Checks the status of the connection, if the POS supports GPRS
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>
        paragraph_2: The command <span class='code'>network.checkgprssignal</span> is used to check the GPRS signal level, if the device provides this type of communication.
        paragraph_3: In the above example the command <a href='network.checkgprssignal' class='command'>network.checkgprssignal</a> will check the GPRS signal level, storing the operation result on the integer variable $(iReturn).
        parameters:
          parameter_1: <strong>variablestatus</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the GPRS signal level.
      network_hostdisconnect:
        description: Disconnects the device from the host, keeping it connected to the network
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>.
        paragraph_2: The command <span class='code'>network.hostdisconnect</span> is used to disconnect the host terminal but remains connected to the network.
        paragraph_3: In the above example the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the host. The command <a href='network.hostdisconnect' class='command'>network.hostdisconnect</a> will close this connection but the device will be maintained with the network connection.
        paragraph_4: <strong>ATTENTION!</strong>
        paragraph_5: If a dial-up <strong>(PPP e SDLC)</strong> connection was used to perform the transaction, it's necessary to use the command <a href='shutdownmodem' class='command'>shutdownmodem</a> to close the <strong>socket</strong>, preventing the device to keeping the line busy.
        paragraph_6: The command <span class='code'>network.hostdisconnect</span> also closes the socket that was opened with the  <a href='preconnect' class='command'>preconnect</a>, but only for connection types <strong>ETHERNET and GPRS </strong>.
      network_ping:
        description: Checks the status of the connection with the host
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>
        paragraph_2: The command <span class='code'> network.ping </span> is used to test connectivity with the host.
        paragraph_3: In the above example the command <a href='network.ping' class='command'>network.ping</a> will do a ping on the host, your return will be stored in the variable <strong>iReturn</strong> that should be transformed into <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Return of the function:<ul><li>0: Success</li><li>-1: Error while connecting to the server</li><li>-2: Error while sending ping</li></ul>'
          parameter_2: <strong>host</strong> <span class='data-type'>[string]</span> Hostname or IP address to perform the ping.
      network_receive:
        description: Receives from the host buffer previously connected
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>
        paragraph_2: The command <span class='code'>network.receive</span> is used to receive a message (hexadecimal) from the host.
        paragraph_3: In the above example the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the Walk Server, your return will be stored in the variable <strong>iConnect</strong>.
        paragraph_4: The command <a href='network.send' class='command'>network.send</a> will send a message, hexadecimal for the host and its return will be stored in the variable <strong>iReturn</strong>.
        paragraph_5: The command <a href='network.receive' class='command'>network.receive</a> will receive a message, hexadecimal from the host and the return will be stored in the variable <strong>variablebuffer</strong>, which should be transformed into <a href='stringvariable' class='command'>stringvariable</a> with the function <a href='string.fromhex' class='command'>string.fromhex</a>.
        parameters:
          parameter_1: <strong>maxsize</strong> <span class='data-type'>[integer]</span><br/>Maximum message size that can be received.
          parameter_2: <strong>variablereceivedbytes</strong> <span class='data-type'>[integer]</span><br/>Number of received bytes.
          parameter_3: <strong>variablebuffer</strong> <span class='data-type'>[string]</span><br/>Variable that will receive the message from the host.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Return of the function:<ul><li>1: Message successfully received</li><li>0: Could not receive the message</li></ul>'
      network_send:
        description: Sends a buffer to the host previously connected
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>
        paragraph_2: The command <span class='code'>network.send</span> is used to send a message (hexadecimal) to the host.
        paragraph_3: In the above example the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the Walk Server, your return will be stored in the variable <strong>iConnect</strong>.
        paragraph_4: The command <a href='network.send' class='command'>network.send</a> will send a message, hexadecimal to the host and its return will be stored in the variable <strong>iReturn</strong>.
        paragraph_5: To transform the text of the variable <strong>sBufSend</strong> into hexadecimal, the command will be used <a href='string.tohex' class='command'>string.tohex</a> and size will be calculated by the command <a href='string.length' class='command'>string.length</a>.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Message, hexadecimal, which will be sent to the host.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Size of the message in bytes.
          parameter_3: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Return of the function:<ul><li>1: Message successfully sent</li><li>0: Unable to send the message</li></ul>'
      openserialport:
        description: Opens the serial port for communication with external peripherals
        paragraph_1: The command <span class='code'>openserialport</span> is used to open a connection to the serial port.
        paragraph_2: In the above example the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>, return will be stored in the variable <strong>iReturn</strong>, converted using the command <a href='inttostring' class='command'>inttostring</a> and displayed on the <a href='display' class='command'>display</a>.
        paragraph_3: The command <a href='closeserialport' class='command'>closeserialport</a> closes the serial port.
        parameters:
          parameter_1: <strong>port</strong> <span class='data-type'>[string]</span><br/>Port where the connection is open.<ul><li>COM1, COM2, COM3, COM4, COM5, COM6</li></ul>
          parameter_2: <strong>rate</strong> <span class='data-type'>[integer]</span><br/>The serial port rate.<ul><li>300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 12000, 14400, 28800, 33600</li></ul>
          parameter_3: <strong>configuration</strong> <span class='data-type'>[string]</span><br/>The serial port configuration.<ul><li>A7E1, A7N1, A7O1, A8E1, A8N1, A8O1</li></ul>
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command. <ul><li>-2: Incorrect configuration</li><li>-1 or 0: Error opening serial port</li><li>0: Serial port successfully open</li></ul>'
      paperfeed:
        description: Sends a signal to the printer by adding blank lines on the ticket
        paragraph_1: The command <span class='code'>paperfeed</span> is used to send a signal that the printer will add a blank line.
        paragraph_2: In the above example, when the application is executed, the printer will add a blank line on paper.
      parameters: Parameters
      pinpad_close:
        description: Terminates communication with the external or internal pinpad
        paragraph_1: The command <span class='code'>pinpad.close</span> is used to terminate the communication with the external or internal pinpad.
        paragraph_2: In the above example, firstly a connection is opened to the <strong>external PIN-Pad</strong>, then waits for a key to be pressed with the command <a href='waitkey' class='command'>waitkey</a>, and then the communication with the PIN-Pad is terminated with the command <span class='code'>pinpad.close</span>.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the PIN-Pad's display after closing the communication.
      pinpad_display:
        description: Displays a custom message on the display of the pinpad
        paragraph_1: The command <span class='code'>pinpad.display</span> is used to display a custom message on the display of the pinpad.
        paragraph_2: In the above example, firstly a connection is opened to the <strong>external PIN-Pad</strong> with the command <a href='pinpad.open' class='command'>pinpad.open</a>, and then the command <span class='code'>pinpad.display</span> is executed, displaying the message <strong><em>Hello World!</em></span>.
        paragraph_3: It is then expected that some <strong>POS terminal</strong> key is pressed, and after that the disconnection with the pinpad is done with the command <a href='pinpad.close' class='command'>pinpad.close</a>.
        paragraph_4: <strong>ATTENTION!</strong>
        paragraph_5: This command does not apply if the PIN-Pad used is an <strong>internal PIN-Pad</strong>
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the external PIN-Pad's display.
      pinpad_getkey:
        description: Captures a key that is pressed on the external pinpad
        paragraph_1: The command <span class='code'>pinpad.getkey</span> is used to capture a key that is pressed on the external pinpad.
        paragraph_2: In the above example, firstly a connection is opened to the <strong>external PIN-Pad</strong> with the command <a href='pinpad.open' class='command'>pinpad.open</a>; after that the command <span class='code'>pinpad.getkey</span> is executed.
        paragraph_3: It is awaited 10 minutes, if no action is taken, it is returned <strong>-1</strong> to the variable <strong><em>sKey</em></strong>, if an action is taken, the pressed key is returned.
        paragraph_4: After that, the PIN-Pad is disconnected with the command <a href='pinpad.close' class='command'>pinpad.close</a> and the result is displayed through the command <a href='display' class='command'>display</a>.
        paragraph_5: <strong>ATTENTION!</strong>
        paragraph_6: This command does not apply if the PIN-Pad used is an <strong>internal PIN-Pad</strong>
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the external PIN-Pad.
          parameter_2: <strong>timeout</strong> <span class='data-type'>[integer]</span> Timeout in seconds that the statement should wait before resuming the execution.
          parameter_3: ! '<strong>variablereturn</strong> <span class=''data-type''>[string]</span> Return of the command, where: <br/><ul><li>-1: Timeout was reached and no action was taken</li></ul> If an action is taken, the PIN-Pad key that was pressed is returned: <strong>KEY_ENTER, KEY_CANCEL, KEY_CLEAR, KEY_EXTRAS</strong>.'
      pinpad_getpindukpt:
        description: Catches a PIN and encrypts it using DUKPT standard
        paragraph_1: The command <span class='code'>pinpad.getpindukpt</span> is used to capture a PIN and encrypts using standard DUKPT.
        paragraph_2: The command <span class='code'>pinpad.getpindukpt</span> captures a PIN and encrypts it using the standard DUKPT in the internal or external PIN-Pad, while displaying a message on the PIN-Pad or device display.
        paragraph_3: In the above example, firstly a connection is opened with the <strong>internal PIN-Pad</strong> with the command <a href='pinpad.open' class='command'>pinpad.open</a>, end then the command <span class='code'>pinpad.getpindukpt</span> is executed.
        paragraph_4: The user is requested to type the <strong>PIN (password);</strong> the PIN is then encrypted and stored on the variable <strong><em>sEncriptedPIN</em></strong>, and the KSN is stored on the variable <strong><em>sKSN</em></strong>. Since the return is integer, the return is converted to <a href='stringvariable' class='command'>stringvariable</a> with the command <a href='inttostring' class='command'>inttostring</a>
        paragraph_5: The PIN-Pad is disconnected by the command <a href='pinpad.close' class='command'>pinpad.close</a> and then the content of the variables is displayed through the command <a href='display' class='command'>display</a>
        parameters:
          parameter_1: <strong>maxlen</strong> <span class='data-type'>[integer]</span> Maximum number of characters typed in the PIN.
          parameter_2: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the external PIN-Pad's display (or internal in the case of a POS terminal).
          parameter_3: <strong>pan</strong> <span class='data-type'>[string]</span> Card primary account number.
          parameter_4: ! '<strong>type</strong> <span class=''data-type''>[integer]</span> Type of algorithm used in the encryption, which can be: <br/><ul><li>0: DES</li><li>1: 3DES</li></ul>'
          parameter_5: <strong>variablereturnksn</strong> <span class='data-type'>[string]</span> Variable that will store the <strong>KSN</strong> returned by the encryption process.
          parameter_6: <strong>variablereturnpin</strong> <span class='data-type'>[string]</span> Variable that will store the encrypted <strong>PIN</strong>.
          parameter_7: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span> Variable that will store the return of the command, where: <br/><ul><li>0: OK</li><li>-1: COMM Error</li><li>-2: Canceled</li>-3: PIN Error</li></ul>'
      pinpad_loadipek:
        description: Records an initial key and an initial ksn on the memory of pinpad
        paragraph_1: Knowledge about <strong>DUKPT</strong> is required to use this command.
        paragraph_2: The command <span class='code'>pinpad.loadipek</span> is used to store an initial and a ksn key on the internal or extenal PIN-Pad memory, in order to make is possible to perform password encryption using <strong><em>DUKPT</em></strong>.
        paragraph_3: In the above example, firstly a connection to the <strong>internal PIN-Pad</strong> is made with the command <a href='pinpad.open' class='command'>pinpad.open</a>; after that the keys ipek (initial) <strong><em>EA51888F7CF2EBA6BB80EF0D4267642E</em></strong> and ksn <strong><em>FFFF0123456789A00003</em></strong> are loaded to the PIN-Pad memory with the command <span class='code'>pinpad.loadipek</span>.
        paragraph_4: Then the connection with the PIN-Pad is closed with the command <a href='pinpad.close' class='command'>pinpad.close</a>, and then the variable is converted to para <a href='stringvariable' class='command'>stringvariable</a> so it can be displayed through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>ipek</strong> <span class='data-type'>[string]</span> Initial key on the format <strong>hex ascii 16</strong> or <strong>32</strong> characters.
          parameter_2: <strong>ksn</strong> <span class='data-type'>[string]</span> initial KSN on the format <strong>hex ascii 20</strong> characters.
          parameter_3: ! '<strong>type</strong> <span class=''data-type''>[integer]</span> Type of algorithm used in the encryption, which can be: <br/><ul><li>0: DES</li><li>1: 3DES</li></ul>'
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[inteiro]</span> Return of the command, where: <br/><ul><li>0: OK</li><li>-1: Error</li></ul>'
      pinpad_open:
        description: Enables communication with the external or internal pinpad
        paragraph_1: The command <span class='code'>pinpad.open</span> is used to enable communication with external or internal pinpad.
        paragraph_2: In the above example, firstly a connection with the <strong>external PIN-Pad</strong> was opened, and then the command returned the result of the operation on the variable <em><strong>variablereturn</strong></em>.
        paragraph_3: Then the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable to <a href='stringvariable' class='command'>stringvariable</a>, which is displayed through the command <a href='display' class='command'>display</a>, and finally the connection with the PIN-Pad is closed through the command <a href='pinpad.close' class='command'>pinpad.close</a>.
        paragraph_4: The same is applied for the <strong>external PIN-Pad</strong>, but in this case, the PIN-Pad serial number is stored on the variable <span class='code'>sSerialNumber</span>.
        parameters:
          parameter_1: ! '<strong>type</strong> <span class=''data-type''>[integer]</span> PIN-Pad type to be enabled: <br/><ul><li>0: Internal PIN-Pad</li><li>1: External PIN-Pad</li></ul>'
          parameter_2: <strong>variableserialnumber</strong> <span class='data-type'>[string]</span> Variable that will store the PIN-Pad's serial number that is being enabled.
          parameter_3: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span> Command return, where: <br/><ul><li>0: PIN-Pad connected</li><li>-1: PIN-Pad not connected</li></ul>'
      preconnect:
        description: Connects to the host authorizer
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>
        paragraph_2: The command <span class='code'>preconnect</span> is used to establish a connection with CloudWalk.
        paragraph_3: In the above example the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the Walk Server, and the return will be stored in the variable <strong>iConnect</strong>.
        paragraph_4: Since the variable <strong>iConnect</strong> is of the type <a href='integervariable' class='command'>integervariable</a>, it must be transformed into <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>variablestatus</strong> <span class=''data-type''>[integer]</span><br/>Return function:<ul><li>0: Connected successfully</li><li>-1: Error when trying to connect</li></ul> '
      predial:
        description: Performs a dial-up connection with the provider
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Integration with host - Simple HTTP</a>
        paragraph_2: The command <span class='code'>predial</span> is used to perform a dial-up connection with the provider.
        paragraph_3: In the above example the first command <a href='predial' class='command'>predial</a> with <strong>option</strong> 1, will make a connection with the provider, and the return will be stored in the variable <strong>iReturn</strong>.
        paragraph_4: The second command <a href='predial' class='command'>predial</a> with <strong>option</strong> 2, will check if the dialing process was completed.
        parameters:
          parameter_1: ! '<strong>option</strong> <span class=''data-type''>[integer]</span><br/><ul><li>1: The command will perform a dialing</li><li>2: The command will check if the dialing was completed.</li></ul>'
          parameter_2: <strong>variablestatus</strong> <span class='data-type'>[integer]</span><br/>Variable that will store return of the function.
      print:
        description: Prints a custom message in the default font size
        paragraph_1: The command <span class='code'>print</span> is used to print any message with a standard size.
        paragraph_2: In the above example, when the application runs, it will print the message <strong>Using PRINT</strong> with standard size.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span><br/>Message that will be printed.
      printbarcode:
        description: Prints a bar code in the I25 format, horizontal or vertical
        paragraph_1: The command <span class='code'>printbarcode</span> is used to print barcode.
        paragraph_2: In the above example, will print a barcode number <strong>123456</strong> in the <strong>horizontal</strong> position.
        parameters:
          parameter_1: <strong>horizontal</strong> <span class='data-type'>[integer]</span><br/>Define if the barcode will be horizontal (1) or vertical (0).
          parameter_2: <strong>number</strong> <span class='data-type'>[integer]</span><br/>Barcode number.
      printbig:
        description: Prints a custom message in the double font size
        paragraph_1: The command <span class='code'>printbig</span> is used to print any message with a doubled font size.
        paragraph_2: In the above example, when the application runs, it will print the message <strong>Using PRINTBIG</strong> with doubled font size.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span><br/>Message to be printed.
      printbitmap:
        description: Prints a monochromatic bitmap
        paragraph_1: The command <span class='code'>printbitmap</span> is used to print a monochrome bitmap.
        paragraph_2: In the above example, when the application runs, will print the image set in the property <strong>filename</strong> of the command <strong>printbitmap</strong>
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will receive the return of the command <ul><li>-2: bitmap is monochrome </li><li>-1: invalid bitmap size</li><li>0: bitmap not found </li><li>1: bitmap successfully printed</li></ul>'
      readfile:
        description: Reads a dbfile WALK file (key/value)
        paragraph_1: The command <span class='code'>readfilebyindex</span> is used to read a file in the format <a href='#walk_db' class='command'>Walk</a> at a specified position. Each key should be on a separate line.
        paragraph_2: In the above example has been downloaded the file <strong>test.txt</strong> with the function <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The command <a href='readfile' class='command'>readfile</a> reads the file looking for the specified key (<strong>key</strong>) and stores your return of the variable specified in the parameter <strong>variabledestination</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: <strong>key</strong> <span class='data-type'>[string]</span><br/>Key Name.
          parameter_3: <strong>variabledestination</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      readfilebyindex:
        description: Reads a key from a file WALK dbfile
        paragraph_1: The command <span class='code'>readfilebyindex</span> is used to read a file in the format <a href='#walk_db' class='command'>Walk DB</a> at a specified position. Each key should be on a separate line.
        paragraph_2: In the above example has been downloaded the file <strong>test.txt</strong> with the function <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The function <a href='readfilebyindex' class='command'>readfilebyindex</a> reads the file looking for the position (<strong>index</strong>) and stores the key specified in the variable <strong>sKeyName</strong> and the value in the variable <strong>sKeyValue</strong>. The variable <strong>iReturn</strong> stores the value specifying if the position (<strong>index</strong>) was found or not.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: <strong>index</strong> <span class='data-type'>[integer]</span><br/>Key position, the first position is 0 (zero).
          parameter_3: <strong>variablekey</strong> <span class='data-type'>[integer]</span><br/>Key name.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store <ul><li>0: Item not found</li><li>1: found item</li></ul>'
          parameter_5: <strong>variablevalue</strong> <span class='data-type'>[string]</span><br/>Index value.
      readkey:
        description: Same as command waitkey, but holds the pressed key
        paragraph_1: The command <span class='code'>readkey</span> is used to pause the execution of the application for a certain time.
        paragraph_2: In the above example the variable <strong>$(sPressedKey)</strong> will store the variable that is pressed. The command <strong>readkey</strong> requires property <strong>milisenconds</strong> to set the maximum time to wait for a key to be pressed.
        paragraph_3: If no key has been pressed at defined time (<strong>5 seconds</strong>), the application assumes that the key <strong>Cancel</strong> has been pressed.
        parameters:
          parameter_1: <strong>miliseconds</strong> <span class='data-type'>[integer]</span><br/>Pause time in milliseconds.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      readserialport:
        description: Reads a buffer from an external device captured by the serial port
        paragraph_1: The command <span class='code'>readserialport</span> is used to write a message, hexadecimal on the serial port.
        paragraph_2: In the above example the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>.
        paragraph_3: The command <a href='readserialport' class='command'>readserialport</a> will read the return of the serial port and store in the variable <strong>sBufferReturned</strong>.
        paragraph_4: The content of the variable will be converted to <a href='stringvariable' class='command'>stringvariable</a> and displayed on the <a href='display' class='command'>display</a>.
        paragraph_5: The command <a href='closeserialport' class='command'>closeserialport</a> closes the serial port.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Buffer, hexadecimal, which will be written on the serial port.
          parameter_2: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/>Handle of the open door.
          parameter_3: <strong>variablebuffer</strong> <span class='data-type'>[string]</span><br/> Variable that will store the buffer captured from the serial port.
          parameter_4: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/> Open serial port identifier.
          parameter_5: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Variable that will store the return of the command, where: <br/><span class=''data-type''>-1: Timeout was reached and nothing was captured from the serial port<br/>>0: Number of bytes that was read from the serial port. </span>'
      shutdownmodem:
        description: Turns off the modem and cancels the operations
        paragraph_1: The command <span class='code'>shutdownmodem</span> is used to disconnect the device from the host and the network.
        paragraph_2: In the above example the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the host. The command <a href='shutdownmodem' class='command'>shutdownmodem</a> will completely disconnect the device.
      smartcard_closereader:
        description: Terminates communication process of with the smart card
        paragraph_1: The command <span class='code'>smartcard.closereader</span> is used to terminate the process of communication with the smart card.
        paragraph_2: In the above example, The command <a href='smartcard.startreader' class='command'>smartcard.startreader</a> is used to start the reader and try to read a card; after that the command <a href='inttostring' class='command'>inttostring</a> is used to convert and display the variable through the command <a href='display' class='command'>display</a>.
        paragraph_3: Then, the command <span class='code'>smartcard.closereader</span> is used to close the reader communication, and the result of the operation is displayed.
        parameters:
          parameter_1: <strong>slot</strong> <span class='data-type'>[integer]</span><br/> slot number that was opened with the command <a href='smartcard.startreader' class='command'>smartcard.startreader</a>.
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> Return of the command, where:<br/><ul><li>-1: Invalid slot</li><li>1: Slot successfully closed</li></ul>'
      smartcard_insertedcard:
        description: Checks if the card is inserted in the smart card reader
        paragraph_1: The command <span class='code'>smartcard.insertcard</span> is used to check if a smart card is inserted in a given slot.
        paragraph_2: In the above example, the command <strong>smartcard.insertedcard</strong> checks whether or not the card is inserted in the defined slot. If there is no card in the slot, the return will be <strong>-2</strong>, and <strong>1</strong> otherwise.
        parameters:
          parameter_1: ! '<strong>slot</strong> <span class=''data-type''>[integer]</span><br/>Defines which slot is used by the command.<ul><li>1: principal</li><li>2: sam1</li><li>3: sam2</li><li>4: sam3</li><li>5: sam4</li></ul> '
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will store the return of the command.
      smartcard_startreader:
        description: Starts the smart card reader and try to start the card
        paragraph_1: The command <span class='code'>smartcard.startreader</span> is used to start the smart card reader and try to start the card.
        paragraph_2: In the above example, the command <span class='code'>smartcard.startreader</span> was used to start the reader and the smartcard, and the result of the operation was stored on the variable <strong>variablereturn</strong>.
        paragraph_3: The command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable to <a href='stringvariable' class='command'>stringvariable</a>, and then to be displayed through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: ! '<strong>slot</strong> <span class=''data-type''>[integer]</span><br/> slot that will be started:<br/><ul><li>main: 1</li><li>sam1: 2</li><li>sam2: 3</li><li>sam3: 4</li><li>sam4: 5</li></ul>'
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Return of the command, where:<br/><ul><li>-2: Error while starting the reader or while reading the card</li><li>-1: Invalid slot</li><li>Reader started abd command ATR successfully sent.</li></ul>'
      smartcard_transmitapdu:
        description: Sends an APDU command to the smart card
        paragraph_1: The command <span class='code'>smartcard.transmitAPDU</span> is used to send an APDU command to the smart card.
        paragraph_2: The parameters should receive only hexadecimal strings.
        paragraph_3: In the example above, firstly a loop with the command <a href='while' class='command'>while</a> is made waiting for the command <a href='smartcard.insertedcard' class='command'>smartcard.insertedcard</a> to identify a card insertion.
        paragraph_4: Once the card is inserted, the command <a href='smartcard.startreader' class='command'>smartcard.startreader</a> initializes the reader and the card by sending an ATR command; then the command <span class='code'>smartcard.transmitAPDU</span> is executed. In the end the result is displayed through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>datafield</strong> <span class='data-type'>[string]</span><br/>Hexadecimal datafield of an APDU command containing additional information. Optional field, but if not used, shall receive the value <strong>00</strong>
          parameter_2: <strong>header</strong> <span class='data-type'>[string]</span><br/>APDU hexadecimal header, composed by CLA + INS + P1 + P2. Required field.
          parameter_3: <strong>LC</strong> <span class='data-type'>[string]</span><br/>Datafield parameter size in hexadecimal. Optional field, but if not used, shall receive the value <strong>00</strong>.
          parameter_4: <strong>LE</strong> <span class='data-type'>[string]</span><br/>Expected size of the response in hexadecimal. Optional field, but if not used, shall receive the value <strong>00</strong>. If the response size is greater than the 2 obligatory bytes SW1 and SW2, it is necessary to specify the size of the response in this field.
          parameter_5: <strong>slot</strong> <span class='data-type'>[string]</span><br/>slot that was opened with <span class='code'>smartcard.startreader</span>
          parameter_6: <strong>variabledatafieldresponse</strong> <span class='data-type'>[string]</span><br/>Variable that will store the hexadecimal return of the APDU command.
          parameter_7: <strong>variableSW</strong> <span class='data-type'>[string]</span><br/>Variable that will store the obligatory 2 hexadecimal bytes from the APDU command.
          parameter_8: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Return of the command, where:<br/><ul><li>-2: Error while sending the command to the card</li><li>-1: Invalid slot</li><li>1: Command successfully sent</li></ul>'
      string_charat:
        description: Extracts specified string character
        paragraph_1: The command <span class='code'>string.charat</span> is used to return a character string from a specific position.
        paragraph_2: In the above example the command <a href='string.charat' class='command'>string.charat</a> will get the 1st and 4th characters of the variable <strong>sText</strong> and store in variables <strong>sReturnC</strong> and <strong>sReturnW</strong>.
        parameters:
          parameter_1: <strong>character_index</strong> <span class='data-type'>[integer]</span><br/>Character position.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Variable that will be manipulated.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_elementat:
        description: Returns a specific element in the string
        paragraph_1: The command <span class='code'>string.elementat</span> is used to separate a string into parts using a delimiter.
        paragraph_2: In the above example the text of the variable <strong>sText</strong> has been separated using the command <a href='string.elementat' class='command'>string.elementat</a>.
        paragraph_3: The numbers (<a href='stringvariable' class='command'>stringvariable</a>) have been converted to <a href='integervariable' class='command'>integervariable</a> and you can use the command <a href='display' class='command'>display</a> to set the row and column.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>Content delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Party's position, with 0 being the first.
          parameter_3: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be separated.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      string_elements:
        description: Returns how many elements there are in the specified string
        paragraph_1: The command <span class='code'>string.elements</span> is used to return the number of elements found in a string according to a delimiter.
        paragraph_2: In the above example the command <a href='string.elements' class='command'>string.elements</a> will separate the contets of the variable <strong>sText</strong> based on delimiter <strong>;</strong> .
        paragraph_3: The variable <strong>iElements</strong> will be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>Content delimiter.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be separated.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      string_find:
        description: Searches for a substring in the specified string
        paragraph_1: The command <span class='code'>string.find</span> is used to return the position of a substring in a string.
        paragraph_2: In the above example the command <a href='string.find' class='command'>string.find</a> will search for text <strong>Walk</strong> in the variable <strong>sText</strong>, starting the search at position 0. The return is saved in the variable <strong>iElement</strong>.
        paragraph_3: The variable <strong>iElement</strong> will be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>start</strong> <span class='data-type'>[string]</span><br/>Set start of the search.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Where the text search will be made.
          parameter_3: <strong>substring</strong> <span class='data-type'>[string]</span><br/>Text to be found.
          parameter_4: ! '<strong>variablereturn</strong> <span class=''data-type''>[string]</span><br/>Variable that will store the result of the command <ul><li>-1: Text not found</li><li>>-1: position of the found text</li></ul>'
      string_fromhex:
        description: Converts a hexadecimal representation to a string
        paragraph_1: The command <span class='code'>string.fromhex</span> is used to convert a hexadecimal string to ASCII.
        paragraph_2: In the above example the hex value <strong>436C6F756457616C6B</strong> will be converted to ASCII.
        parameters:
          parameter_1: <strong>string</strong> <span class='data-type'>[string]</span><br/>Hexadecimal value to be converted.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_getvaluebykey:
        description: Searches in the string for a value based on key/value
        paragraph_1: The command <span class='code'>string.getvaluebykey</span> is used to return a value from a key in string.
        paragraph_2: In the above example the command <a href='string.getvaluebykey' class='command'>string.getvaluebykey</a> will search on the string for the value of the key <strong>company</strong>.
        parameters:
          parameter_1: <strong>key</strong> <span class='data-type'>[string]</span><br/>Key to be found.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be searched.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_insertat:
        description: Inserts an element at specific index in string
        paragraph_1: The command <span class='code'>string.insertat</span> is used to separate a string based on a delimiter and insert a substring in a set position.
        paragraph_2: In the above example the command <a href='string.insertat' class='command'>string.insertat</a> will insert the text <strong>Walk</strong> in the second element generated by the separation of the string whose index is <strong>1</strong>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>Content delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Party's position, with 0 being the first.
          parameter_3: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be changed.
          parameter_4: <strong>string_to_be_inserted</strong> <span class='data-type'>[string]</span><br/>Text to be inserted.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      string_length:
        description: Returns length of the specified string
        paragraph_1: The command <span class='code'>string.length</span> is used to return the length of a string.
        paragraph_2: In the above example the command <a href='string.length' class='command'>string.length</a> will return the size of the text in the variable <strong>sText</strong>.
        paragraph_3: The return of the command <a href='string.length' class='command'>string.length</a> is a <a href='integervariable' class='command'>integervariable</a> and will be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed in <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>value</strong> <span class='data-type'>[string]</span><br/>Text that will be used by the command.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the converted value.
      string_pad:
        description: Adds a padding with specific character in string
        paragraph_1: The command <span class='code'>string.pad</span> is used to add content to the right or left of a string.
        paragraph_2: In the above example the first command <a href='string.pad' class='command'>string.pad</a> will add character <strong>0</strong> to the left side of the string <strong>1234</strong>, the command will accept a maximum <strong>10</strong> characters, so the result will be <strong>0000001234</strong>.
        paragraph_3: The second command <a href='string.pad' class='command'>string.pad</a> will add character <strong>0</strong> to the right side of the string <strong>1234</strong>, the command will accept a maximum <strong>10</strong> characters, so the result will be <strong>1234000000</strong>.
        parameters:
          parameter_1: <strong>character</strong> <span class='data-type'>[string]</span><br/>Text to be inserted.
          parameter_2: <strong>length</strong> <span class='data-type'>[string]</span><br/>Maximum size of the changed text.
          parameter_3: <strong>align</strong> <span class='data-type'>[string]</span><br/>Alignment, left or right.
          parameter_4: <strong>origin</strong> <span class='data-type'>[string]</span><br/>Text that will be added to the character.
          parameter_5: <strong>destination</strong> <span class='data-type'>[integer]</span><br/>Variable that will receive the result of the command.
      string_removeat:
        description: Removes an element from specific index in string
        paragraph_1: The command <span class='code'>string.removeat</span> is used to separate a string into parts using a delimiter and remove one of them.
        paragraph_2: In the above example the command <a href='string.removeat' class='command'>string.removeat</a> will separate a contents of the variable <strong>sText</strong> according to the delimiter and will remove the separate part according to the index on the property <strong>element_index</strong>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>Content delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Party's position, with 0 being the first.
          parameter_3: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text that will be separated.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      string_replace:
        description: Replace all occurrences of the specified substring
        paragraph_1: The command <span class='code'>string.replace</span> is used to replace part of a string.
        paragraph_2: In the above example the command <a href='string.replace' class='command'>string.replace</a> will overwrite the contents <strong>WalkCloud</strong> of the variable <strong>sText</strong> for the content <strong>CloudWalk</strong>.
        parameters:
          parameter_1: <strong>new_substring</strong> <span class='data-type'>[string]</span><br/>New text.
          parameter_2: <strong>old_substring</strong> <span class='data-type'>[string]</span><br/>Text to be replaced.
          parameter_3: <strong>original_string</strong> <span class='data-type'>[string]</span><br/>Original text.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      string_replaceat:
        description: Replaces an element at a specific index in string
        paragraph_1: The command <span class='code'>string.replaceat</span> is used to replace a specific part of the string.
        paragraph_2: In the above example the command <a href='string.replaceat' class='command'>string.replaceat</a> will separate the string from the variable <strong>sText</strong> and replace the contents of the second part, defined by <strong>element_index</strong> 1, which is <strong>POSXML Application</strong> to <strong>POSXML</strong>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>Content delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Party's position, with 0 being the first.
          parameter_3: <strong>new_element</strong> <span class='data-type'>[integer]</span><br/>New text.
          parameter_4: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text that will be separated.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_substring:
        description: Capture a specific part of string
        paragraph_1: The command <span class='code'>string.substring</span> is used to return a specific part of a <a href='stringvariable' class='command'>stringvariable</a>.
        paragraph_2: In the above example the variable <strong>$(sCompleteText)</strong> will be used by the command <strong>string.substring</strong> that will get your content starting from the 10th character (0 is the first, including spaces) and will return 7 characters that will be passed to the variable <strong>$(sHalfText)</strong>.
        parameters:
          parameter_1: <strong>length</strong> <span class='data-type'>[integer]</span><br/>Set the size of the returned string.
          parameter_2: <strong>start</strong> <span class='data-type'>[integer]</span><br/>Defines which position of the string the will be used as a reference.
          parameter_3: <strong>string</strong> <span class='data-type'>[string or variável]</span><br/>A string or a variable with the value that will be changed by the command.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string or integer]</span><br/>Variable that will store the return of the command.
      string_tohex:
        description: Converts a string to its hexadecimal representation
        paragraph_1: The command <span class='code'>string.tohex</span> is used to convert an ASCII string to hexadecimal.
        paragraph_2: In the above example the text <strong>CloudWalk</strong> will be converted to hexadecimal.
        parameters:
          parameter_1: <strong>string</strong> <span class='data-type'>[string]</span><br/>Value to be converted.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_trim:
        description: Eliminates the blanks on the left and right of the string
        paragraph_1: The command <span class='code'>string.trim</span> is used to remove the blank spaces at the beginning and the end of the string.
        paragraph_2: In the above example the command <a href='string.trim' class='command'>string.trim</a> will remove the blank spaces at the beginning and the end of the content of the variable <strong>sText</strong>.
        paragraph_3: Two results will be displayed with the command <a href='display' class='command'>display</a>, showing text with and without the command string <a href='string.trim' class='command'>.trim</a>.
        parameters:
          parameter_1: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be changed.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      stringtoint:
        description: Conversion from string to integer
        paragraph_1: The command <span class='code'>stringtoint</span> is used to convert a string into integer.
        paragraph_2: In the above example text of the variable <strong>sText</strong> was separated using the command <a href='string.elementat' class='command'>string.elementat</a>.
        paragraph_3: The numbers (<a href='stringvariable' class='command'>stringvariable</a>) have been converted into <a href='integervariable' class='command'>integervariable</a> and you can use the command <a href='display' class='command'>display</a> to set the row and column.
        parameters:
          parameter_1: <strong>variableinteger</strong> <span class='data-type'>[integer]</span><br/>Integer value that will be converted into string.
          parameter_2: <strong>variablestring</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      stringvariable:
        description: Creates an instance of the variable of string type
        paragraph_1: The command <span class='code'>stringvariable</span> is used to declare a variable that stores only text. This type supports variable number of mathematical operations but they will not be treated as numeric values, for example, <strong>variavel123</strong>.
        paragraph_2: In the above example, has been created a variable of type <strong>stringvariable</strong> which has an initial value <strong>Initial value</strong>.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[string]</span></br>Variable Name.
          parameter_2: <strong>value</strong> <span class='data-type'>[integer or string]</span></br>Initial value of the variable.
      substring:
        description: Copies part of a variable string to another variable
        paragraph_1: The command <span class='code'>substring</span> is used to separate a string into substrings according to a delimiter.
        paragraph_2: In the above example the command <a href='substring' class='command'>substring</a> will separate the string from the variable <strong>sText</strong> according to the delimiter and store the substring defined by <strong>index</strong> 0, found in variable <strong>variabledestination</strong> in the variable <strong>sReturn</strong>.
        parameters:
          parameter_1: <strong>character</strong> <span class='data-type'>[string]</span><br/>Content delimiter.
          parameter_2: <strong>index</strong> <span class='data-type'>[integer]</span><br/>Party's position, with 0 being the first.
          parameter_3: <strong>variabledestination</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the substring.
          parameter_4: <strong>variablesource</strong> <span class='data-type'>[string]</span><br/>Text that will be separated.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command. If nothing is found will return <strong>-1</strong>.
      system_backlight:
        description: Define the device's backlight intensity level.
        paragraph_1: The command <span class='code'>system.backlight</span> defines the device's backlight intensity level.
        paragraph_2: This command is often used when the device has a battery (not plugged directly into electricity), because there is a considerable consumption of battery when the backlight is in 100%.
        paragraph_3: In the above example, the command <span class='code'>system.backlight</span> was used to modify the backlight intensity level to 50%.
        paragraph_4: Since the return of the command is an <a href='integervariable' class='commands'>integervariable</a>, the command <a href='inttostring' class='commands'>inttostring</a> was used to convert and display the variable throught the command <a href='display' class='commands'>display</a>.
        parameters:
          parameter_1: <strong>level</strong> <span class='data-type'>[integer]</span><br/>Backlight level percentage.
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Variable that will store the return of the command, where:<br/><ul><li>-1: Error when defining the new value</li><li>0: OK</li></ul>'
      system_beep:
        description: Produces a short beep
        paragraph_1: The command <span class='code'>system.beep</span> is used to beep.
        paragraph_2: In the above example, the command <strong>system.beep</strong> will cause the device to beep.
      system_checkbattery:
        description: Checks the device battery status
        paragraph_1: The command <span class='code'>system.checkbattery</span> is used to return the current percentage of battery.
        paragraph_2: In the above example, the command <strong>system.checkbattery</strong> will return to the variable <strong>$( battery_status)</strong> which is a variable <a href='integervariable' class='command'>integervariable</a>. As the property <strong>variablestatus</strong> only accepts an integer value, it is necessary to convert the value to <a href='stringvariable' class='command'>stringvariable</a> so that the value can be shown on the display .
        paragraph_3: The value <strong>-1</strong> means that the device has no battery.
        parameters:
          parameter_1: ! '<strong>variablestatus</strong> <span class=''data-type''>[integer]</span></br>Variable that will store the return of the command. The returned value ranges from 0 to 100, scaling 1 by 1. Examples: 0, 1, 2, 3, 4, 5 ... 95, 96, 97, 98, 99, 100.'
      system_gettouchscreen:
        description: Captures the coordinates (x and y) where the display was pressed
        paragraph_1: The command <span class='code'>system.gettouchscreen</span> is used to capture the coordinates (x and y) where the display was pressed.
      system_info:
        description: Gets device information (MAC Address, SIM ID, etc)
        paragraph_1: The command <span class='code'>system.info</span> is used to return information from the device.
        paragraph_2: In the above example, the command <strong>system.infor</strong> will return the macaddress of the device.
        parameters:
          parameter_1: <strong>type</strong> <span class='data-type'>[string]</span><br/>Information you want to return, simid or macaddress.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      system_inputtransaction:
        description: Instruction to receive the data card on a contactless transaction
        paragraph_1: The command <span class='code'>system.inputtransaction</span> is an instruction to receive the data card on a contactless transaction.
      system_readcard:
        description: Waits until a card is passed or a key is pressed
        paragraph_1: The command <span class='code'>system.readcard</span> is used to read cards.
        paragraph_2: In the above example, the 4 variables will store values that were generated by the command <strong>system.readcard</strong>. The application will wait for user interaction through a card or by pressing any key during the time set on the property <strong>timeout</strong>.
        parameters:
          parameter_1: <strong>cardvariable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the card number.
          parameter_2: <strong>keyvariable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the value of the key pressed.
          parameter_3: <strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Waiting time until the command cancels the operation.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      system_restart:
        description: Restarts the device
        paragraph_1: The command <span class='code'>system.restart</span> is used to restart the device.
        paragraph_2: In the above example when the application is started, the command <strong>system.restart</strong> will restart the device.
      time_calculate:
        description: Calculates time. Supports addition, subtraction and difference
        paragraph_1: The command <span class='code'>time.calculate</span> is used to calculate time. It supports addition, subtraction and difference.
        paragraph_2: ! 'In the above example, there are three operations: <strong><em>difference, sum and less</em></strong>.'
        paragraph_3: The first operation done is the <strong><em>difference</em></strong>, where the content of the variable <em><strong>sDate1</strong></em> is compared with the content of the variable <em><strong>sDate2</strong></em>, and the difference between them is returned in <strong><em>seconds</em></strong> and stored on <strong><em>variablereturn</em></strong>.
        paragraph_4: The second operation done is <strong><em>sum</em></strong>, where <strong><em>10 hours</em></strong> is added on the date stored on <strong><em>sDate1</em></strong>. If the operation is successfully executed, the variable <strong><em>variablereturn</em></strong> receive 0, and the date stored on <strong><em>sDate1</em></strong> will be increased by <strong><em>10 hours</em></strong>.
        paragraph_5: The third operation done is <strong><em>less</em></strong>, where <strong><em>10 minutes</em></strong> is subtracted from the date stored on <strong><em>sDate1</em></strong>. If the operation is successfully executed, the variable <strong><em>variablereturn</em></strong> receive 0, and the date stored on <strong><em>sDate1</em></strong> will be decreased by <strong><em>10 minutes</em></strong>.
        parameters:
          parameter_1: <strong>date</strong> <span class='data-type'>[string]</span><br/> Date that will be changed or that will be used in comparison by the operation <strong>difference</strong>.
          parameter_2: <strong>greaterdate</strong> <span class='data-type'>[string]</span><br/> Greater date that will be used by the difference operation. On addition and subtraction operations this variable is not used, but an empty value <strong>should not</strong> be used, or a POSXML Error might happen.
          parameter_3: ! '<strong>operation</strong> <span class=''data-type''>[string]</span><br/> Operation type, which can be: sum, less or difference.'
          parameter_4: ! '<strong>type</strong> <span class=''data-type''>[string]</span><br/> Unit of time to be calculated: years, months, days, hours, minutes or seconds.<br/>On a difference operation this variable is not used, but an empty value <strong>should not</strong> be used, or a POSXML Error might occur.'
          parameter_5: <strong>value</strong> <span class='data-type'>[integer]</span><br/> Value to be added or subtracted<strong> (only for operations plus and minus)</strong>.
          parameter_6: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/> If the operation is <strong>difference</strong>, the <strong>value</strong> of the difference is returned. Is case of an addition or subtraction operation the result is: <br/><em><strong>0:</strong></em> Success<br/><em><strong>-1:</strong></em> Error.'
      title: Command
      unzipfile:
        description: Unpacks a zip file
        paragraph_1: The command <span class='code'>unzipfile</span> is used to uncompress a file compressed in zip format.
        paragraph_2: In the above example, the command <span class='code'>unzipfile</span> was used to to decompress a file called <strong>teste.zip</strong>, that is stored on the device memory. After that the command <a href='inttostring' class='command'>inttostring</a> is used to convert and display the variable through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the zip file stored on the device.
          parameter_2: ! '<strong>variablereturn</strong> <span class=''data-type''>[integer]</span><br/>Return of the command, where:<br/><ul><li>0: File successfully uncompressed</li><li>-1: Error during decompression</li></ul>'
      wait:
        description: Pauses execution for a set time
        paragraph_1: The command <span class='code'>wait</span> is used to pause the execution of the application for a certain time.
        paragraph_2: In the example above the first <a href='display' class='command'>display</a> will appear and after <strong>2000 milliseconds (2 seconds)</strong> second <a href='display' class='command'>display</a> will be displayed.
        parameters:
          parameter_1: <strong>miliseconds</strong> <span class='data-type'>[integer]</span><br/>Pause time in milliseconds.
      waitkey:
        description: Pauses execution until a button is pressed
        paragraph_1: The command <span class='code'> waitkey </span> is used to wait for pressing any key on the device.
        paragraph_2: In the above example the command <strong>waitkey</strong> stops running the code so only the first <a href='display' class='command'>display</a> is displayed.
        paragraph_3: Pressing any key on the POS, command <strong>waitkey</strong> will continue the application process, displaying another message.
        paragraph_4: The last <strong>waitkey</strong> is used so that the application is not closed immediately after execution.
      waitkeytimeout:
        description: Same as command waitkey but has a timeout
        paragraph_1: The command <span class='code'>waitkeytimeout</span> is used to wait for pressing any key on the device but with a time limit.
        paragraph_2: In the above example the command <strong>waitkeytimeout</strong> will wait 10 seconds if no key is pressed.
        parameters:
          parameter_1: <strong>seconds</strong> <span class='data-type'>[integer]</span><br/>Pause time in seconds.
      while:
        description: Instruction that allows the execution of a code multiple times
        operators:
          operator_1: <strong>greaterthan:</strong> greater than <span class='code'>&gt;</span>
          operator_2: <strong>lessthan:</strong> less than <span class='code'>&lt;</span>
          operator_3: <strong>greaterthanorequalto:</strong> greater then or equal to <span class='code'>&gt;=</span>
          operator_4: <strong>lessthanorequalto:</strong> less than or equal to <span class='code'>&lt;=</span>
          operator_5: <strong>equalto:</strong> equal to <span class='code'>=</span>
          operator_6: <strong>notequalto:</strong> not equal to <span class='code'>!</span>
        operators_integer:
          paragraph_1: <strong>Operators with variables of type integer</strong>
          paragraph_2: For variables of type integer, all operations are performed following the standard of any other programming language.
        operators_list: <strong>List of operators</strong>
        operators_string:
          paragraph_1: <strong>Operators with variables of type string</strong>
          paragraph_2: Operators <span class='code'>greaterthan</span>, <span class='code'>lessthan</span>, <span class='code'>greaterthanorequalto</span> <span class = 'code'>lessthanorequalto</span>, in the case of variables of type string, convert the variable that it is compared to floating point, and then performs the comparison.
        other_operators: Operators <span class='code'>equalto</span> and <span class='code'>notequalto</span> follow the same logic of comparison that any programming language.
        paragraph_1: The command <span class='code'>while</span> is used to repeat block of code until condition is met.
        paragraph_2: ! 'In the example above, there are three conditions: <ul><li>1st - compare two texts causing it to be <em>true</em> as <em>Blue</em> is equal to the value of the variable <em>sColor</em> </li><li>2nd - compare two numbers causing it to be <em>false</em> as <em>111</em> is not greater than the value of the variable <em>iNumber</em></li><li>3rd - compare two texts is causing it <em>false</em> as <em>Blue</em> is different from the value of the variable <em>sColor</em>. POSXML considers uppercase and lowercase letters (<em>case-sensitive</em>) </li></ul> The command <a href=''waitkey'' class=''command''>waitkey</a> awaits click any key to continue code execution.'
        paragraph_3: The code inside the block <strong>while</strong> will run <em>6</em> times (the variable number has the initial value = 0) showing on the <a href='display' class='command'>display</a> text 'Message'.
        paragraph_4: The command <a href='integeroperator' class='command'>integeroperator</a> is used to increase, one by one, the value of the variable <em>$(iNumber)</em> on each execution of the <strong>while</strong> block until the condition is met, leaving the block.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will be used in the comparison.
          parameter_2: ! '<strong>operator</strong> <span class=''data-type''>[string]</span><br/>Comparison operator: <span class=''code''>lessthan</span>, <span class=''code''>greaterthan</span>, <span class=''code''>equalto</span>, <span class=''code''>notequalto</span>, <span class=''code''>greaterthanorequalto</span> or <span class=''code''>lessthanorequalto</span>.'
          parameter_3: <strong>value</strong> <span class='data-type'>[string or integer]</span><br/>Value that will be used in the comparison.
      writeserialport:
        description: Writes a buffer on the serial port
        paragraph_1: The command <span class='code'>writeserialport</span> is used to write a hexadecimal message on the serial port.
        paragraph_2: In the above example the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>.
        paragraph_3: The command <a href='writeserialport' class='command'>writeserialport</a> send a buffer (message) to the door.
        paragraph_4: The command <a href='closeserialport' class='command'>closeserialport</a> closes the serial port.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Buffer, hexadecimal, which will be written on the serial port.
          parameter_2: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/>Handle of the open door.
    commands_list:
      commands:
        groups:
          card_reading: Card reading
          complete_list: All
          connectivity: Connectivity
          cryptography: cryptography
          data_entry: Data entry
          date_time: Date time
          emv: EMV
          file_manipulation: File manipulation
          flow_control: Flow control
          iso_8583: ISO 8583
          pinpad: Pinpad
          print: Print
          serial_port: Serial port
          smartcard: Smartcard
          string: String
          user_interface: User interface
          utils: Utils
          variables_conversions: Variables and conversions
        paragraph_1: For organizational purposes, the POSXML commands are grouped by similarity. In case of doubt, there is also the possibility to view all commands by category 'All commands'.
      description: List of available commands on the CloudWalk IDE.
      presentation:
        paragraph_1: List of available commands on the CloudWalk IDE.
        paragraph_2: ! 'If you run any application containing a command not supported by the version of WALK Framework installed on the device, an error occurs <span class=''code''>WALK: Byte Mode Error</span>, stating that the Byte Code command does not exist in the version of WALK Framework installed.'
      table_of_contents:
        commands: Commands List
        commands_list: Commands List
        presentation: Presentation
      title: POSXML Commands List
    configuration:
      description: The WALK Framework has several variables of configuration, allowing to configure any parameter of the terminal through POSXML language. List of parameters.
      parameters_list:
        accepts_track_1_and_2: Accept track 1 and 2
        accepts_track_2: Accept track 2
        config_dat_model: Model in config.dat
        manual_typing_not_allowed: Does not allow manual entry
        manual_typing_or_swap: Manual typing or pass
        option: Option
        paragraph_1: ! 'Below variables of configuration config.dat file:'
        parameter_1: <strong>autooffmodem</strong><br/> off the modem automatically after a connection
        parameter_10: <strong>keystar</strong><br/> Key that will be used to put the <strong>*</strong> (asterisk). Optional keys vary from device to device can go up from KEY_EXTRA1 to KEY_EXTRA99
        parameter_11: ! '<strong>model</strong><br/> Model of the device, as shown below:'
        parameter_12: <strong>mygateway</strong><br/> Gateway which will be used by the device. You need to set the Gateway to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> or <strong>DHCP</strong> is used
        parameter_13: <strong>myip</strong><br/> Device IP address. You must set the IP to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> or <strong>DHCP</strong> is used
        parameter_14: <strong>nomeaplicativo</strong><br/> Name of the application that will be pursued in WALK Manager
        parameter_15: <strong>numerodestepos</strong><br/> Device Logical number
        parameter_16: <strong>primeiravez</strong><br/> Indicates whether this is the first time the device is running an application POSXML
        parameter_17: <strong>qtdetentativasenvio</strong><br/> Number of packages to be sent until there is confirmation by authorizer
        parameter_18: <strong>retentativas</strong><br/> Number of retries to connect to CloudWalk service
        parameter_19: <strong>sn_terminal</strong><br/> Device Serial number
        parameter_2: <strong>crcpaginawalkserver</strong><br/> the application CRC on the WALK Manager
        parameter_20: <strong>subnet</strong><br/> Netmask. It is necessary to set the mask to <strong>255.255.255.255</strong> if the communication protocol <strong>PPP</strong> is used, if used <strong>DHCP</strong> is necessary to set the mask to <strong>0.0.0.0</strong>
        parameter_21: <strong>timeoutinput</strong><br/> Timeout for all statements that use it
        parameter_22: ! '<strong>tiposcartao</strong><br/> Defines the rules for use of cards, according to the table below:'
        parameter_23: ! '<strong>touchscreen</strong><br/>Enables or disables the virtual keyboard, if the device has touchscreen where: <pre>0 - Does not activate the virtual keyboard

          1 - Enables virtual keyboard</pre>'
        parameter_24: <strong>uclapn</strong><br/> APN of GPRS network
        parameter_25: ! '<strong>uclmedia</strong><br/> Connection type to be used, and can be: <pre>LANDLINE

          ETHERNET

          GPRS

          WIFI</pre>'
        parameter_26: <strong>uclpassword</strong><br/> User password of RAS or APN (PPP)
        parameter_27: <strong>uclphoneno</strong><br/>The number that the device is going to call;
        parameter_28: ! '<strong>uclprotocol</strong><br/>Communication protocol to be used, and can be: <pre>TCP

          SDLC</pre>'
        parameter_29: <strong>uclusername</strong><br/>Name of the user of RAS or APN (PPP);
        parameter_3: <strong>dnsprimario</strong><br/> primary DNS that will be used by the device. You must set the DNS to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> is used
        parameter_30: 0
        parameter_31: <strong>uclwifikey</strong><br/>Password for the WIFI network we want to connect (hexadecimal)
        parameter_32: <strong>uclwifinetwork</strong><br/>Name of the WIFI network we want to connect
        parameter_33: <strong>uclwifisecurity</strong><br/>Type of encryption (WEP)
        parameter_34: <strong>versaoframework</strong><br/>WALK Framework version installed on the device
        parameter_4: <strong>dnssecundario</strong><br/> secondary DNS will be used by the device. You must set the DNS to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> is used
        parameter_5: <strong>gprs_pin</strong><br/> PIN of GPRS card
        parameter_6: ! '<strong>iskeytimeout</strong><br/> Used to identify what <a href=''/posxml/commands/readkey '' class=''command''>readkey </a> will return in case of timeout, where: <pre>0 - Disabled, readkey returns KEY_CANCEL on timeout.

          1 - Enabled readkey returns -1 on timeout.</pre>'
        parameter_7: <strong>keyalpha</strong><br/> Key that will be used to make <strong>alpha</strong> keyboard. Optional keys vary from device to device can go up from KEY_EXTRA1 to KEY_EXTRA99
        parameter_8: <strong>keypaperfeed</strong><br/> Key that will be used to make the <a href='/posxml/commands/paperfeed' class='command'>paperfeed</a>
        parameter_9: <strong>keypound</strong><br/> Key that will be used to put the <strong>#</strong> (sharp). Optional keys vary from device to device can go up from KEY_EXTRA1 to KEY_EXTRA99
        pos_model: Device model
        reading_type: Reading type
        tracks: Tracks
      presentation:
        paragraph_1: The WALK Framework has several variables of configuration, allowing the configuration of every device parameter through the POSXML language, like environment variables used by the application and equipment drivers such as modem and printer.
        paragraph_2: Any of these parameters can be set with the help of the command <a href='/posxml/commands/editfile' class='command'>editfile</a>, pointing config.dat file, and using the name of these parameters as a key. File config.dat is nothing more than a file in the file system CloudWalk.
        paragraph_3: You can configure any type of communication, retries, among other parameters and make logical reconnection backup through POSXML using the instructions <a href='/posxml/commands/editfile' class='command'>editfile</a> and <a href='/posxml/commands/preconnect' class='command'>preconnect</a>.
      table_of_contents:
        parameters_list: List of parameters
        presentation: Presentation
      title: POSXML - Configuration
    file_system:
      creating_and_editing_files:
        paragraph_1: The commands <a href='/posxml/commands/editfile' class='command'>editfile</a>, <a href='/posxml/commands/readfile' class='command'>readfile</a> and <a href='/posxml/commands/readfilebyindex' class='command'>readfilebyindex</a> can be used to work with this file type, based on keys and values, enabling a fast and efficient way to store static data on the device.
        paragraph_2: ! 'We recommend using the utility EditDBFile to manipulate your WALK dbfile files. Follow the following procedure:'
        paragraph_3: Download the utility from  <a href='https://dl.cloudwalk.io/edit_db_file.zip'>https://dl.cloudwalk.io/edit_db_file.zip</a>
        paragraph_4: Unzip and run the package <strong>EditDbFileWalk.exe</strong>
        paragraph_5: Enter the path to the dat file and press the button <strong>Load</strong>
        paragraph_6: Make the necessary changes and press the button <strong>Save</strong>
        paragraph_7: Register the <a href='/walk-manager/assets'>file in WALK Manager</a> and your devices can download it with command <a href='/posxml/commands/downloadfile' class='command'>downloadfile</a>
      description: The WALK Framework has a file system that can handle files of type WALK dbfile (text file in UNIX environments). Creating and editing files. Use the utility EditDBFile to manipulate WALK dbfile files.
      presentation:
        paragraph_1: ! 'The WALK Framework has a file system that can handle files of type WALK dbfile, where you can create and work with files in the following format:'
        paragraph_2: Basically, it would be the format of text files in UNIX environments, where <span class='code'>\n</span> represents a newline. The configuration file itself (config.dat) is a WALK dbfile file.
      table_of_contents:
        creating_and_editing_files: Creating and editing files
        presentation: Presentation
      title: POSXML - File System
    memory_and_variables:
      description: The POSXML has the concept of variable types, where they can be of type string or integer. Limitations and parameter passing.
      introduction: The WALK Framework is responsible for running compiled POSXML application, and being installed on the device, assumes all responsibility for memory management and devices. Thus, to run an application on the device, just write a file in POSXML, compile it and send it to the device.
      limitations:
        paragraph_1: There is a limit of 511 variables per POSXML application, and 256 of type string with maximum size of 1K (1023 characters, of which one is used automatically by the platform to allocate the <span class='code'>\0</span>), and 255 of type integer.
        paragraph_2: When you declare a variable with the commands <a href='/posxml/commands/integervariable' class='command'>integervariable</a> or <a href='/posxml/commands/stringvariable' class='command'>stringvariable</a>, it will be in memory of the application until the device is disconnected. For this reason, you must be careful to define on the beginning of the application all variables used and clean them for no errors occur during the execution of the application.
        paragraph_3: Currently there is a limit of 32K memory for loading compiled POSXML pages.
      parameters:
        paragraph_1: Every POSXML command owning a parameter whose name contains the word <span class='code'>variable</span>, for example, <span class='code'>variablereturn</span>, is required to pass a variable to that parameter.
        paragraph_2: ! 'The assignment of variables is made with nomenclature <span class=''code''>$(VariableName)</span>, as can be seen below:'
        paragraph_3: ! 'When the name of the parameter does not have the word variable, you can pass either a constant or a variable. The assignment is taken as constant in every programming language:'
        paragraph_4: In variables string, it is still possible to pass to the command only a snippet of the indexed variable, as in other programming languages, using pointers to variables.
        paragraph_5: ! 'In the example below, the following string would be displayed: <strong>H</strong>'
        paragraph_6: ! 'In the example below, the following string would be displayed: <strong>e</strong>'
        paragraph_7: ! 'In the example below, the following string would be displayed: <strong>ello World</strong>'
        paragraph_8: In the last example was specified <span class='code'>!</span> symbol so that it displays the characters from the position defined in <span class='code'>intIndex</span> till the end of the string. When the symbol <span class='code'>!</span> is omitted, only the character set in position <span class='code'>intIndex</span> is displayed on device's display.
      table_of_contents:
        limitations: Limitations
        parameters: Parameter passing
        variable_types: Variable Types
      title: POSXML - Variables and memory
      variable_types:
        paragraph_1: The POSXML has the concept of variable types, where they can be of type <strong>string</strong> or <strong>integer</strong>. Several POSXML commands require a variable type, which is described in the explanation of operation commands.
        paragraph_2: You can convert variables of type <strong>integer</strong> to <strong>string</strong> and vice versa, by simply using the commands inttostring and stringtoint.
        paragraph_3: Variables of type <strong>double</strong> (decimal floating point) can also be used by using variables of type string with decimal point separated by <strong>.</Strong> (point), and not by comma.
    structure:
      case_sensitive:
        paragraph_1: The POSXML is <em>case sensitive</em>, so there are differences between the lowercase and uppercase words. You need to pay attention, especially when naming functions and variables.
        paragraph_2: ! 'Example:'
      comments:
        paragraph_1: ! 'Comments blocks should be used with tags <span class=''code''>&lt;!--</span> and <span class=''code''>--&gt;</span> as below:'
      description: Organization and Structure, Parent tag or root tags, Case sensitive, Reserved characters, Comments.
      introduction: The POSXML follows the open standard <a href='http://en.wikipedia.org/wiki/XML' class='external'>XML</a>, widespread in the software industry. The XML standard is totally flexible and allows rapid expansion. All formatting rules applied to XML still exist in POSXML.
      reserved_characters:
        paragraph_1: All reserved characters in XML are also reserved in POSXML and should be written in a right way.
        paragraph_2: ! 'The following symbols should be written:'
        paragraph_3: ! 'To display a message with the symbol <span class=''code''>&lt;</span> (less than), the code would be like:'
      structure:
        paragraph_1: The POSXML is organized and structured in the form of tags with levels and sublevels of commands that form the logical structure of the application POSXML. A tag can be identified when is located between the signs <span class='code'>&lt;</span> (less than) and <span class='code'>></span> (greater than), where they shall be opened and closed.
        paragraph_2: ! 'Example:'
      table_of_contents:
        case_sensitive: Case sensitive
        comments: Comments
        reserved_characters: Reserved characters
        root_tag: Parent tag or root tags
        structure: Organization and Structure
      tag_root:
        paragraph_1: Every POSXML application has to have a parent tag or a root tag, and a valid name, following the criteria for opening and closing tags. Below the root tag, the tag <span class='code'>&lt;pagina nome="principal"&gt;</span> must be created, which is where all the application logic should be done.
        paragraph_2: ! 'Example:'
      title: POSXML - Language structure
  walk_framework:
    configuration:
      after_install: Now that WALK Framework has already been installed on the device, the next step is to perform the a <a href='/walk-framework/configuration'>initial setup</a> do dispositivo. Click <a href='/walk-framework/configuration'>here</a> to start the process.
      description: Procedure for setting up the device after installing the WALK Framework.
      integration:
        paragraph_1: Now that the device was created on WALK Manager and the communication has been set, the next step is to perform an HTTP integration test. Click <a href='/integration/http'>here</a> to start the process.
      prerequisites:
        internet_access: <strong>Computer with internet access:</strong> Necessary to grant access to the device on CloudWalk
        walk_framework: <strong>WALK Framework:</strong> Device with WALK Framework properly installed
      setting_up_communication:
        ethernet:
          paragraph_1: 1. Set the device IP address (eg 192.168.0.200). If using DHCP, the value <strong>0.0.0.0</strong> should be set.
          paragraph_2: 2. Set the subnet mask for the defined IP address class (eg 255.255.255.0).
          paragraph_3: 3. Set the router/gateway IP address (eg 192.168.0.1).
          paragraph_4: 4. Set the primary DNS server (eg 192.168.0.1).
          paragraph_5: 5. Set the secondary DNS server (eg 192.168.0.1).
        gprs:
          paragraph_1: 1. Set the mobile operator.
        paragraph_1: ! 'Now that the serial number of the device has already been registered on WALK Manager, the next step is to setup the communication. To do so, open the configuration menu (<strong>F1</strong> or <strong>F</strong>):'
        paragraph_2: ! 'Then select the option <strong>2 COMMUNICATION</strong>. The following screen will be shown:'
        paragraph_3: ! 'As can be seen, there are the following types of communication:'
        paragraph_4: Common local network (ethernet)
        paragraph_5: Landline/dial-up (PPP)
        paragraph_6: Landline/dial-up (SDLC)
        paragraph_7: If your device does not show an option, for example, GPRS, it means that your device does not support that specific type of communication.
        paragraph_8: Details of the communication types
        paragraph_9: ! 'Each type of communication has a particular configuration process, as shown below:'
        ppp:
          paragraph_1: 1. Set the modem speed (eg 2400).
          paragraph_2: 2. Set the internet provider telephone number.
          paragraph_3: 3. Set the internet username. Some providers might require the complete username (eg user@provider.com), while others might require only the short username.
          paragraph_4: 4. Set the internet password.
        sdlc:
          paragraph_1: 1. Set the modem speed (eg 2400).
          paragraph_2: 2. Set the internet provider telephone number.
        ssl:
          paragraph_1: ! '%{num}. Set whether the device should use or not use <a href=''http://en.wikipedia.org/wiki/Secure_Socket_Layer'' class=''external''>SSL</a>.'
        wifi:
          paragraph_1: 1. Set the name of the wireless network
          paragraph_2: 2. Set the password of the wireless network
          paragraph_3: ! '3. Set the protocol of the wireless network(ex: WEP 128-104).'
          paragraph_4: 4. Set the device IP address (eg 192.168.0.200). If using DHCP, the value <strong>0.0.0.0</strong> should be set.
          paragraph_5: 5. Set the subnet mask for the defined IP address class (eg 255.255.255.0).
          paragraph_6: 6. Set the router/gateway IP address (eg 192.168.0.1).
          paragraph_7: 7. Set the primary DNS server (eg 192.168.0.1).
          paragraph_8: Set the secondary DNS server (eg 192.168.0.1).
      table_of_contents:
        integration: Integration
        prerequisites: Prerequisites
        setting_up_communication: Setting up communication
        unlocking_serial_number: Unlocking the serial number
      title: Initial device configuration
      unlocking_serial_number:
        paragraph_1: ! 'In order to access the CloudWalk service, a device need to have its serial number registered on WALK Manager. It can be accomplish by following the follow steps:'
        paragraph_10: Enter the serial number exactly as it appears on the screen of the device and click the button <strong>Grant access</strong>
        paragraph_11: It is necessary to enter the numbers, letters and other characters, <strong>exactly</strong> as it appears on the screen of the device.
        paragraph_2: Getting the device serial number
        paragraph_3: ! 'To get a device serial number, open the configuration menu by pressing <strong>F1</strong> (VeriFone) or <strong>F</strong> (Telium):'
        paragraph_4: ! 'And then select the option <strong>5 CHECK S. NUMBER</strong>. The following screen will be shown:'
        paragraph_5: The number <strong>525-526-527</strong> represents a fictitious serial number (an example), which would be used on WALK Manager's Device management section.
        paragraph_6: Unlocking the serial number on WALK Manager
        paragraph_7: Access the WALK Managet through <a href='https://manager.cloudwalk.io' target='_blank' class='external'>https://manager.cloudwalk.io</a>
        paragraph_8: Select the section <a href='https://manager.cloudwalk.io/devices' target='_blank' class='external'>Devices</a>
        paragraph_9: Click the button <strong>Grant access to a new device</strong>
    ingenico_telium_1:
      description: Step by step process of installing the WALK Framework on terminals Ingenico EFT930G and EFT930S.
      introduction: This guide will walk you through the process of installing the WALK Framework on terminals Ingenico <strong>EFT930G</strong> and <strong>EFT930S</strong>. Be aware of prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: ! 'The models <strong>EFT930G</strong> and <strong>EFT930S</strong> have an entry for an USB adapter on the left side of the terminal. Connect the USB adapter on the entry and then connect the USB stick on the other end, as the picture below:'
        paragraph_2: ! 'Then follow the following procedure:'
        paragraph_3: Restart the terminal holding the key <strong>F4</strong>. The terminal should display the message <strong>USB MASS STORAGE</strong>
        paragraph_4: Wait a few seconds until the terminal show the directory WALK on display
        paragraph_5: Wait for the WALK Framework loading process
        paragraph_6: ! 'When finished, the terminal will display the following screen:'
        paragraph_7: Then appears the welcome screen with the logo of the CloudWalk service.
      preparing_the_pendrive:
        paragraph_1: ! 'To build the WALK Framework setup on an USB stick, follow the following procedure:'
        paragraph_2: Connect the USB stick to the computer
        paragraph_3: Format the USB stick
        paragraph_4: Extract the WALK Framework package that was downloaded at the beginning of this tutorial
        paragraph_5: In the unzipped folder you will find a folder called <strong>Telium</strong>; copy that folder to the USB stick's root folder
      prerequisites:
        adapter: <strong>USB adapter:</strong> Required for installation. It is possible to purchase one with your supplier.
        operating_system: <strong>Operating System:</strong> Microsoft Windows XP SP3 or newer (Vista, Seven, etc)
        packet: <strong>WALK Framework:</strong> For customers outside Brazil, please fill in a <a href="https://support.cloudwalk.io" target="_blank">ticket</a> so we can help you out.
        pendrive: <strong>USB sticker:</strong> A common USB sticker (4GB max).
      table_of_contents:
        loading_the_framework: Loading the framework on the device
        preparing_the_pendrive: Preparing the USB sticker
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: Installing the WALK Framework - Ingenico Telium 1
      wiping_the_device:
        paragraph_1: ! 'Access the OS menu restarting the terminal and pressing the key <strong>f2</strong> quickly as soon as the screen below appears:'
        paragraph_2: ! 'On the main menu, choose the option <strong>Delete menu</strong>:'
        paragraph_3: ! 'And then choose the option <strong>Delete application</strong>:'
        paragraph_4: The next screen lists some application installed on the terminal, where <strong>M2OS</strong> is the Telium Manager, which should not be deleted. To delete any other file, select the file to be deleted and press the <strong>GREEN</strong>.
        paragraph_5: <strong>DO NOT</strong> delete the content of the menu <strong>Delete library</strong> or the file <strong>M2OS</strong>, since it could harm the terminal.
    ingenico_telium_2:
      description: Step by step process of installing the WALK Framework for Ingenico iCT220, iCT250, iWL220, iWL250 and iWL280.
      introduction: This guide will walk you through the process of installing the WALK Framework on terminals Ingenico <strong>ICT220</strong>, <strong>ICT250</strong>, <strong>IWL220</strong>, <strong>IWL250</strong> and <strong>IWL280</strong>. Be aware of prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: ! '<strong>ICT220 </strong> and <strong>ICT250</strong> Models contain a USB input located on the bottom of the device, plug in your USB stick as in the picture:'
        paragraph_2: ! 'IWL220, IWL250 and IWL280 models already have an entry for an USB adapter on the left side of the device. Connect the USB and then connect the USB on the other end, as the image below:'
        paragraph_3: ! 'Then follow the following procedure:'
        paragraph_4: Restart the device and hold <strong>F4</strong> button. The device will display the message <strong>USB MASS STORAGE</strong>
        paragraph_5: Wait a few seconds until the device show the WALK directory on display
        paragraph_6: Select the WALK directory pressing <strong>GREEN</strong>
        paragraph_7: Wait for the process to load WALK Framework package
        paragraph_8: ! 'When finished, the device will display the following screen:'
        paragraph_9: Then appears Welcome screen with the logo of Cloudwalk service.
      preparing_the_pendrive:
        macosx: <strong>Mac OS X users:</strong> To avoid problems with hidden files when unzipping the WALK Framework package, it is recommended to use the free app <a href='https://itunes.apple.com/br/app/izip-archiver/id478738838' class='external' target='_blank'>iZip Archiver</a> to uncompress the package.
        paragraph_1: ! 'To mount WALK Framework package on pendrive, follow the following procedure:'
        paragraph_2: Connect the USB stick to the computer
        paragraph_3: Format the pendrive
        paragraph_4: Extract the WALK Framework downloaded at the beginning of this tutorial
        paragraph_5: In this folder you'll find another one named TELIUM, copy it to your pendrive
      prerequisites:
        adapter: ! '<strong> USB Adapter: </strong> Required only for installation on IWL220, IWL250 and IWL280'
        operating_system: ! '<strong> Operating System: </strong> Microsoft Windows XP SP3 or higher (Vista, Seven, etc.)'
        packet: <strong>WALK Framework and production OS:</strong> <em>Paytec</em> <a href='https://dl.cloudwalk.io/cloudwalk_framework_telium2/cloudwalk_iCT2xx_sdk9.6_prod_paytec.zip'>ICT2xx</a> or <a href='https://dl.cloudwalk.io/cloudwalk_framework_telium2/cloudwalk_iWL2xx_sdk9.6_prod_paytec.zip'>IWL2xx</a>. <em>TEFTI</em> <a href='https://dl.cloudwalk.io/cloudwalk_framework_telium2/cloudwalk_iCT2xx_sdk9.6_prod_tefi.zip'>ICT2xx</a> or <a href='https://dl.cloudwalk.io/cloudwalk_framework_telium2/cloudwalk_iWL2xx_sdk9.6_prod_tefi.zip'>IWL2xx</a>
        pendrive: ! '<strong> Pendrive: </strong> A common pendrive'
      table_of_contents:
        loading_the_framework: Loading the framework on the device
        preparing_the_pendrive: Preparing pendrive
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: Installing the WALK Framework - Ingenico Telium 2
      wiping_the_device:
        paragraph_1: ! 'Access the menu of the OS restarting the device and pressing <strong>F</strong> and the screen below will appear:'
        paragraph_2: ! 'From the main menu, select the <strong>Delete menu</strong> option:'
        paragraph_3: ! 'Then select the menu <strong>Delete application</strong>:'
        paragraph_4: The next screen lists some applications installed on the device where <strong> M2OS </strong> refers to Telium Manager, that should not be deleted. To delete any other file, select the file to be deleted and press the <strong>GREEN</strong> button.
        paragraph_5: <strong>DO NOT </ strong> delete the contents of the menu <strong>Delete library</strong> or file <strong>M2OS</strong>, otherwise the device may be damaged.
    verifone_evo:
      ! ' introduction_cable_terminals': This guide will walk you through the process of installing the WALK Framework on terminals VeriFone Vx805 and Vx820. Be aware of prerequisites and follow the installation process carefully.
      description: Step by step process of installing the WALK Framework for VeriFone Vx520 and Vx680.
      identify_os:
        os_version: Operating System Version
        paragraph_1: To identify the version of the operating system that is installed on your device, note the second line of the display screen, considering the last two characters. This screen is displayed when the device is connected.
        paragraph_2: Keep the operating system of your devices up to date. Devices with outdated operating system can be slow and may also have communication problems.
        paragraph_3: ! 'Minimum operating system requirements for installing the WALK Framework:'
        pos_model: Model POS
      installing_vx805_and_vx820: To load the framework on terminals <strong>Vx805</strong> and <strong>Vx820</strong>, check out <a href='/walk-framework/verifone-evo-vx805'>this guide</a>.
      installing_vx805_and_vx820_intro: This guide will walk you through the process of installing the WALK Framework on terminals VeriFone <strong>Vx805</strong> and <strong>Vx820</strong>. Be aware of prerequisites and follow the installation process carefully.
      introduction: This guide will walk you through the process of installing the WALK Framework on terminals VeriFone <strong>Vx520</strong> and <strong>Vx680</strong>. Be aware of prerequisites and follow the installation process carefully.
      introduction_cable_terminals: This guide will walk you through the process of installing the WALK Framework on terminals VeriFone Vx805 and Vx820. Be aware of prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: To start charging, run carrega_na_flash.bat to load the certificates and the WALK Framework.
        paragraph_2: ! 'The following DOS screen will appear:'
        paragraph_3: This screen shows the continuation of downloading the framework to the device. No action is required, since the commands are executed automatically.
        paragraph_4: ! 'While the charge is made, the device displays the progress of the case:'
        paragraph_5: At the end of the charging process, the DOS screen will close and the device will restart a few times, and then displays Welcome screen with the logo of CloudWalk service.
      loading_the_framework_usb:
        paragraph_1: ! 'On terminals <strong>Vx520</strong>, connect the USB stick on the back of the terminal as shown below:'
        paragraph_2: ! 'On terminals <strong>Vx680</strong>, the place to connect the USB stick is located on the recharge cable, as shown below:'
        paragraph_3: ! 'The terminal will detect the connected stick, and the following screen is displayed:'
        paragraph_4: Choose the option 1, Yes, to begin the loading process
        paragraph_5: After loading all the files, the terminal will request to remove the stick
        paragraph_6: Remove the pendrive and press Enter (green). The terminal will restart a few times, and then will be presented the display screen with the CloudWalk logo.
      preparing_the_device:
        paragraph_1: Unpack the WALK Framework downloaded into directory of your choice.
        paragraph_2: This directory must be local directory (eg C:\temp\dir), and not network directory (\\)
        paragraph_3: ! 'Before performing any file, you must prepare your device to download the package. The first point that should be checked is whether the charge cable is properly connected to the serial port of your computer and the <strong>RS 232</strong> port of the device as the image below:'
        paragraph_4: <strong>Attention!</strong>
        paragraph_5: This step is the one with the highest rate of errors because many people connect the serial cable to the wrong port on the POS or the wrong port of the PC, if it has two COM ports.
        paragraph_6: Another important point is that the COM1 of your computer may be being used by another process, causing error in the load time of the WALK Framework, and because download is only possible through COM1, it must be correctly configured in Windows.
      preparing_the_device_usb:
        paragraph_1: ! 'After turning on the terminal and after displaying the splash screen that displays the version of the operating system, the following screen should be shown:'
      preparing_the_pendrive:
        paragraph_1: ! 'To mount WALK Framework package on pendrive, follow the following procedure:'
        paragraph_2: Connect the USB stick to the computer
        paragraph_3: Format the pendrive
        paragraph_4: Copy the downloaded WALK Framework package to the pendrive (on root)
        paragraph_5: <strong>DO NOT</strong> unzip the package; It must be copied while <strong>compressed</strong> to the stick.
      prerequisites:
        cable: <strong>Charge cable USB or Serial</strong>
        operating_system: <strong>Operating System:</strong> Microsoft Windows XP SP3 or higher (Vista, Seven, etc.)
        packet: <strong>WALK Framework Package:</strong> <a href='https://dl.dropboxusercontent.com/u/436039/cloudwalk/cloudwalk_framework_evo_pendrive/paytec/verifone.zip'>verifone.zip</a>
        packet_cable: <strong>WALK Framework Package:</strong> <a href='https://dl.cloudwalk.io/framework_evo.zip'>framework_evo.zip</a>
        pendrive: <strong>Pendrive:</strong> A common pendrive (4GB)
        serial_port: <strong>Serial port or USB:</strong> available and configured as <strong>COM1</strong>
      table_of_contents:
        identify_os: Checking the OS version of the POS
        loading_the_framework: Loading the framework on the device
        preparing_the_device: Preparing the device
        preparing_the_pendrive: Preparing the pendrive
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: Installing the WALK Framework - VeriFone EVO
      wiping_the_device:
        paragraph_1: ! 'With the cable properly connected, turn the device on the power cord. In the model Vx520 press the F2 and F4 at the top right of the device. In the model Vx680 press the enter (green) and 7 simultaneously, and the following screen will appear:'
        paragraph_10: Press 1 to see the next screen.
        paragraph_11: Press 2, then press 2 again to choose the COM1, so that the device will be awaiting the execution of any file from the directory WALK Framework, which was previously uncompressed.
        paragraph_12: The first file to be executed is <strong>limpa_terminal.bat</strong>. This file clears any information that is in the device, so there is no 'junk' in the device memory when it loads new framework.
        paragraph_13: ! 'When you run the file limpa_terminal.bat you will see the following DOS screen:'
        paragraph_14: This screen shows that the device is being cleaned. No action is required, since the commands are executed automatically. At the end the screen closes and the device will reboot.
        paragraph_15: ! 'After being restarted, the following screen appears:'
        paragraph_16: This screen indicates that the device is waiting for the execution of the file (WALK Framework).
        paragraph_2: This is the first screen of the device before receiving the package. You must enter a password to access the configuration menu.
        paragraph_3: If you do not know the password, contact your device supplier.
        paragraph_4: ! 'After entering the password, press the green button (OK) to access the next screen:'
        paragraph_5: ! 'The menu option to download the WALK Framework is the DOWNLOAD option. Press 3 in the setup menu. The following screen appears:'
        paragraph_6: ! 'Press the green button (OK) to move to the next screen:'
        paragraph_7: Enter the password again.
        paragraph_8: Press the green button (OK) to select the type of download.
        paragraph_9: Press 1 to select Single App and move to the option screen.
    verifone_verix:
      description: Step by step process of installing the WALK Framework for VeriFone Vx510, Vx610 and Vx670.
      identify_os:
        os_version: Operating System Version
        paragraph_1: To identify the version of the operating system that is installed on your device, note the second line of the display screen, considering the last two characters. This screen is displayed when the device is connected.
        paragraph_2: Keep the operating system of your devices up to date. Devices with outdated operating system can be slow and may also have communication problems.
        paragraph_3: ! 'Minimum system requirements for installing the operating WALK Framework:'
        pos_model: Model POS
      introduction: This guide will walk you through the process of installing the WALK Framework on terminals VeriFone <strong>Vx510</strong>, <strong>Vx610</strong> and <strong>Vx670</strong>. Be aware of prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: To start charging, run carrega_na_flash.bat to load the certificates and the WALK Framework.
        paragraph_2: ! 'The following DOS screen will appear:'
        paragraph_3: This screen shows the continuation of downloading the framework to the device. No action is required, since the commands are executed automatically.
        paragraph_4: ! 'While the charge is made, the device displays the progress of the case:'
        paragraph_5: At the end of the charging process, the DOS screen will close and the device will restart a few times, and then displays Welcome screen with the logo of the CloudWalk service.
      preparing_the_device:
        paragraph_1: Unpack the WALK Framework downloaded into directory of your choice.
        paragraph_2: This directory must be a local directory (eg C:\temp\dir), and not a network directory (\\)
        paragraph_3: ! 'Before performing any file, you must prepare the device to download the package. The first point that should be checked is whether the charge cable is properly connected to the serial port of your computer and the <strong>RS 232</strong> port from the device as the image below:'
        paragraph_4: <strong>Attention!</strong>
        paragraph_5: This step is the one with the highest rate of errors because many people connect the serial cable to the wrong port on the POS or the wrong port of the PC, if it has two COM ports.
        paragraph_6: Another important point is that the COM1 of your computer may be being used by another process, causing error in the load time of the WALK Framework, and how the download is only possible through COM1, it must be correctly configured in Windows.
      prerequisites:
        cable: <strong>Charge Cable for VeriFone Verix 510 and 610:</strong> If you are using the device Verix 670, it will require a special adapter which can be requested with your device supplier.
        operating_system: <strong> Operating System:</strong> Microsoft Windows XP SP3 or higher (Vista, Seven, etc.)
        packet: <strong>WALK Framework Package:</strong> <a href='https://dl.cloudwalk.io/framework_verix.zip'> https://dl.cloudwalk.io/framework_verix.zip</a>
        serial_port: <strong>Serial port or USB:</strong> available and configured as <strong>COM1</strong>
      table_of_contents:
        identify_os: Checking the OS version of the POS
        loading_the_framework: Loading the framework on the device
        preparing_the_device: Preparing the device
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: Installing the WALK Framework - VeriFone Verix
      wiping_the_device:
        paragraph_1: ! 'With the cable properly connected, turn the device on the power cord. In the model Vx520 press the F2 and F4 at the top right of the device. In the model Vx680 press the enter (green) and 7 simultaneously, and the following screen will appear:'
        paragraph_10: ! 'Press F3 to select FULL option and move to the screen of the selection of the transfer mode:'
        paragraph_11: ! 'Press F3 to choose  COM1, so that the device will be awaiting the execution of any file from WALK Framework directory, which was earlier unzipped:'
        paragraph_12: The first file to be executed is <strong>limpa_terminal.bat</strong>. This file clears any information that is in the device, so it is no 'junk' in the device memory when it loads new framework.
        paragraph_13: ! 'When you run the file limpa_terminal.bat you will see the following DOS screen:'
        paragraph_14: This screen shows that the device is being cleaned. No action is required, since the commands are executed automatically.
        paragraph_15: At the end of execution, the screen closes and the device will reboot.
        paragraph_16: ! 'After being restarted, the following screen appears:'
        paragraph_17: This screen indicates that the device is waiting for the execution of the file (WALK Framework).
        paragraph_2: This is the first screen of the device before receiving the package. You must enter a password to access the configuration menu.
        paragraph_3: If you do not know the password, contact your device supplier.
        paragraph_4: ! 'After entering the password, press the green button (OK) to access the next screen:'
        paragraph_5: ! 'Press the red buttons just below the little arrow that appears on the display to scroll the menu and access more options, as shown below:'
        paragraph_6: ! 'The menu option to download the WALK Framework is the DOWNLOAD option. Press 3 in the setup menu. The following screen appears:'
        paragraph_7: ! 'Press the green button (OK) to move to the next screen:'
        paragraph_8: Enter the password again.
        paragraph_9: Press the green button (OK) to select the type of download.
  walk_manager:
    apps:
      description: The concept of Application in WALK Manager defines the applications available for use by devices. How to submit an application in 3 steps.
      functionality:
        paragraph_1: The concept of <strong>Application</strong> in WALK Manager, as its name suggests, defines the applications available for use by devices.
        paragraph_2: These applications in practice are generated by the <a href='/introduction/development-environment'>CloudWalk IDE</a>, whenever a <a href='/introduction/posxml'>POSXML</a> application is compiled.
      interface:
        paragraph_1: ! 'To submit an application, just follow the following procedure:'
        paragraph_2: Click the menu <strong>Applications</strong>.
        paragraph_3: Click the <strong>New Application</strong> button.
        paragraph_4: ! 'Fill in the form:'
        paragraph_5: <strong>Name</strong> is a unique reference on the system (attention to naming rule)
        paragraph_6: <strong>Brief Description</strong> is a name used to identify the application in WALK Manager
        paragraph_7: <strong>Authorizer IP address or URL</strong> is the address of the authorization server
        paragraph_8: <strong>Application should be displayed in the menu of services.</strong> Define whether or not the application will appear on the device screen. If this option is selected, it is also necessary to set the name that will be displayed
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: WALK Manager - Applications
    assets:
      description: ! 'Any file that is different from a POSXML application can be sent to the device. Examples of files that can be sent: Pictures, Texts, Zips.'
      functionality:
        paragraph_1: ! 'Any file that is different from a POSXML application can be sent to the device through this functionality, using the command <a href=''/posxml/commands/downloadfile'' class=''command''>downloadfile</a>. Examples of files that can be sent:'
        paragraph_2: <strong>Pictures:</strong> Logo for the device screen or for the printed ticket
        paragraph_3: <strong>Texts:</strong> message files, names, etc.
        paragraph_4: What can be unzipped directly on the POS
        paragraph_5: Before updating a file, <strong>clean your browser's cache</strong>, to prevent sending old version of the file (maintained by the browser).
      interface:
        paragraph_1: ! 'To submit a file, just follow the following procedure:'
        paragraph_2: Click the menu <strong>File</strong>.
        paragraph_3: Click the <strong>New File</strong> button.
        paragraph_4: ! 'Fill in the form:'
        paragraph_5: <strong>Brief Description</strong> is a name used for internal reference
        paragraph_6: <strong>Choose the file</strong> to be stored on CloudWalk which can later be downloaded to devices
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: WALK Manager - Files
    devices:
      description: To allow a particular device to contact with the CloudWalk servers, it is first necessary to release access to this device. How to release a device in 3 steps.
      functionality:
        paragraph_1: For safety reasons, by default, a device cannot access CloudWalk. To allow a particular device to connect with CloudWalk servers, it is first necessary to grant access to this device, and this proccess is made through this feature.
      interface:
        paragraph_1: ! 'To grant access to a device, just follow the following procedure:'
        paragraph_2: Click the menu <strong>Devices</strong>.
        paragraph_3: Click the <strong>Grant access to a new device</strong> button.
        paragraph_4: ! 'Fill in the form:'
        paragraph_5: ! '<strong>Serial Number</strong> is the number found on the back of the device, usually defined as: <strong>Serial N</strong>, <strong>S/N</strong> or <strong>Serial Number</strong>.'
        paragraph_6: (Optional) Click the tab <strong>release batch (file)</strong> to release many serial numbers at once.
        paragraph_7: Enter the file (.txt) containing a list of serial numbers (one per line).
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: WALK Manager - Devices
    groups:
      description: Group is the association of one or more logical numbers with one or more applications. How to register a group and add parameters to it.
      functionality:
        paragraph_1: ! '<strong>Group</strong> is the association of one or more logical numbers with one or more applications. The group is referenced in two distinct stages, which are:'
        paragraph_2: <strong>Interface of Logical Numbers:</strong> Where logical numbers are registered and associated in groups;
        paragraph_3: <strong>Interface of Groups:</strong> Where applications are associated.
      interface:
        paragraph_1: ! 'To register a group, please follow the following procedure:'
        paragraph_2: Click the menu <strong>Groups</strong>.
        paragraph_3: Click the <strong>New Group</strong> button.
        paragraph_4: ! 'Fill in the form:'
        paragraph_5: <strong>Group Name</strong> is the group identification
      parameters:
        paragraph_1: It is possible to add parameters to a group. For example, the group <strong>AREA 51</strong> has several logical numbers and sales application. This group then has a parameter called <strong>SPECIAL_TICKET</strong>, with the value <strong>1</strong>. Thus, all devices belonging to this group inherit this parameter.
        paragraph_2: Logic of sales application makes a validation on the parameter <strong>SPECIAL_TICKET</strong>, and since value is <strong>1</strong>, the application prints a special ticket, with additional company information for purposes of disclosure.
        paragraph_3: After long analysis by the strategic team, they came to the conclusion that the cost of printing this special, more detailed ticket, is not worth it. Analysts then decided to change the parameter <strong>SPECIAL_TICKET</strong> value from <strong>1</strong> to <strong>0</strong>. Ready! Now all devices belonging to the group <strong>AREA 51</strong> will no longer print the special tickets.
        paragraph_4: In order of preference, parameter of a logical number overlaps the parameter of a group.
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
        parameters: Parameters
      title: WALK Manager - Groups
    logical_numbers:
      description: Logical Number is the device ID, and is directly associated with a Group. How to register a logical number and add parameters to it.
      functionality:
        paragraph_1: ! 'The logical <strong>Number</strong> is the ID of the device, and is directly associated with a <strong>Group</strong>. The logical number is referenced in two distinct stages, which are:'
        paragraph_2: <strong>Interface of Logical Numbers:</strong> where logical numbers are registered and associated in groups.
        paragraph_3: <strong>Device:</strong> Accessing the setup menu of the POS, on the option <strong>Logical Number</strong>
        paragraph_4: Do not confuse <strong>Logical Number</strong> with <strong>Serial Number</strong>. The logical number is used to identify the POS while the serial number is used to release access to the POS.
      interface:
        paragraph_1: ! 'To register a logical number, just follow the following procedure:'
        paragraph_2: Click the menu <strong>Logical Numbers</strong>.
        paragraph_3: Click the <strong>New logical number</strong> button.
        paragraph_4: ! 'Fill in the form:'
        paragraph_5: <strong>Logical number</strong> is the ID of the device
      parameters:
        paragraph_1: You can add parameters to a logical number. For example, the logical number <strong>100022</strong> is used on the device on restaurant 'Chop Suey' of Mr. Li Hanzo. This logical number then has a parameter called <strong>NUM_PARCELS</strong>, with the value <strong>1</strong>.
        paragraph_2: Logic of the sales application makes a validation on the parameter <strong>NUM_PARCELS</strong>, and since the value is <strong>1</strong>, the application offers only the payment option 'on cash'.
        paragraph_3: The restaurant of Mr. Li, presenting excellent results, drew the attention of the strategic team of restaurants 'Chop Suey', and they decided to offer the possibility to Mr. Li to accept payment in installments. For this change, it is enough that someone from strategic staff alter the parameter <strong>NUM_PARCELS</strong> value from <strong>1</strong> to <strong>3</strong>. Ready!
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
        parameters: Parameters
      title: WALK Manager - Logical numbers
    transactions_monitor:
      description: The transaction monitor displays all the operations that have been performed. Just specify the record type in the search filters.
      functionality:
        paragraph_1: The transaction monitor displays all the operations that have been performed by devices. Just specify the record type in the search filters.
      interface:
        paragraph_1: ! 'To access the transaction monitor, just follow the following procedure:'
        paragraph_2: Click the menu <strong>Monitor transactions</strong>.
        paragraph_3: Click the <strong>Filters</strong> button.
        paragraph_4: ! 'Specify the type of record:'
        paragraph_5: <strong>Requests -</strong> delimit the time interval of the query
        paragraph_6: <strong>Record Type -</strong> define the type of record to be consulted (download, transaction, etc.)
        paragraph_7: <strong>Status -</strong> define the status of the records (successful, error, etc.)
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: WALK Manager - Monitor transactions
