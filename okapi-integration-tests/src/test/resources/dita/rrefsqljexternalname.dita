<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqljexternalname" xml:lang="en-us">
<title>EXTERNAL NAME clause</title>
<prolog><metadata>
<keywords><indexterm>EXTERNAL NAME clause</indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section>
<p>The EXTERNAL NAME clause specifies the Java method to be called in a <xref
href="rrefcreatefunctionstatement.dita#rrefcreatefunctionstatement">CREATE
FUNCTION statement</xref> or a <xref
href="rrefcreateprocedurestatement.dita#rrefcreateprocedurestatement">CREATE
PROCEDURE statement</xref>, and it specifies a Java class in a <xref
href="rrefsqljcreateaggregate.dita#rrefsqljcreateaggregate">CREATE AGGREGATE
statement</xref> or a <xref
href="rrefsqljcreatetype.dita#rrefsqljcreatetype">CREATE TYPE statement</xref>.
</p>
</section>
<refsyn><title>Syntax</title>
<codeblock><b>EXTERNAL NAME <i>singleQuotedString</i></b></codeblock>
<p>The <i>singleQuotedString</i> cannot have any extraneous spaces.</p>
<p>The method name specified in the CREATE FUNCTION or CREATE PROCEDURE
statement normally takes the following form:</p>
<codeblock><b>'<i>class_name</i>.<i>method_name</i>'</b></codeblock>
<p>If the class is a static nested class, or if the method is in a static nested
class, use a dollar sign ($) as a separator between the outer and static class.
For example, suppose you have the following class and method definition:</p>
<codeblock><b>public class TestFuncs {
    public static final class MyMath {
        public static double pow( double base, double power ) {
            return Math.pow( base, power );
        }
    }
}</b></codeblock>
<p>If you use CREATE FUNCTION to bind this <i>pow</i> method to a user-defined
function, the external name should be <i>TestFuncs$MyMath.pow</i>, not
<i>TestFuncs.MyMath.pow</i>.</p>
</refsyn>
<example><title>Examples</title>
<codeblock><b>-- Specify the Mode class as an external name
CREATE DERBY AGGREGATE mode FOR INT
EXTERNAL NAME 'com.example.myapp.aggs.Mode';</b></codeblock>
<codeblock><b>-- Specify the pow method in the static class MyMath
CREATE FUNCTION MYPOWER ( X DOUBLE, Y DOUBLE )
RETURNS DOUBLE
PARAMETER STYLE JAVA
NO SQL LANGUAGE JAVA
EXTERNAL NAME 'TestFuncs$MyMath.pow'</b></codeblock>
</example>
</refbody>
</reference>
