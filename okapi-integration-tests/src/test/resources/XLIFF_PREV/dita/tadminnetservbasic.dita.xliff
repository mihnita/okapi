<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="tadminnetservbasic.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Basic Network Server security policy</source>
<seg-source><mrk mid="0" mtype="seg">Basic Network Server security policy</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Basic Network Server security policy</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">If you boot the Network Server without specifying a security manager, the Network Server will install a default Java security manager that enforces a Basic policy.</source>
<seg-source><mrk mid="0" mtype="seg">If you boot the Network Server without specifying a security manager, the Network Server will install a default Java security manager that enforces a Basic policy.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you boot the Network Server without specifying a security manager, the Network Server will install a default Java security manager that enforces a Basic policy.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Network Server</source>
<seg-source><mrk mid="0" mtype="seg">Network Server</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Network Server</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">basic policy</source>
<seg-source><mrk mid="0" mtype="seg">basic policy</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">basic policy</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">This happens if you boot the Network Server as your VM's entry point, using a command like the following:</source>
<seg-source><mrk mid="0" mtype="seg">This happens if you boot the Network Server as your VM's entry point, using a command like the following:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This happens if you boot the Network Server as your VM's entry point, using a command like the following:</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java org.apache.derby.drda.NetworkServerControl start ...<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java org.apache.derby.drda.NetworkServerControl start ...<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java org.apache.derby.drda.NetworkServerControl start ...<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">You should run your Network Server with user authentication and user authorization enabled. For details on how to enable user authentication, see "Working with user authentication" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>. For information on user authorization, see "Users and authorization identifiers" and "User authorizations" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">You should run your Network Server with user authentication and user authorization enabled.</mrk><mrk mid="1" mtype="seg"> For details on how to enable user authentication, see "Working with user authentication" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> For information on user authorization, see "Users and authorization identifiers" and "User authorizations" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You should run your Network Server with user authentication and user authorization enabled.</mrk><mrk mid="1" mtype="seg"> For details on how to enable user authentication, see "Working with user authentication" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> For information on user authorization, see "Users and authorization identifiers" and "User authorizations" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">Some of your application code may run as procedures and functions which you have declared using the CREATE PROCEDURE and CREATE FUNCTION statements. You will need to add privileged blocks to your declared procedures and functions if they perform sensitive operations such as file and network i/o, classloading, system property reading, etc.</source>
<seg-source><mrk mid="0" mtype="seg">Some of your application code may run as procedures and functions which you have declared using the CREATE PROCEDURE and CREATE FUNCTION statements.</mrk><mrk mid="1" mtype="seg"> You will need to add privileged blocks to your declared procedures and functions if they perform sensitive operations such as file and network i/o, classloading, system property reading, etc.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some of your application code may run as procedures and functions which you have declared using the CREATE PROCEDURE and CREATE FUNCTION statements.</mrk><mrk mid="1" mtype="seg"> You will need to add privileged blocks to your declared procedures and functions if they perform sensitive operations such as file and network i/o, classloading, system property reading, etc.</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">If for some reason you do not want to run your client/server application under a security manager, you may override the Network Server's impulse to install a default policy. For details, see <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservopen.dita#tadminnetservopen"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">If for some reason you do not want to run your client/server application under a security manager, you may override the Network Server's impulse to install a default policy.</mrk><mrk mid="1" mtype="seg"> For details, see <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservopen.dita#tadminnetservopen"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If for some reason you do not want to run your client/server application under a security manager, you may override the Network Server's impulse to install a default policy.</mrk><mrk mid="1" mtype="seg"> For details, see <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservopen.dita#tadminnetservopen"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">Note that the Network Server attempts to install a security manager only if you boot the server as the entry point of your VM. The Network Server will not attempt to install a security manager if you start the server from your application using the programmatic API described in <bpt id="1" ctype="x-xref">&lt;xref href="tadminconfig814963.dita#tadminconfig814963"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Note that the Network Server attempts to install a security manager only if you boot the server as the entry point of your VM.</mrk><mrk mid="1" mtype="seg"> The Network Server will not attempt to install a security manager if you start the server from your application using the programmatic API described in <bpt id="1" ctype="x-xref">&lt;xref href="tadminconfig814963.dita#tadminconfig814963"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note that the Network Server attempts to install a security manager only if you boot the server as the entry point of your VM.</mrk><mrk mid="1" mtype="seg"> The Network Server will not attempt to install a security manager if you start the server from your application using the programmatic API described in <bpt id="1" ctype="x-xref">&lt;xref href="tadminconfig814963.dita#tadminconfig814963"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">You will find a template security policy in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> distribution at <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>demo/templates/server.policy<ept id="2">&lt;/codeph&gt;</ept>. Most likely, you will want to customize this policy. For example, probably you will want to restrict the server's liberal file i/o permissions which let the server backup/restore and export/import to or from any location in the local file system. For details on how to customize the Template policy, see <bpt id="3" ctype="x-xref">&lt;xref href="tadminnetservcustom.dita#tadminnetservcustom"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>. The following example is a copy of the Basic policy:</source>
<seg-source><mrk mid="0" mtype="seg">You will find a template security policy in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> distribution at <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>demo/templates/server.policy<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Most likely, you will want to customize this policy.</mrk><mrk mid="2" mtype="seg"> For example, probably you will want to restrict the server's liberal file i/o permissions which let the server backup/restore and export/import to or from any location in the local file system.</mrk><mrk mid="3" mtype="seg"> For details on how to customize the Template policy, see <bpt id="3" ctype="x-xref">&lt;xref href="tadminnetservcustom.dita#tadminnetservcustom"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk><mrk mid="4" mtype="seg"> The following example is a copy of the Basic policy:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You will find a template security policy in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> distribution at <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>demo/templates/server.policy<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Most likely, you will want to customize this policy.</mrk><mrk mid="2" mtype="seg"> For example, probably you will want to restrict the server's liberal file i/o permissions which let the server backup/restore and export/import to or from any location in the local file system.</mrk><mrk mid="3" mtype="seg"> For details on how to customize the Template policy, see <bpt id="3" ctype="x-xref">&lt;xref href="tadminnetservcustom.dita#tadminnetservcustom"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk><mrk mid="4" mtype="seg"> The following example is a copy of the Basic policy:</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">// This template policy file gives examples of how to configure the // permissions needed to run a <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> network server with the Java // Security manager. // grant codeBase "${derby.install.url}derby.jar" { // These permissions are needed for everyday, embedded <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> usage. // permission java.lang.RuntimePermission "createClassLoader"; permission java.util.PropertyPermission "derby.*", "read"; permission java.util.PropertyPermission "user.dir", "read"; // The next two properties are used to determine if the VM is 32 or 64 // bit. // permission java.util.PropertyPermission "sun.arch.data.model", "read"; permission java.util.PropertyPermission "os.arch", "read"; permission java.io.FilePermission "${derby.system.home}","read"; permission java.io.FilePermission "${derby.system.home}${/}-", "read,write,delete"; // This permission lets a DBA reload the policy file while the server // is still running. The policy file is reloaded by invoking the // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure. // permission java.security.SecurityPermission "getPolicy"; // This permission lets you backup and restore databases // to and from arbitrary locations in your file system. // // This permission also lets you import/export data to and from // arbitrary locations in your file system. // // You may want to restrict this access to specific directories. // permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read,write,delete"; // Permissions needed for JMX based management and monitoring. // // Allows this code to create an MBeanServer: // permission javax.management.MBeanServerPermission "createMBeanServer"; // // Allows access to <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby. // <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> must be allowed to register and unregister these MBeans. // It is possible to allow access only to specific MBeans, attributes // or operations. To fine tune this permission, see the javadoc of // javax.management.MBeanPermission or the JMX Instrumentation and // Agent Specification. // permission javax.management.MBeanPermission "org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean"; // // Trusts <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these in // the MBean server. // permission javax.management.MBeanTrustPermission "register"; // getProtectionDomain is an optional permission needed for printing // classpath information to derby.log // permission java.lang.RuntimePermission "getProtectionDomain"; // The following permission must be granted for // Connection.abort(Executor) to work. Note that this permission // must also be granted to outer (application) code domains. // permission java.sql.SQLPermission "callAbort"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; }; grant codeBase "${derby.install.url}derbynet.jar" { // This permission lets the Network Server manage connections from // clients. // Accept connections from any host. <bpt id="6" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="6">&lt;/ph&gt;</ept> is listening to the host // interface specified via the -h option to "NetworkServerControl // start" on the command line, via the address parameter to the // org.apache.derby.drda.NetworkServerControl constructor in the API // or via the property derby.drda.host; the default is localhost. // You may want to restrict allowed hosts, e.g. to hosts in a specific // subdomain, e.g. "*.example.com". // permission java.net.SocketPermission "*", "accept"; // Allow the server to listen to the socket on the default port (1527). // If you have specified another port number with the -p option to // "NetworkServerControl start" on the command line, or with the // portNumber parameter to the NetworkServerControl constructor in the // API, or with the property derby.drda.portNumber, you should change // the port number in the permission statement accordingly. // permission java.net.SocketPermission "localhost:1527", "listen"; // Needed for server tracing. // permission java.io.FilePermission "${derby.drda.traceDirectory}${/}-", "read,write,delete"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write"; // JMX: Uncomment this permission to allow the ping operation of the // NetworkServerMBean to connect to the Network Server. // //permission java.net.SocketPermission "*", "connect,resolve"; // Needed by sysinfo. The file permission is needed to // check the existence of jars on the classpath. You can // limit this permission to just the locations which hold // your jar files. // // In this template file, this block of permissions is granted // to derbynet.jar under the assumption that derbynet.jar is // the first jar file in your classpath which contains the // sysinfo classes. If that is not the case, then you will want // to grant this block of permissions to the first jar file // in your classpath which contains the sysinfo classes. // Those classes are bundled into the following <bpt id="7" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="7">&lt;/ph&gt;</ept> // jar files: // // derbynet.jar // derby.jar // derbyclient.jar // derbytools.jar // permission java.util.PropertyPermission "user.*", "read"; permission java.util.PropertyPermission "java.home", "read"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.runtime.version", "read"; permission java.util.PropertyPermission "java.fullversion", "read"; permission java.lang.RuntimePermission "getProtectionDomain"; permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read"; permission java.io.FilePermission "java.runtime.version", "read"; permission java.io.FilePermission "java.fullversion", "read"; };</source>
<seg-source><mrk mid="0" mtype="seg">// This template policy file gives examples of how to configure the // permissions needed to run a <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> network server with the Java // Security manager.</mrk><mrk mid="1" mtype="seg"> // grant codeBase "${derby.install.url}derby.jar" { // These permissions are needed for everyday, embedded <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> usage.</mrk><mrk mid="2" mtype="seg"> // permission java.lang.RuntimePermission "createClassLoader"; permission java.util.PropertyPermission "derby.*", "read"; permission java.util.PropertyPermission "user.dir", "read"; // The next two properties are used to determine if the VM is 32 or 64 // bit.</mrk><mrk mid="3" mtype="seg"> // permission java.util.PropertyPermission "sun.arch.data.model", "read"; permission java.util.PropertyPermission "os.arch", "read"; permission java.io.FilePermission "${derby.system.home}","read"; permission java.io.FilePermission "${derby.system.home}${/}-", "read,write,delete"; // This permission lets a DBA reload the policy file while the server // is still running.</mrk><mrk mid="4" mtype="seg"> The policy file is reloaded by invoking the // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure.</mrk><mrk mid="5" mtype="seg"> // permission java.security.SecurityPermission "getPolicy"; // This permission lets you backup and restore databases // to and from arbitrary locations in your file system.</mrk><mrk mid="6" mtype="seg"> // // This permission also lets you import/export data to and from // arbitrary locations in your file system.</mrk><mrk mid="7" mtype="seg"> // // You may want to restrict this access to specific directories.</mrk><mrk mid="8" mtype="seg"> // permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read,write,delete"; // Permissions needed for JMX based management and monitoring.</mrk><mrk mid="9" mtype="seg"> // // Allows this code to create an MBeanServer: // permission javax.management.MBeanServerPermission "createMBeanServer"; // // Allows access to <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby.</mrk><mrk mid="10" mtype="seg"> // <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> must be allowed to register and unregister these MBeans.</mrk><mrk mid="11" mtype="seg"> // It is possible to allow access only to specific MBeans, attributes // or operations.</mrk><mrk mid="12" mtype="seg"> To fine tune this permission, see the javadoc of // javax.management.MBeanPermission or the JMX Instrumentation and // Agent Specification.</mrk><mrk mid="13" mtype="seg"> // permission javax.management.MBeanPermission "org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean"; // // Trusts <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these in // the MBean server.</mrk><mrk mid="14" mtype="seg"> // permission javax.management.MBeanTrustPermission "register"; // getProtectionDomain is an optional permission needed for printing // classpath information to derby.log // permission java.lang.RuntimePermission "getProtectionDomain"; // The following permission must be granted for // Connection.abort(Executor) to work.</mrk><mrk mid="15" mtype="seg"> Note that this permission // must also be granted to outer (application) code domains.</mrk><mrk mid="16" mtype="seg"> // permission java.sql.SQLPermission "callAbort"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; }; grant codeBase "${derby.install.url}derbynet.jar" { // This permission lets the Network Server manage connections from // clients.</mrk><mrk mid="17" mtype="seg"> // Accept connections from any host.</mrk><mrk mid="18" mtype="seg"> <bpt id="6" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="6">&lt;/ph&gt;</ept> is listening to the host // interface specified via the -h option to "NetworkServerControl // start" on the command line, via the address parameter to the // org.apache.derby.drda.NetworkServerControl constructor in the API // or via the property derby.drda.host; the default is localhost.</mrk><mrk mid="19" mtype="seg"> // You may want to restrict allowed hosts, e.g. to hosts in a specific // subdomain, e.g. "*.example.com".</mrk><mrk mid="20" mtype="seg"> // permission java.net.SocketPermission "*", "accept"; // Allow the server to listen to the socket on the default port (1527).</mrk><mrk mid="21" mtype="seg"> // If you have specified another port number with the -p option to // "NetworkServerControl start" on the command line, or with the // portNumber parameter to the NetworkServerControl constructor in the // API, or with the property derby.drda.portNumber, you should change // the port number in the permission statement accordingly.</mrk><mrk mid="22" mtype="seg"> // permission java.net.SocketPermission "localhost:1527", "listen"; // Needed for server tracing.</mrk><mrk mid="23" mtype="seg"> // permission java.io.FilePermission "${derby.drda.traceDirectory}${/}-", "read,write,delete"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write"; // JMX: Uncomment this permission to allow the ping operation of the // NetworkServerMBean to connect to the Network Server.</mrk><mrk mid="24" mtype="seg"> // //permission java.net.SocketPermission "*", "connect,resolve"; // Needed by sysinfo.</mrk><mrk mid="25" mtype="seg"> The file permission is needed to // check the existence of jars on the classpath.</mrk><mrk mid="26" mtype="seg"> You can // limit this permission to just the locations which hold // your jar files.</mrk><mrk mid="27" mtype="seg"> // // In this template file, this block of permissions is granted // to derbynet.jar under the assumption that derbynet.jar is // the first jar file in your classpath which contains the // sysinfo classes.</mrk><mrk mid="28" mtype="seg"> If that is not the case, then you will want // to grant this block of permissions to the first jar file // in your classpath which contains the sysinfo classes.</mrk><mrk mid="29" mtype="seg"> // Those classes are bundled into the following <bpt id="7" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="7">&lt;/ph&gt;</ept> // jar files: // // derbynet.jar // derby.jar // derbyclient.jar // derbytools.jar // permission java.util.PropertyPermission "user.*", "read"; permission java.util.PropertyPermission "java.home", "read"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.runtime.version", "read"; permission java.util.PropertyPermission "java.fullversion", "read"; permission java.lang.RuntimePermission "getProtectionDomain"; permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read"; permission java.io.FilePermission "java.runtime.version", "read"; permission java.io.FilePermission "java.fullversion", "read"; };</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// This template policy file gives examples of how to configure the // permissions needed to run a <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> network server with the Java // Security manager.</mrk><mrk mid="1" mtype="seg"> // grant codeBase "${derby.install.url}derby.jar" { // These permissions are needed for everyday, embedded <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> usage.</mrk><mrk mid="2" mtype="seg"> // permission java.lang.RuntimePermission "createClassLoader"; permission java.util.PropertyPermission "derby.*", "read"; permission java.util.PropertyPermission "user.dir", "read"; // The next two properties are used to determine if the VM is 32 or 64 // bit.</mrk><mrk mid="3" mtype="seg"> // permission java.util.PropertyPermission "sun.arch.data.model", "read"; permission java.util.PropertyPermission "os.arch", "read"; permission java.io.FilePermission "${derby.system.home}","read"; permission java.io.FilePermission "${derby.system.home}${/}-", "read,write,delete"; // This permission lets a DBA reload the policy file while the server // is still running.</mrk><mrk mid="4" mtype="seg"> The policy file is reloaded by invoking the // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure.</mrk><mrk mid="5" mtype="seg"> // permission java.security.SecurityPermission "getPolicy"; // This permission lets you backup and restore databases // to and from arbitrary locations in your file system.</mrk><mrk mid="6" mtype="seg"> // // This permission also lets you import/export data to and from // arbitrary locations in your file system.</mrk><mrk mid="7" mtype="seg"> // // You may want to restrict this access to specific directories.</mrk><mrk mid="8" mtype="seg"> // permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read,write,delete"; // Permissions needed for JMX based management and monitoring.</mrk><mrk mid="9" mtype="seg"> // // Allows this code to create an MBeanServer: // permission javax.management.MBeanServerPermission "createMBeanServer"; // // Allows access to <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby.</mrk><mrk mid="10" mtype="seg"> // <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> must be allowed to register and unregister these MBeans.</mrk><mrk mid="11" mtype="seg"> // It is possible to allow access only to specific MBeans, attributes // or operations.</mrk><mrk mid="12" mtype="seg"> To fine tune this permission, see the javadoc of // javax.management.MBeanPermission or the JMX Instrumentation and // Agent Specification.</mrk><mrk mid="13" mtype="seg"> // permission javax.management.MBeanPermission "org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean"; // // Trusts <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these in // the MBean server.</mrk><mrk mid="14" mtype="seg"> // permission javax.management.MBeanTrustPermission "register"; // getProtectionDomain is an optional permission needed for printing // classpath information to derby.log // permission java.lang.RuntimePermission "getProtectionDomain"; // The following permission must be granted for // Connection.abort(Executor) to work.</mrk><mrk mid="15" mtype="seg"> Note that this permission // must also be granted to outer (application) code domains.</mrk><mrk mid="16" mtype="seg"> // permission java.sql.SQLPermission "callAbort"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; }; grant codeBase "${derby.install.url}derbynet.jar" { // This permission lets the Network Server manage connections from // clients.</mrk><mrk mid="17" mtype="seg"> // Accept connections from any host.</mrk><mrk mid="18" mtype="seg"> <bpt id="6" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="6">&lt;/ph&gt;</ept> is listening to the host // interface specified via the -h option to "NetworkServerControl // start" on the command line, via the address parameter to the // org.apache.derby.drda.NetworkServerControl constructor in the API // or via the property derby.drda.host; the default is localhost.</mrk><mrk mid="19" mtype="seg"> // You may want to restrict allowed hosts, e.g. to hosts in a specific // subdomain, e.g. "*.example.com".</mrk><mrk mid="20" mtype="seg"> // permission java.net.SocketPermission "*", "accept"; // Allow the server to listen to the socket on the default port (1527).</mrk><mrk mid="21" mtype="seg"> // If you have specified another port number with the -p option to // "NetworkServerControl start" on the command line, or with the // portNumber parameter to the NetworkServerControl constructor in the // API, or with the property derby.drda.portNumber, you should change // the port number in the permission statement accordingly.</mrk><mrk mid="22" mtype="seg"> // permission java.net.SocketPermission "localhost:1527", "listen"; // Needed for server tracing.</mrk><mrk mid="23" mtype="seg"> // permission java.io.FilePermission "${derby.drda.traceDirectory}${/}-", "read,write,delete"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write"; // JMX: Uncomment this permission to allow the ping operation of the // NetworkServerMBean to connect to the Network Server.</mrk><mrk mid="24" mtype="seg"> // //permission java.net.SocketPermission "*", "connect,resolve"; // Needed by sysinfo.</mrk><mrk mid="25" mtype="seg"> The file permission is needed to // check the existence of jars on the classpath.</mrk><mrk mid="26" mtype="seg"> You can // limit this permission to just the locations which hold // your jar files.</mrk><mrk mid="27" mtype="seg"> // // In this template file, this block of permissions is granted // to derbynet.jar under the assumption that derbynet.jar is // the first jar file in your classpath which contains the // sysinfo classes.</mrk><mrk mid="28" mtype="seg"> If that is not the case, then you will want // to grant this block of permissions to the first jar file // in your classpath which contains the sysinfo classes.</mrk><mrk mid="29" mtype="seg"> // Those classes are bundled into the following <bpt id="7" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="7">&lt;/ph&gt;</ept> // jar files: // // derbynet.jar // derby.jar // derbyclient.jar // derbytools.jar // permission java.util.PropertyPermission "user.*", "read"; permission java.util.PropertyPermission "java.home", "read"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.runtime.version", "read"; permission java.util.PropertyPermission "java.fullversion", "read"; permission java.lang.RuntimePermission "getProtectionDomain"; permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read"; permission java.io.FilePermission "java.runtime.version", "read"; permission java.io.FilePermission "java.fullversion", "read"; };</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
