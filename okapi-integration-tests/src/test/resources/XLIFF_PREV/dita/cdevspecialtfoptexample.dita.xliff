<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="cdevspecialtfoptexample.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Example VTICosting implementation</source>
<seg-source><mrk mid="0" mtype="seg">Example VTICosting implementation</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example VTICosting implementation</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">Once you have measured your table function's cost, you can write the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>VTICosting<ept id="1">&lt;/i&gt;</ept> methods.</source>
<seg-source><mrk mid="0" mtype="seg">Once you have measured your table function's cost, you can write the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>VTICosting<ept id="1">&lt;/i&gt;</ept> methods.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Once you have measured your table function's cost, you can write the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>VTICosting<ept id="1">&lt;/i&gt;</ept> methods.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Functions</source>
<seg-source><mrk mid="0" mtype="seg">Functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Functions</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">VTICosting example</source>
<seg-source><mrk mid="0" mtype="seg">VTICosting example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">VTICosting example</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Optimizer fine-tuning can be added to the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>EmployeeTable<ept id="1">&lt;/i&gt;</ept> table function shown before in <bpt id="2" ctype="x-xref">&lt;xref href="cdevspecialtfexample.dita#cdevspecialtfexample"&gt;</bpt><ept id="2">&lt;/xref&gt;</ept>:</source>
<seg-source><mrk mid="0" mtype="seg">Optimizer fine-tuning can be added to the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>EmployeeTable<ept id="1">&lt;/i&gt;</ept> table function shown before in <bpt id="2" ctype="x-xref">&lt;xref href="cdevspecialtfexample.dita#cdevspecialtfexample"&gt;</bpt><ept id="2">&lt;/xref&gt;</ept>:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Optimizer fine-tuning can be added to the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>EmployeeTable<ept id="1">&lt;/i&gt;</ept> table function shown before in <bpt id="2" ctype="x-xref">&lt;xref href="cdevspecialtfexample.dita#cdevspecialtfexample"&gt;</bpt><ept id="2">&lt;/xref&gt;</ept>:</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">package com.example.hrSchema; import java.io.Serializable; import java.sql.*; import org.apache.derby.vti.VTICosting; import org.apache.derby.vti.VTIEnvironment; /** * Tuned table function. */ public class TunedEmployeeTable extends EmployeeTable implements VTICosting { public TunedEmployeeTable() {} public double getEstimatedRowCount( VTIEnvironment optimizerState ) throws SQLException { return getRowCount( optimizerState ); } public double getEstimatedCostPerInstantiation( VTIEnvironment optimizerState ) throws SQLException { double I = 100.0; // optimizer imprecision double P = 10.0; // cost per row in milliseconds double E = 0.0; // cost of instantiating the external // ResultSet double N = getRowCount( optimizerState ); return I * ( ( P * N ) + E ); } public boolean supportsMultipleInstantiations( VTIEnvironment optimizerState ) throws SQLException { return true; } ////////////////////////////////////////////////////////////////// private double getRowCount( VTIEnvironment optimizerState ) throws SQLException { String ROW_COUNT_KEY = "rowCountKey"; Double estimatedRowCount = (Double) getSharedState( optimizerState, ROW_COUNT_KEY ); if ( estimatedRowCount == null ) { Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement( "select count(*) from hrSchema.EmployeeTable" ); ResultSet rs = ps.executeQuery(); rs.next(); estimatedRowCount = new Double( rs.getDouble( 1 ) ); setSharedState( optimizerState, ROW_COUNT_KEY, estimatedRowCount ); rs.close(); ps.close(); conn.close(); } return estimatedRowCount.doubleValue(); } private Serializable getSharedState( VTIEnvironment optimizerState, String key ) { return (Serializable) optimizerState.getSharedState( key ); } private void setSharedState( VTIEnvironment optimizerState, String key, Serializable value ) { optimizerState.setSharedState( key, value ); } }</source>
<seg-source><mrk mid="0" mtype="seg">package com.example.hrSchema; import java.io.Serializable; import java.sql.*; import org.apache.derby.vti.VTICosting; import org.apache.derby.vti.VTIEnvironment; /** * Tuned table function.</mrk><mrk mid="1" mtype="seg"> */ public class TunedEmployeeTable extends EmployeeTable implements VTICosting { public TunedEmployeeTable() {} public double getEstimatedRowCount( VTIEnvironment optimizerState ) throws SQLException { return getRowCount( optimizerState ); } public double getEstimatedCostPerInstantiation( VTIEnvironment optimizerState ) throws SQLException { double I = 100.0; // optimizer imprecision double P = 10.0; // cost per row in milliseconds double E = 0.0; // cost of instantiating the external // ResultSet double N = getRowCount( optimizerState ); return I * ( ( P * N ) + E ); } public boolean supportsMultipleInstantiations( VTIEnvironment optimizerState ) throws SQLException { return true; } ////////////////////////////////////////////////////////////////// private double getRowCount( VTIEnvironment optimizerState ) throws SQLException { String ROW_COUNT_KEY = "rowCountKey"; Double estimatedRowCount = (Double) getSharedState( optimizerState, ROW_COUNT_KEY ); if ( estimatedRowCount == null ) { Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement( "select count(*) from hrSchema.EmployeeTable" ); ResultSet rs = ps.executeQuery(); rs.next(); estimatedRowCount = new Double( rs.getDouble( 1 ) ); setSharedState( optimizerState, ROW_COUNT_KEY, estimatedRowCount ); rs.close(); ps.close(); conn.close(); } return estimatedRowCount.doubleValue(); } private Serializable getSharedState( VTIEnvironment optimizerState, String key ) { return (Serializable) optimizerState.getSharedState( key ); } private void setSharedState( VTIEnvironment optimizerState, String key, Serializable value ) { optimizerState.setSharedState( key, value ); } }</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">package com.example.hrSchema; import java.io.Serializable; import java.sql.*; import org.apache.derby.vti.VTICosting; import org.apache.derby.vti.VTIEnvironment; /** * Tuned table function.</mrk><mrk mid="1" mtype="seg"> */ public class TunedEmployeeTable extends EmployeeTable implements VTICosting { public TunedEmployeeTable() {} public double getEstimatedRowCount( VTIEnvironment optimizerState ) throws SQLException { return getRowCount( optimizerState ); } public double getEstimatedCostPerInstantiation( VTIEnvironment optimizerState ) throws SQLException { double I = 100.0; // optimizer imprecision double P = 10.0; // cost per row in milliseconds double E = 0.0; // cost of instantiating the external // ResultSet double N = getRowCount( optimizerState ); return I * ( ( P * N ) + E ); } public boolean supportsMultipleInstantiations( VTIEnvironment optimizerState ) throws SQLException { return true; } ////////////////////////////////////////////////////////////////// private double getRowCount( VTIEnvironment optimizerState ) throws SQLException { String ROW_COUNT_KEY = "rowCountKey"; Double estimatedRowCount = (Double) getSharedState( optimizerState, ROW_COUNT_KEY ); if ( estimatedRowCount == null ) { Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement( "select count(*) from hrSchema.EmployeeTable" ); ResultSet rs = ps.executeQuery(); rs.next(); estimatedRowCount = new Double( rs.getDouble( 1 ) ); setSharedState( optimizerState, ROW_COUNT_KEY, estimatedRowCount ); rs.close(); ps.close(); conn.close(); } return estimatedRowCount.doubleValue(); } private Serializable getSharedState( VTIEnvironment optimizerState, String key ) { return (Serializable) optimizerState.getSharedState( key ); } private void setSharedState( VTIEnvironment optimizerState, String key, Serializable value ) { optimizerState.setSharedState( key, value ); } }</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
