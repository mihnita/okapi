<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="cdevconcepts89498.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Pitfalls of sharing a connection among threads</source>
<seg-source><mrk mid="0" mtype="seg">Pitfalls of sharing a connection among threads</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Pitfalls of sharing a connection among threads</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">Here is a review of the potential pitfalls of sharing a single <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> among multiple threads.</source>
<seg-source><mrk mid="0" mtype="seg">Here is a review of the potential pitfalls of sharing a single <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> among multiple threads.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Here is a review of the potential pitfalls of sharing a single <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> among multiple threads.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Committing or rolling back a transaction closes all open <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="1">&lt;/i&gt;</ept> objects and currently executing <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="2">&lt;/i&gt;</ept>, unless you are using held cursors.</source>
<seg-source><mrk mid="0" mtype="seg">Committing or rolling back a transaction closes all open <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="1">&lt;/i&gt;</ept> objects and currently executing <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="2">&lt;/i&gt;</ept>, unless you are using held cursors.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Committing or rolling back a transaction closes all open <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="1">&lt;/i&gt;</ept> objects and currently executing <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="2">&lt;/i&gt;</ept>, unless you are using held cursors.</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">If one thread commits, it closes the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept> and <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="2">&lt;/i&gt;</ept> of all other threads using the same connection.</source>
<seg-source><mrk mid="0" mtype="seg">If one thread commits, it closes the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept> and <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="2">&lt;/i&gt;</ept> of all other threads using the same connection.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If one thread commits, it closes the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept> and <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="2">&lt;/i&gt;</ept> of all other threads using the same connection.</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Executing a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="1">&lt;/i&gt;</ept> automatically closes any existing open <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="2">&lt;/i&gt;</ept> generated by an earlier execution of that <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="3">&lt;/i&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Executing a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="1">&lt;/i&gt;</ept> automatically closes any existing open <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="2">&lt;/i&gt;</ept> generated by an earlier execution of that <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="3">&lt;/i&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Executing a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="1">&lt;/i&gt;</ept> automatically closes any existing open <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="2">&lt;/i&gt;</ept> generated by an earlier execution of that <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="3">&lt;/i&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">If threads share <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept>, one thread could close another's <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSet.<ept id="2">&lt;/i&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg">If threads share <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept>, one thread could close another's <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSet.<ept id="2">&lt;/i&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If threads share <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept>, one thread could close another's <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>ResultSet.<ept id="2">&lt;/i&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">In many cases, it is easier to assign each thread to a distinct <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>. If thread <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>A<ept id="2">&lt;/i&gt;</ept> does database work that is not transactionally related to thread <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>B<ept id="3">&lt;/i&gt;</ept>, assign them to different <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>Connections<ept id="4">&lt;/i&gt;</ept>. For example, if thread <bpt id="5" ctype="x-i">&lt;i&gt;</bpt>A<ept id="5">&lt;/i&gt;</ept> is associated with a user input window that allows users to delete hotels and thread <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>B<ept id="6">&lt;/i&gt;</ept> is associated with a user window that allows users to view city information, assign those threads to different <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>Connections<ept id="7">&lt;/i&gt;</ept>. That way, when thread <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>A<ept id="8">&lt;/i&gt;</ept> commits, it does not affect any <bpt id="9" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="9">&lt;/i&gt;</ept> or <bpt id="10" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="10">&lt;/i&gt;</ept> of thread B.</source>
<seg-source><mrk mid="0" mtype="seg">In many cases, it is easier to assign each thread to a distinct <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> If thread <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>A<ept id="2">&lt;/i&gt;</ept> does database work that is not transactionally related to thread <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>B<ept id="3">&lt;/i&gt;</ept>, assign them to different <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>Connections<ept id="4">&lt;/i&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> For example, if thread <bpt id="5" ctype="x-i">&lt;i&gt;</bpt>A<ept id="5">&lt;/i&gt;</ept> is associated with a user input window that allows users to delete hotels and thread <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>B<ept id="6">&lt;/i&gt;</ept> is associated with a user window that allows users to view city information, assign those threads to different <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>Connections<ept id="7">&lt;/i&gt;</ept>.</mrk><mrk mid="3" mtype="seg"> That way, when thread <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>A<ept id="8">&lt;/i&gt;</ept> commits, it does not affect any <bpt id="9" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="9">&lt;/i&gt;</ept> or <bpt id="10" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="10">&lt;/i&gt;</ept> of thread B.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In many cases, it is easier to assign each thread to a distinct <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> If thread <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>A<ept id="2">&lt;/i&gt;</ept> does database work that is not transactionally related to thread <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>B<ept id="3">&lt;/i&gt;</ept>, assign them to different <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>Connections<ept id="4">&lt;/i&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> For example, if thread <bpt id="5" ctype="x-i">&lt;i&gt;</bpt>A<ept id="5">&lt;/i&gt;</ept> is associated with a user input window that allows users to delete hotels and thread <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>B<ept id="6">&lt;/i&gt;</ept> is associated with a user window that allows users to view city information, assign those threads to different <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>Connections<ept id="7">&lt;/i&gt;</ept>.</mrk><mrk mid="3" mtype="seg"> That way, when thread <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>A<ept id="8">&lt;/i&gt;</ept> commits, it does not affect any <bpt id="9" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="9">&lt;/i&gt;</ept> or <bpt id="10" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="10">&lt;/i&gt;</ept> of thread B.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">Another strategy is to have one thread do queries and another thread do updates. Queries hold shared locks until the transaction commits in SERIALIZABLE isolation mode; use READ_COMMITTED instead.</source>
<seg-source><mrk mid="0" mtype="seg">Another strategy is to have one thread do queries and another thread do updates.</mrk><mrk mid="1" mtype="seg"> Queries hold shared locks until the transaction commits in SERIALIZABLE isolation mode; use READ_COMMITTED instead.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Another strategy is to have one thread do queries and another thread do updates.</mrk><mrk mid="1" mtype="seg"> Queries hold shared locks until the transaction commits in SERIALIZABLE isolation mode; use READ_COMMITTED instead.</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">Yet another strategy is to have only one thread do database access. Have other threads get information from the database access thread.</source>
<seg-source><mrk mid="0" mtype="seg">Yet another strategy is to have only one thread do database access.</mrk><mrk mid="1" mtype="seg"> Have other threads get information from the database access thread.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Yet another strategy is to have only one thread do database access.</mrk><mrk mid="1" mtype="seg"> Have other threads get information from the database access thread.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">Multiple threads are permitted to share a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>, <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="2">&lt;/i&gt;</ept>, or <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="3">&lt;/i&gt;</ept>. However, the application programmer must ensure that one thread does not affect the behavior of the others.</source>
<seg-source><mrk mid="0" mtype="seg">Multiple threads are permitted to share a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>, <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="2">&lt;/i&gt;</ept>, or <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="3">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> However, the application programmer must ensure that one thread does not affect the behavior of the others.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Multiple threads are permitted to share a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>, <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Statement<ept id="2">&lt;/i&gt;</ept>, or <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>ResultSet<ept id="3">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> However, the application programmer must ensure that one thread does not affect the behavior of the others.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">Recommended Practices</source>
<seg-source><mrk mid="0" mtype="seg">Recommended Practices</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Recommended Practices</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">Here are some tips for avoiding unexpected behavior:</source>
<seg-source><mrk mid="0" mtype="seg">Here are some tips for avoiding unexpected behavior:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Here are some tips for avoiding unexpected behavior:</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">Avoid sharing <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept> (and their <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>) among threads.</source>
<seg-source><mrk mid="0" mtype="seg">Avoid sharing <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept> (and their <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>) among threads.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Avoid sharing <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="1">&lt;/i&gt;</ept> (and their <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>) among threads.</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">Each time a thread executes a<bpt id="1" ctype="x-i">&lt;i&gt;</bpt> Statement<ept id="1">&lt;/i&gt;</ept>, it should process the results before relinquishing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Each time a thread executes a<bpt id="1" ctype="x-i">&lt;i&gt;</bpt> Statement<ept id="1">&lt;/i&gt;</ept>, it should process the results before relinquishing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Each time a thread executes a<bpt id="1" ctype="x-i">&lt;i&gt;</bpt> Statement<ept id="1">&lt;/i&gt;</ept>, it should process the results before relinquishing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">Each time a thread accesses the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>, it should consistently commit or not, depending on application protocol.</source>
<seg-source><mrk mid="0" mtype="seg">Each time a thread accesses the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>, it should consistently commit or not, depending on application protocol.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Each time a thread accesses the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept>, it should consistently commit or not, depending on application protocol.</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">Have one thread be the "managing" database <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> thread that should handle the higher-level tasks, such as establishing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>, committing, rolling back, changing <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="5" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="5">&lt;/i&gt;</ept><ept id="4">&lt;/codeph&gt;</ept> properties such as auto-commit, closing the <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="7" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="7">&lt;/i&gt;</ept><ept id="6">&lt;/codeph&gt;</ept>, shutting down the database (in an embedded environment), and so on.</source>
<seg-source><mrk mid="0" mtype="seg">Have one thread be the "managing" database <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> thread that should handle the higher-level tasks, such as establishing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>, committing, rolling back, changing <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="5" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="5">&lt;/i&gt;</ept><ept id="4">&lt;/codeph&gt;</ept> properties such as auto-commit, closing the <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="7" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="7">&lt;/i&gt;</ept><ept id="6">&lt;/codeph&gt;</ept>, shutting down the database (in an embedded environment), and so on.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Have one thread be the "managing" database <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> thread that should handle the higher-level tasks, such as establishing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept>, committing, rolling back, changing <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="5" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="5">&lt;/i&gt;</ept><ept id="4">&lt;/codeph&gt;</ept> properties such as auto-commit, closing the <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="7" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="7">&lt;/i&gt;</ept><ept id="6">&lt;/codeph&gt;</ept>, shutting down the database (in an embedded environment), and so on.</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">Close <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="1">&lt;/i&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept> that are no longer needed in order to release resources.</source>
<seg-source><mrk mid="0" mtype="seg">Close <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="1">&lt;/i&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept> that are no longer needed in order to release resources.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Close <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>ResultSets<ept id="1">&lt;/i&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Statements<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/codeph&gt;</ept> that are no longer needed in order to release resources.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
