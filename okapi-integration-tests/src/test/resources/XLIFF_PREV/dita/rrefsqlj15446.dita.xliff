<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefsqlj15446.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">CREATE VIEW statement</source>
<seg-source><mrk mid="0" mtype="seg">CREATE VIEW statement</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CREATE VIEW statement</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">CREATE VIEW statement</source>
<seg-source><mrk mid="0" mtype="seg">CREATE VIEW statement</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CREATE VIEW statement</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">SQL statements</source>
<seg-source><mrk mid="0" mtype="seg">SQL statements</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL statements</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">CREATE VIEW</source>
<seg-source><mrk mid="0" mtype="seg">CREATE VIEW</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CREATE VIEW</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">views</source>
<seg-source><mrk mid="0" mtype="seg">views</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">views</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">creating</source>
<seg-source><mrk mid="0" mtype="seg">creating</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">creating</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">Views are virtual tables formed by a query. A view is a dictionary object that you can use until you drop it. Views are not updatable.</source>
<seg-source><mrk mid="0" mtype="seg">Views are virtual tables formed by a query.</mrk><mrk mid="1" mtype="seg"> A view is a dictionary object that you can use until you drop it.</mrk><mrk mid="2" mtype="seg"> Views are not updatable.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Views are virtual tables formed by a query.</mrk><mrk mid="1" mtype="seg"> A view is a dictionary object that you can use until you drop it.</mrk><mrk mid="2" mtype="seg"> Views are not updatable.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">If a qualified view name is specified, the schema name cannot begin with <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>SYS<ept id="1">&lt;/i&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">If a qualified view name is specified, the schema name cannot begin with <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>SYS<ept id="1">&lt;/i&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If a qualified view name is specified, the schema name cannot begin with <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>SYS<ept id="1">&lt;/i&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">A view operates with the privileges of the owner of the view. See "Using SQL standard authorization" and "Privileges on views, triggers, and constraints" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> for details.</source>
<seg-source><mrk mid="0" mtype="seg">A view operates with the privileges of the owner of the view.</mrk><mrk mid="1" mtype="seg"> See "Using SQL standard authorization" and "Privileges on views, triggers, and constraints" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> for details.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A view operates with the privileges of the owner of the view.</mrk><mrk mid="1" mtype="seg"> See "Using SQL standard authorization" and "Privileges on views, triggers, and constraints" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> for details.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">The view owner automatically gains the SELECT privilege on the view. The SELECT privilege cannot be revoked from the view owner. The <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> automatically gains the SELECT privilege on the view and is able to grant this privilege to other users. The SELECT privilege cannot be revoked from the database owner.</source>
<seg-source><mrk mid="0" mtype="seg">The view owner automatically gains the SELECT privilege on the view.</mrk><mrk mid="1" mtype="seg"> The SELECT privilege cannot be revoked from the view owner.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> automatically gains the SELECT privilege on the view and is able to grant this privilege to other users.</mrk><mrk mid="3" mtype="seg"> The SELECT privilege cannot be revoked from the database owner.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The view owner automatically gains the SELECT privilege on the view.</mrk><mrk mid="1" mtype="seg"> The SELECT privilege cannot be revoked from the view owner.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> automatically gains the SELECT privilege on the view and is able to grant this privilege to other users.</mrk><mrk mid="3" mtype="seg"> The SELECT privilege cannot be revoked from the database owner.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">The view owner can only grant the SELECT privilege to other users if the view owner also owns the underlying objects.</source>
<seg-source><mrk mid="0" mtype="seg">The view owner can only grant the SELECT privilege to other users if the view owner also owns the underlying objects.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The view owner can only grant the SELECT privilege to other users if the view owner also owns the underlying objects.</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">If the underlying objects that the view references are not owned by the view owner, the view owner must be granted the appropriate privileges. For example, if the authorization ID <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>user2<ept id="1">&lt;/codeph&gt;</ept> attempts to create a view called <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>user2.v2<ept id="2">&lt;/codeph&gt;</ept> that references table <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.t1<ept id="3">&lt;/codeph&gt;</ept> and function <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.f_abs()<ept id="4">&lt;/codeph&gt;</ept>, then <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>user2<ept id="5">&lt;/codeph&gt;</ept> must have the SELECT privilege on table <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.t1<ept id="6">&lt;/codeph&gt;</ept> and the EXECUTE privilege on function <bpt id="7" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.f_abs()<ept id="7">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">If the underlying objects that the view references are not owned by the view owner, the view owner must be granted the appropriate privileges.</mrk><mrk mid="1" mtype="seg"> For example, if the authorization ID <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>user2<ept id="1">&lt;/codeph&gt;</ept> attempts to create a view called <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>user2.v2<ept id="2">&lt;/codeph&gt;</ept> that references table <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.t1<ept id="3">&lt;/codeph&gt;</ept> and function <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.f_abs()<ept id="4">&lt;/codeph&gt;</ept>, then <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>user2<ept id="5">&lt;/codeph&gt;</ept> must have the SELECT privilege on table <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.t1<ept id="6">&lt;/codeph&gt;</ept> and the EXECUTE privilege on function <bpt id="7" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.f_abs()<ept id="7">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If the underlying objects that the view references are not owned by the view owner, the view owner must be granted the appropriate privileges.</mrk><mrk mid="1" mtype="seg"> For example, if the authorization ID <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>user2<ept id="1">&lt;/codeph&gt;</ept> attempts to create a view called <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>user2.v2<ept id="2">&lt;/codeph&gt;</ept> that references table <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.t1<ept id="3">&lt;/codeph&gt;</ept> and function <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.f_abs()<ept id="4">&lt;/codeph&gt;</ept>, then <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>user2<ept id="5">&lt;/codeph&gt;</ept> must have the SELECT privilege on table <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.t1<ept id="6">&lt;/codeph&gt;</ept> and the EXECUTE privilege on function <bpt id="7" ctype="x-codeph">&lt;codeph&gt;</bpt>user1.f_abs()<ept id="7">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">The privilege to grant the SELECT privilege cannot be revoked. If a required privilege on one of the underlying objects that the view references is revoked, then the view is dropped.</source>
<seg-source><mrk mid="0" mtype="seg">The privilege to grant the SELECT privilege cannot be revoked.</mrk><mrk mid="1" mtype="seg"> If a required privilege on one of the underlying objects that the view references is revoked, then the view is dropped.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The privilege to grant the SELECT privilege cannot be revoked.</mrk><mrk mid="1" mtype="seg"> If a required privilege on one of the underlying objects that the view references is revoked, then the view is dropped.</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE VIEW <bpt id="2" ctype="x-i">&lt;i&gt;</bpt><bpt id="3" ctype="x-xref">&lt;xref href="rrefviewname.dita#rrefviewname"&gt;</bpt>viewName<ept id="3">&lt;/xref&gt;</ept><ept id="2">&lt;/i&gt;</ept> [ ( <bpt id="4" ctype="x-i">&lt;i&gt;</bpt><bpt id="5" ctype="x-xref">&lt;xref href="rrefsimplecolumnname.dita#rrefsimplecolumnname"&gt;</bpt>simpleColumnName<ept id="5">&lt;/xref&gt;</ept><ept id="4">&lt;/i&gt;</ept> [ , <bpt id="6" ctype="x-i">&lt;i&gt;</bpt><bpt id="7" ctype="x-xref">&lt;xref
href="rrefsimplecolumnname.dita#rrefsimplecolumnname"&gt;</bpt>simpleColumnName<ept id="7">&lt;/xref&gt;</ept><ept id="6">&lt;/i&gt;</ept> ]* ) ] AS <bpt id="8" ctype="x-i">&lt;i&gt;</bpt><bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj21571.dita#rrefsqlj21571"&gt;</bpt>query<ept id="9">&lt;/xref&gt;</ept><ept id="8">&lt;/i&gt;</ept> [ <bpt id="10" ctype="x-i">&lt;i&gt;</bpt><bpt id="11" ctype="x-xref">&lt;xref href="rrefsqlj13658.dita#rrefsqlj13658"&gt;</bpt>ORDER BY clause<ept id="11">&lt;/xref&gt;</ept><ept id="10">&lt;/i&gt;</ept> ] [ <bpt id="12" ctype="x-i">&lt;i&gt;</bpt><bpt id="13" ctype="x-xref">&lt;xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch"&gt;</bpt>result offset clause<ept id="13">&lt;/xref&gt;</ept><ept id="12">&lt;/i&gt;</ept> ] [ <bpt id="14" ctype="x-i">&lt;i&gt;</bpt><bpt id="15" ctype="x-xref">&lt;xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch"&gt;</bpt>fetch first clause<ept id="15">&lt;/xref&gt;</ept><ept id="14">&lt;/i&gt;</ept> ] <ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE VIEW <bpt id="2" ctype="x-i">&lt;i&gt;</bpt><bpt id="3" ctype="x-xref">&lt;xref href="rrefviewname.dita#rrefviewname"&gt;</bpt>viewName<ept id="3">&lt;/xref&gt;</ept><ept id="2">&lt;/i&gt;</ept> [ ( <bpt id="4" ctype="x-i">&lt;i&gt;</bpt><bpt id="5" ctype="x-xref">&lt;xref href="rrefsimplecolumnname.dita#rrefsimplecolumnname"&gt;</bpt>simpleColumnName<ept id="5">&lt;/xref&gt;</ept><ept id="4">&lt;/i&gt;</ept> [ , <bpt id="6" ctype="x-i">&lt;i&gt;</bpt><bpt id="7" ctype="x-xref">&lt;xref
href="rrefsimplecolumnname.dita#rrefsimplecolumnname"&gt;</bpt>simpleColumnName<ept id="7">&lt;/xref&gt;</ept><ept id="6">&lt;/i&gt;</ept> ]* ) ] AS <bpt id="8" ctype="x-i">&lt;i&gt;</bpt><bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj21571.dita#rrefsqlj21571"&gt;</bpt>query<ept id="9">&lt;/xref&gt;</ept><ept id="8">&lt;/i&gt;</ept> [ <bpt id="10" ctype="x-i">&lt;i&gt;</bpt><bpt id="11" ctype="x-xref">&lt;xref href="rrefsqlj13658.dita#rrefsqlj13658"&gt;</bpt>ORDER BY clause<ept id="11">&lt;/xref&gt;</ept><ept id="10">&lt;/i&gt;</ept> ] [ <bpt id="12" ctype="x-i">&lt;i&gt;</bpt><bpt id="13" ctype="x-xref">&lt;xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch"&gt;</bpt>result offset clause<ept id="13">&lt;/xref&gt;</ept><ept id="12">&lt;/i&gt;</ept> ] [ <bpt id="14" ctype="x-i">&lt;i&gt;</bpt><bpt id="15" ctype="x-xref">&lt;xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch"&gt;</bpt>fetch first clause<ept id="15">&lt;/xref&gt;</ept><ept id="14">&lt;/i&gt;</ept> ] <ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE VIEW <bpt id="2" ctype="x-i">&lt;i&gt;</bpt><bpt id="3" ctype="x-xref">&lt;xref href="rrefviewname.dita#rrefviewname"&gt;</bpt>viewName<ept id="3">&lt;/xref&gt;</ept><ept id="2">&lt;/i&gt;</ept> [ ( <bpt id="4" ctype="x-i">&lt;i&gt;</bpt><bpt id="5" ctype="x-xref">&lt;xref href="rrefsimplecolumnname.dita#rrefsimplecolumnname"&gt;</bpt>simpleColumnName<ept id="5">&lt;/xref&gt;</ept><ept id="4">&lt;/i&gt;</ept> [ , <bpt id="6" ctype="x-i">&lt;i&gt;</bpt><bpt id="7" ctype="x-xref">&lt;xref
href="rrefsimplecolumnname.dita#rrefsimplecolumnname"&gt;</bpt>simpleColumnName<ept id="7">&lt;/xref&gt;</ept><ept id="6">&lt;/i&gt;</ept> ]* ) ] AS <bpt id="8" ctype="x-i">&lt;i&gt;</bpt><bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj21571.dita#rrefsqlj21571"&gt;</bpt>query<ept id="9">&lt;/xref&gt;</ept><ept id="8">&lt;/i&gt;</ept> [ <bpt id="10" ctype="x-i">&lt;i&gt;</bpt><bpt id="11" ctype="x-xref">&lt;xref href="rrefsqlj13658.dita#rrefsqlj13658"&gt;</bpt>ORDER BY clause<ept id="11">&lt;/xref&gt;</ept><ept id="10">&lt;/i&gt;</ept> ] [ <bpt id="12" ctype="x-i">&lt;i&gt;</bpt><bpt id="13" ctype="x-xref">&lt;xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch"&gt;</bpt>result offset clause<ept id="13">&lt;/xref&gt;</ept><ept id="12">&lt;/i&gt;</ept> ] [ <bpt id="14" ctype="x-i">&lt;i&gt;</bpt><bpt id="15" ctype="x-xref">&lt;xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch"&gt;</bpt>fetch first clause<ept id="15">&lt;/xref&gt;</ept><ept id="14">&lt;/i&gt;</ept> ] <ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">A view definition can contain an optional view column list to explicitly name the columns in the view. If there is no column list, the view inherits the column names from the underlying query. All columns in a view must be uniquely named.</source>
<seg-source><mrk mid="0" mtype="seg">A view definition can contain an optional view column list to explicitly name the columns in the view.</mrk><mrk mid="1" mtype="seg"> If there is no column list, the view inherits the column names from the underlying query.</mrk><mrk mid="2" mtype="seg"> All columns in a view must be uniquely named.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A view definition can contain an optional view column list to explicitly name the columns in the view.</mrk><mrk mid="1" mtype="seg"> If there is no column list, the view inherits the column names from the underlying query.</mrk><mrk mid="2" mtype="seg"> All columns in a view must be uniquely named.</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">Examples</source>
<seg-source><mrk mid="0" mtype="seg">Examples</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Examples</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE VIEW SAMP.V1 (COL_SUM, COL_DIFF) AS SELECT COMM + BONUS, COMM - BONUS FROM SAMP.EMPLOYEE; CREATE VIEW SAMP.VEMP_RES (RESUME) AS VALUES 'Delores M. Quintana', 'Heather A. Nicholls', 'Bruce Adamson'; CREATE VIEW SAMP.PROJ_COMBO (PROJNO, PRENDATE, PRSTAFF, MAJPROJ) AS SELECT PROJNO, PRENDATE, PRSTAFF, MAJPROJ FROM SAMP.PROJECT UNION ALL SELECT PROJNO, EMSTDATE, EMPTIME, EMPNO FROM SAMP.EMP_ACT WHERE EMPNO IS NOT NULL;<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE VIEW SAMP.V1 (COL_SUM, COL_DIFF) AS SELECT COMM + BONUS, COMM - BONUS FROM SAMP.EMPLOYEE; CREATE VIEW SAMP.VEMP_RES (RESUME) AS VALUES 'Delores M. Quintana', 'Heather A. Nicholls', 'Bruce Adamson'; CREATE VIEW SAMP.PROJ_COMBO (PROJNO, PRENDATE, PRSTAFF, MAJPROJ) AS SELECT PROJNO, PRENDATE, PRSTAFF, MAJPROJ FROM SAMP.PROJECT UNION ALL SELECT PROJNO, EMSTDATE, EMPTIME, EMPNO FROM SAMP.EMP_ACT WHERE EMPNO IS NOT NULL;<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE VIEW SAMP.V1 (COL_SUM, COL_DIFF) AS SELECT COMM + BONUS, COMM - BONUS FROM SAMP.EMPLOYEE; CREATE VIEW SAMP.VEMP_RES (RESUME) AS VALUES 'Delores M. Quintana', 'Heather A. Nicholls', 'Bruce Adamson'; CREATE VIEW SAMP.PROJ_COMBO (PROJNO, PRENDATE, PRSTAFF, MAJPROJ) AS SELECT PROJNO, PRENDATE, PRSTAFF, MAJPROJ FROM SAMP.PROJECT UNION ALL SELECT PROJNO, EMSTDATE, EMPTIME, EMPNO FROM SAMP.EMP_ACT WHERE EMPNO IS NOT NULL;<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">Statement dependency system</source>
<seg-source><mrk mid="0" mtype="seg">Statement dependency system</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Statement dependency system</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">View definitions are dependent on the tables and views referenced within the view definition. DML (data manipulation language) statements that contain view references depend on those views, as well as the objects in the view definitions that the views are dependent on. Statements that reference the view depend on indexes the view uses; which index a view uses can change from statement to statement based on how the query is optimized. For example, given:</source>
<seg-source><mrk mid="0" mtype="seg">View definitions are dependent on the tables and views referenced within the view definition.</mrk><mrk mid="1" mtype="seg"> DML (data manipulation language) statements that contain view references depend on those views, as well as the objects in the view definitions that the views are dependent on.</mrk><mrk mid="2" mtype="seg"> Statements that reference the view depend on indexes the view uses; which index a view uses can change from statement to statement based on how the query is optimized.</mrk><mrk mid="3" mtype="seg"> For example, given:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">View definitions are dependent on the tables and views referenced within the view definition.</mrk><mrk mid="1" mtype="seg"> DML (data manipulation language) statements that contain view references depend on those views, as well as the objects in the view definitions that the views are dependent on.</mrk><mrk mid="2" mtype="seg"> Statements that reference the view depend on indexes the view uses; which index a view uses can change from statement to statement based on how the query is optimized.</mrk><mrk mid="3" mtype="seg"> For example, given:</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE T1 (C1 DOUBLE PRECISION); CREATE FUNCTION SIN (DATA DOUBLE) RETURNS DOUBLE EXTERNAL NAME 'java.lang.Math.sin' LANGUAGE JAVA PARAMETER STYLE JAVA; CREATE VIEW V1 (C1) AS SELECT SIN(C1) FROM T1;<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE T1 (C1 DOUBLE PRECISION); CREATE FUNCTION SIN (DATA DOUBLE) RETURNS DOUBLE EXTERNAL NAME 'java.lang.Math.sin' LANGUAGE JAVA PARAMETER STYLE JAVA; CREATE VIEW V1 (C1) AS SELECT SIN(C1) FROM T1;<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE T1 (C1 DOUBLE PRECISION); CREATE FUNCTION SIN (DATA DOUBLE) RETURNS DOUBLE EXTERNAL NAME 'java.lang.Math.sin' LANGUAGE JAVA PARAMETER STYLE JAVA; CREATE VIEW V1 (C1) AS SELECT SIN(C1) FROM T1;<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">the following SELECT:</source>
<seg-source><mrk mid="0" mtype="seg">the following SELECT:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">the following SELECT:</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT * FROM V1 <ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT * FROM V1 <ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT * FROM V1 <ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">is dependent on view <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>V1<ept id="1">&lt;/i&gt;</ept>, table <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>T1,<ept id="2">&lt;/i&gt;</ept> and external scalar function <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>SIN.<ept id="3">&lt;/i&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg">is dependent on view <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>V1<ept id="1">&lt;/i&gt;</ept>, table <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>T1,<ept id="2">&lt;/i&gt;</ept> and external scalar function <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>SIN.<ept id="3">&lt;/i&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">is dependent on view <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>V1<ept id="1">&lt;/i&gt;</ept>, table <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>T1,<ept id="2">&lt;/i&gt;</ept> and external scalar function <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>SIN.<ept id="3">&lt;/i&gt;</ept></mrk></target>
</trans-unit>
</body>
</file>
</xliff>
