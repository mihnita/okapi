<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefsqlj57924.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">CHAR FOR BIT DATA data type</source>
<seg-source><mrk mid="0" mtype="seg">CHAR FOR BIT DATA data type</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CHAR FOR BIT DATA data type</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">CHAR FOR BIT DATA data type</source>
<seg-source><mrk mid="0" mtype="seg">CHAR FOR BIT DATA data type</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CHAR FOR BIT DATA data type</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">A CHAR FOR BIT DATA type allows you to store byte strings of a specified length. It is useful for unstructured data where character strings are not appropriate.</source>
<seg-source><mrk mid="0" mtype="seg">A CHAR FOR BIT DATA type allows you to store byte strings of a specified length.</mrk><mrk mid="1" mtype="seg"> It is useful for unstructured data where character strings are not appropriate.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A CHAR FOR BIT DATA type allows you to store byte strings of a specified length.</mrk><mrk mid="1" mtype="seg"> It is useful for unstructured data where character strings are not appropriate.</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{ CHAR | CHARACTER }[(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>length<ept id="2">&lt;/i&gt;</ept>)] FOR BIT DATA<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{ CHAR | CHARACTER }[(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>length<ept id="2">&lt;/i&gt;</ept>)] FOR BIT DATA<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{ CHAR | CHARACTER }[(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>length<ept id="2">&lt;/i&gt;</ept>)] FOR BIT DATA<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en"><bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> is an unsigned integer literal designating the length in bytes.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> is an unsigned integer literal designating the length in bytes.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> is an unsigned integer literal designating the length in bytes.</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">The default <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> for a CHAR FOR BIT DATA type is 1., and the maximum size of <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>length<ept id="2">&lt;/i&gt;</ept> is 254 bytes.</source>
<seg-source><mrk mid="0" mtype="seg">The default <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> for a CHAR FOR BIT DATA type is 1., and the maximum size of <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>length<ept id="2">&lt;/i&gt;</ept> is 254 bytes.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The default <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> for a CHAR FOR BIT DATA type is 1., and the maximum size of <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>length<ept id="2">&lt;/i&gt;</ept> is 254 bytes.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">JDBC metadata type (java.sql.Types)</source>
<seg-source><mrk mid="0" mtype="seg">JDBC metadata type (java.sql.Types)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC metadata type (java.sql.Types)</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">BINARY</source>
<seg-source><mrk mid="0" mtype="seg">BINARY</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">BINARY</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">CHAR FOR BIT DATA stores fixed-length byte strings. If a CHAR FOR BIT DATA value is smaller than the target CHAR FOR BIT DATA, it is padded with a 0x20 byte value.</source>
<seg-source><mrk mid="0" mtype="seg">CHAR FOR BIT DATA stores fixed-length byte strings.</mrk><mrk mid="1" mtype="seg"> If a CHAR FOR BIT DATA value is smaller than the target CHAR FOR BIT DATA, it is padded with a 0x20 byte value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CHAR FOR BIT DATA stores fixed-length byte strings.</mrk><mrk mid="1" mtype="seg"> If a CHAR FOR BIT DATA value is smaller than the target CHAR FOR BIT DATA, it is padded with a 0x20 byte value.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">Comparisons of CHAR FOR BIT DATA and VARCHAR FOR BIT DATA values are precise. For two bit strings to be equal, they must be <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>exactly<ept id="1">&lt;/i&gt;</ept> the same length. (This differs from the way some other DBMSs handle BINARY values but works as specified in SQL-92.)</source>
<seg-source><mrk mid="0" mtype="seg">Comparisons of CHAR FOR BIT DATA and VARCHAR FOR BIT DATA values are precise.</mrk><mrk mid="1" mtype="seg"> For two bit strings to be equal, they must be <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>exactly<ept id="1">&lt;/i&gt;</ept> the same length.</mrk><mrk mid="2" mtype="seg"> (This differs from the way some other DBMSs handle BINARY values but works as specified in SQL-92.)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Comparisons of CHAR FOR BIT DATA and VARCHAR FOR BIT DATA values are precise.</mrk><mrk mid="1" mtype="seg"> For two bit strings to be equal, they must be <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>exactly<ept id="1">&lt;/i&gt;</ept> the same length.</mrk><mrk mid="2" mtype="seg"> (This differs from the way some other DBMSs handle BINARY values but works as specified in SQL-92.)</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">An operation on a VARCHAR FOR BIT DATA and a CHAR FOR BIT DATA value (e.g., a concatenation) yields a VARCHAR FOR BIT DATA value.</source>
<seg-source><mrk mid="0" mtype="seg">An operation on a VARCHAR FOR BIT DATA and a CHAR FOR BIT DATA value (e.g., a concatenation) yields a VARCHAR FOR BIT DATA value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">An operation on a VARCHAR FOR BIT DATA and a CHAR FOR BIT DATA value (e.g., a concatenation) yields a VARCHAR FOR BIT DATA value.</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE t (b CHAR(2) FOR BIT DATA); INSERT INTO t VALUES (X'DE'); SELECT * FROM t; <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- yields the following output<ept id="2">&lt;/ph&gt;</ept> B ----- de20<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE t (b CHAR(2) FOR BIT DATA); INSERT INTO t VALUES (X'DE'); SELECT * FROM t; <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- yields the following output<ept id="2">&lt;/ph&gt;</ept> B ----- de20<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE t (b CHAR(2) FOR BIT DATA); INSERT INTO t VALUES (X'DE'); SELECT * FROM t; <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- yields the following output<ept id="2">&lt;/ph&gt;</ept> B ----- de20<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
</body>
</file>
</xliff>
