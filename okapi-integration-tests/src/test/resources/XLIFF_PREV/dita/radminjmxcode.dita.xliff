<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="radminjmxcode.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Using custom Java code to access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans</source>
<seg-source><mrk mid="0" mtype="seg">Using custom Java code to access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Using custom Java code to access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">In addition to using a tool like JConsole, you can also access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans from a Java application.</source>
<seg-source><mrk mid="0" mtype="seg">In addition to using a tool like JConsole, you can also access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans from a Java application.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In addition to using a tool like JConsole, you can also access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans from a Java application.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Java Management Extensions (JMX) technology</source>
<seg-source><mrk mid="0" mtype="seg">Java Management Extensions (JMX) technology</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Java Management Extensions (JMX) technology</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">JMX</source>
<seg-source><mrk mid="0" mtype="seg">JMX</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JMX</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">using custom Java code</source>
<seg-source><mrk mid="0" mtype="seg">using custom Java code</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">using custom Java code</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">How to do this may depend on how you configure the JVM that is running <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>, how you configure user authentication and authorization, or the host(s) from which you want to access the MBeans.</source>
<seg-source><mrk mid="0" mtype="seg">How to do this may depend on how you configure the JVM that is running <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>, how you configure user authentication and authorization, or the host(s) from which you want to access the MBeans.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">How to do this may depend on how you configure the JVM that is running <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>, how you configure user authentication and authorization, or the host(s) from which you want to access the MBeans.</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">This section has some example code to help you get started. You will find the JMX classes you need in the packages <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management.remote<ept id="2">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">This section has some example code to help you get started.</mrk><mrk mid="1" mtype="seg"> You will find the JMX classes you need in the packages <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management.remote<ept id="2">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This section has some example code to help you get started.</mrk><mrk mid="1" mtype="seg"> You will find the JMX classes you need in the packages <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management.remote<ept id="2">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">You do not need any <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> libraries in the JMX client application's classpath (unless MBean proxies are used).</source>
<seg-source><mrk mid="0" mtype="seg">You do not need any <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> libraries in the JMX client application's classpath (unless MBean proxies are used).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You do not need any <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> libraries in the JMX client application's classpath (unless MBean proxies are used).</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">Connecting to the MBean Server</source>
<seg-source><mrk mid="0" mtype="seg">Connecting to the MBean Server</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Connecting to the MBean Server</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> will attempt to register its MBeans with the platform MBean server of the JVM running the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system (embedded or Network Server). The following examples assume that you have configured the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> JVM to enable remote JMX, which means that you have set a port number (<bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>com.sun.management.jmxremote.port<ept id="4">&lt;/codeph&gt;</ept>) to be used by the JMX Server Connector.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> will attempt to register its MBeans with the platform MBean server of the JVM running the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system (embedded or Network Server).</mrk><mrk mid="1" mtype="seg"> The following examples assume that you have configured the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> JVM to enable remote JMX, which means that you have set a port number (<bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>com.sun.management.jmxremote.port<ept id="4">&lt;/codeph&gt;</ept>) to be used by the JMX Server Connector.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> will attempt to register its MBeans with the platform MBean server of the JVM running the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system (embedded or Network Server).</mrk><mrk mid="1" mtype="seg"> The following examples assume that you have configured the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> JVM to enable remote JMX, which means that you have set a port number (<bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>com.sun.management.jmxremote.port<ept id="4">&lt;/codeph&gt;</ept>) to be used by the JMX Server Connector.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">The examples below assume that the port configured for remote JMX is 9999, that the host name of the host running <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> is <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>example.com<ept id="2">&lt;/codeph&gt;</ept>, and that this host is reachable from the client host. (This host name is fictitious, and is used for example purposes only.)</source>
<seg-source><mrk mid="0" mtype="seg">The examples below assume that the port configured for remote JMX is 9999, that the host name of the host running <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> is <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>example.com<ept id="2">&lt;/codeph&gt;</ept>, and that this host is reachable from the client host.</mrk><mrk mid="1" mtype="seg"> (This host name is fictitious, and is used for example purposes only.)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The examples below assume that the port configured for remote JMX is 9999, that the host name of the host running <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> is <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>example.com<ept id="2">&lt;/codeph&gt;</ept>, and that this host is reachable from the client host.</mrk><mrk mid="1" mtype="seg"> (This host name is fictitious, and is used for example purposes only.)</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">The following example code shows how to connect to the MBean Server when JMX security has been disabled:</source>
<seg-source><mrk mid="0" mtype="seg">The following example code shows how to connect to the MBean Server when JMX security has been disabled:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example code shows how to connect to the MBean Server when JMX security has been disabled:</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">JMXServiceURL url = new JMXServiceURL( "service:jmx:rmi:///jndi/rmi://example.com:9999/jmxrmi"); JMXConnector jmxc = JMXConnectorFactory.connect(url, null); MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();</source>
<seg-source><mrk mid="0" mtype="seg">JMXServiceURL url = new JMXServiceURL( "service:jmx:rmi:///jndi/rmi://example.com:9999/jmxrmi"); JMXConnector jmxc = JMXConnectorFactory.connect(url, null); MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JMXServiceURL url = new JMXServiceURL( "service:jmx:rmi:///jndi/rmi://example.com:9999/jmxrmi"); JMXConnector jmxc = JMXConnectorFactory.connect(url, null); MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">The following code shows how to connect to the MBean server when JMX password authentication is enabled (the default):</source>
<seg-source><mrk mid="0" mtype="seg">The following code shows how to connect to the MBean server when JMX password authentication is enabled (the default):</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following code shows how to connect to the MBean server when JMX password authentication is enabled (the default):</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">JMXServiceURL url = new JMXServiceURL( "service:jmx:rmi:///jndi/rmi://example.com:9999/jmxrmi"); // Assuming the following JMX credentials: // username=controlRole, password=derby String[] credentials = new String[] { "controlRole" , "derby" }; HashMap&lt;String,Object&gt; env = new HashMap&lt;String,Object&gt;(); // Set credentials (jmx.remote.credentials, // see JMX Remote API 1.0 spec section 3.4) env.put(JMXConnector.CREDENTIALS, credentials); // if the server's RMI registry is protected with SSL/TLS (JDK 6) // (com.sun.management.jmxremote.registry.ssl=true), the following // entry must be included: //env.put("com.sun.jndi.rmi.factory.socket", // new SslRMIClientSocketFactory()); // uncomment if needed // Connect to the server JMXConnector jmxc = JMXConnectorFactory.connect(url, env); MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();</source>
<seg-source><mrk mid="0" mtype="seg">JMXServiceURL url = new JMXServiceURL( "service:jmx:rmi:///jndi/rmi://example.com:9999/jmxrmi"); // Assuming the following JMX credentials: // username=controlRole, password=derby String[] credentials = new String[] { "controlRole" , "derby" }; HashMap&lt;String,Object&gt; env = new HashMap&lt;String,Object&gt;(); // Set credentials (jmx.remote.credentials, // see JMX Remote API 1.0 spec section 3.4) env.put(JMXConnector.CREDENTIALS, credentials); // if the server's RMI registry is protected with SSL/TLS (JDK 6) // (com.sun.management.jmxremote.registry.ssl=true), the following // entry must be included: //env.put("com.sun.jndi.rmi.factory.socket", // new SslRMIClientSocketFactory()); // uncomment if needed // Connect to the server JMXConnector jmxc = JMXConnectorFactory.connect(url, env); MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JMXServiceURL url = new JMXServiceURL( "service:jmx:rmi:///jndi/rmi://example.com:9999/jmxrmi"); // Assuming the following JMX credentials: // username=controlRole, password=derby String[] credentials = new String[] { "controlRole" , "derby" }; HashMap&lt;String,Object&gt; env = new HashMap&lt;String,Object&gt;(); // Set credentials (jmx.remote.credentials, // see JMX Remote API 1.0 spec section 3.4) env.put(JMXConnector.CREDENTIALS, credentials); // if the server's RMI registry is protected with SSL/TLS (JDK 6) // (com.sun.management.jmxremote.registry.ssl=true), the following // entry must be included: //env.put("com.sun.jndi.rmi.factory.socket", // new SslRMIClientSocketFactory()); // uncomment if needed // Connect to the server JMXConnector jmxc = JMXConnectorFactory.connect(url, env); MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">Not specifying <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SslRMIClientSocketFactory<ept id="1">&lt;/codeph&gt;</ept> when required may result in the error message <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.rmi.ConnectIOException: non-JRMP server at remote endpoint<ept id="2">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Not specifying <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SslRMIClientSocketFactory<ept id="1">&lt;/codeph&gt;</ept> when required may result in the error message <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.rmi.ConnectIOException: non-JRMP server at remote endpoint<ept id="2">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Not specifying <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SslRMIClientSocketFactory<ept id="1">&lt;/codeph&gt;</ept> when required may result in the error message <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.rmi.ConnectIOException: non-JRMP server at remote endpoint<ept id="2">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">Creating a ManagementMBean</source>
<seg-source><mrk mid="0" mtype="seg">Creating a ManagementMBean</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Creating a ManagementMBean</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">The only <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBean that can be created by a JMX client is the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept>. This MBean is useful for controlling <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> management (for example, enabling and disabling management or MBeans), and to obtain information such as the system identifier (which may be needed to specify MBeans later).</source>
<seg-source><mrk mid="0" mtype="seg">The only <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBean that can be created by a JMX client is the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> This MBean is useful for controlling <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> management (for example, enabling and disabling management or MBeans), and to obtain information such as the system identifier (which may be needed to specify MBeans later).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The only <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBean that can be created by a JMX client is the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> This MBean is useful for controlling <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> management (for example, enabling and disabling management or MBeans), and to obtain information such as the system identifier (which may be needed to specify MBeans later).</mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">If you create such an MBean from your application, and if <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> has already registered a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept> instance, the new MBean cannot have the same object name as the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="3">&lt;/codeph&gt;</ept> already registered with the server. It is therefore recommended to use a different object name domain (that is, different from <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>example.com<ept id="4">&lt;/codeph&gt;</ept>) and/or a different <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>type<ept id="5">&lt;/codeph&gt;</ept> key property value (different from <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>Management<ept id="6">&lt;/codeph&gt;</ept>).</source>
<seg-source><mrk mid="0" mtype="seg">If you create such an MBean from your application, and if <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> has already registered a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept> instance, the new MBean cannot have the same object name as the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="3">&lt;/codeph&gt;</ept> already registered with the server.</mrk><mrk mid="1" mtype="seg"> It is therefore recommended to use a different object name domain (that is, different from <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>example.com<ept id="4">&lt;/codeph&gt;</ept>) and/or a different <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>type<ept id="5">&lt;/codeph&gt;</ept> key property value (different from <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>Management<ept id="6">&lt;/codeph&gt;</ept>).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you create such an MBean from your application, and if <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> has already registered a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept> instance, the new MBean cannot have the same object name as the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="3">&lt;/codeph&gt;</ept> already registered with the server.</mrk><mrk mid="1" mtype="seg"> It is therefore recommended to use a different object name domain (that is, different from <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>example.com<ept id="4">&lt;/codeph&gt;</ept>) and/or a different <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>type<ept id="5">&lt;/codeph&gt;</ept> key property value (different from <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>Management<ept id="6">&lt;/codeph&gt;</ept>).</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">The following example code shows how to create and register a new <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="1">&lt;/codeph&gt;</ept> with the MBean server:</source>
<seg-source><mrk mid="0" mtype="seg">The following example code shows how to create and register a new <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="1">&lt;/codeph&gt;</ept> with the MBean server:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example code shows how to create and register a new <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="1">&lt;/codeph&gt;</ept> with the MBean server:</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en">ObjectName mgmtObjName = new ObjectName("com.example.app", "type", "DerbyManagement"); try { ObjectInstance mgmtObj = mbeanServerConn.createMBean("example.com.mbeans.Management", mgmtObjName); } catch (InstanceAlreadyExistsException e) { // A management MBean with this object name already exists! }</source>
<seg-source><mrk mid="0" mtype="seg">ObjectName mgmtObjName = new ObjectName("com.example.app", "type", "DerbyManagement"); try { ObjectInstance mgmtObj = mbeanServerConn.createMBean("example.com.mbeans.Management", mgmtObjName); } catch (InstanceAlreadyExistsException e) { // A management MBean with this object name already exists! }</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ObjectName mgmtObjName = new ObjectName("com.example.app", "type", "DerbyManagement"); try { ObjectInstance mgmtObj = mbeanServerConn.createMBean("example.com.mbeans.Management", mgmtObjName); } catch (InstanceAlreadyExistsException e) { // A management MBean with this object name already exists! }</mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">Activating <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> management</source>
<seg-source><mrk mid="0" mtype="seg">Activating <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> management</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Activating <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> management</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> attempts to activate its JMX management service by default, so it will usually be active unless you explicitly deactivate it, providing that <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> has permissions to perform the activation. If <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> management is not active, you will not be able to access any MBeans except the <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="4">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> attempts to activate its JMX management service by default, so it will usually be active unless you explicitly deactivate it, providing that <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> has permissions to perform the activation.</mrk><mrk mid="1" mtype="seg"> If <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> management is not active, you will not be able to access any MBeans except the <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="4">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> attempts to activate its JMX management service by default, so it will usually be active unless you explicitly deactivate it, providing that <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> has permissions to perform the activation.</mrk><mrk mid="1" mtype="seg"> If <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> management is not active, you will not be able to access any MBeans except the <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="4">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">By accessing the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementActive<ept id="1">&lt;/codeph&gt;</ept> attribute of the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept>, you can check whether the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> JMX management service is active or not. The following example code performs this check and activates the <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> management service if it is not already active:</source>
<seg-source><mrk mid="0" mtype="seg">By accessing the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementActive<ept id="1">&lt;/codeph&gt;</ept> attribute of the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept>, you can check whether the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> JMX management service is active or not.</mrk><mrk mid="1" mtype="seg"> The following example code performs this check and activates the <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> management service if it is not already active:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">By accessing the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementActive<ept id="1">&lt;/codeph&gt;</ept> attribute of the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="2">&lt;/codeph&gt;</ept>, you can check whether the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> JMX management service is active or not.</mrk><mrk mid="1" mtype="seg"> The following example code performs this check and activates the <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> management service if it is not already active:</mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">// assuming we already have a reference to the // ManagementMBean's object name Boolean active = (Boolean) mbeanServerConn.getAttribute(mgmtObjName, "ManagementActive"); if (!active.booleanValue()) { // start management mbeanServerConn.invoke(mgmtObjName, "startManagement", new Object[0], new String[0]); }</source>
<seg-source><mrk mid="0" mtype="seg">// assuming we already have a reference to the // ManagementMBean's object name Boolean active = (Boolean) mbeanServerConn.getAttribute(mgmtObjName, "ManagementActive"); if (!active.booleanValue()) { // start management mbeanServerConn.invoke(mgmtObjName, "startManagement", new Object[0], new String[0]); }</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// assuming we already have a reference to the // ManagementMBean's object name Boolean active = (Boolean) mbeanServerConn.getAttribute(mgmtObjName, "ManagementActive"); if (!active.booleanValue()) { // start management mbeanServerConn.invoke(mgmtObjName, "startManagement", new Object[0], new String[0]); }</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en">Obtaining the system identifier</source>
<seg-source><mrk mid="0" mtype="seg">Obtaining the system identifier</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Obtaining the system identifier</mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en">The system identifier is a unique <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>String<ept id="1">&lt;/codeph&gt;</ept> that distinguishes one running <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system from another. All MBeans that are instantiated by <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> include the system identifier in their object names.</source>
<seg-source><mrk mid="0" mtype="seg">The system identifier is a unique <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>String<ept id="1">&lt;/codeph&gt;</ept> that distinguishes one running <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system from another.</mrk><mrk mid="1" mtype="seg"> All MBeans that are instantiated by <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> include the system identifier in their object names.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The system identifier is a unique <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>String<ept id="1">&lt;/codeph&gt;</ept> that distinguishes one running <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system from another.</mrk><mrk mid="1" mtype="seg"> All MBeans that are instantiated by <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> include the system identifier in their object names.</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en">One way to access an MBean is to fully specify its object name when contacting the MBean server. For this, you need to know the current system identifier. (Alternative ways to access MBeans include querying the MBean server for all MBeans, or for MBeans whose object names match a specific pattern.)</source>
<seg-source><mrk mid="0" mtype="seg">One way to access an MBean is to fully specify its object name when contacting the MBean server.</mrk><mrk mid="1" mtype="seg"> For this, you need to know the current system identifier.</mrk><mrk mid="2" mtype="seg"> (Alternative ways to access MBeans include querying the MBean server for all MBeans, or for MBeans whose object names match a specific pattern.)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">One way to access an MBean is to fully specify its object name when contacting the MBean server.</mrk><mrk mid="1" mtype="seg"> For this, you need to know the current system identifier.</mrk><mrk mid="2" mtype="seg"> (Alternative ways to access MBeans include querying the MBean server for all MBeans, or for MBeans whose object names match a specific pattern.)</mrk></target>
</trans-unit>
<trans-unit id="tu29">
<source xml:lang="en">The following example shows how to obtain the system identifier by accessing a <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="1">&lt;/codeph&gt;</ept>:</source>
<seg-source><mrk mid="0" mtype="seg">The following example shows how to obtain the system identifier by accessing a <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="1">&lt;/codeph&gt;</ept>:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example shows how to obtain the system identifier by accessing a <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ManagementMBean<ept id="1">&lt;/codeph&gt;</ept>:</mrk></target>
</trans-unit>
<trans-unit id="tu30">
<source xml:lang="en">// assuming we already have a reference to the // ManagementMBean's object name String systemID = (String) mbeanServerConn.getAttribute(mgmtObjName, "SystemIdentifier");</source>
<seg-source><mrk mid="0" mtype="seg">// assuming we already have a reference to the // ManagementMBean's object name String systemID = (String) mbeanServerConn.getAttribute(mgmtObjName, "SystemIdentifier");</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// assuming we already have a reference to the // ManagementMBean's object name String systemID = (String) mbeanServerConn.getAttribute(mgmtObjName, "SystemIdentifier");</mrk></target>
</trans-unit>
<trans-unit id="tu31">
<source xml:lang="en">The following example shows how to obtain the system identifier from a <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBean's object name:</source>
<seg-source><mrk mid="0" mtype="seg">The following example shows how to obtain the system identifier from a <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBean's object name:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example shows how to obtain the system identifier from a <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBean's object name:</mrk></target>
</trans-unit>
<trans-unit id="tu32">
<source xml:lang="en">// assuming we already have a reference to the ObjectName // of an MBean registered by <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>, for example the // <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>-registered ManagementMBean String systemID = derbyMgmtObjectName.getKeyProperty("system");</source>
<seg-source><mrk mid="0" mtype="seg">// assuming we already have a reference to the ObjectName // of an MBean registered by <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>, for example the // <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>-registered ManagementMBean String systemID = derbyMgmtObjectName.getKeyProperty("system");</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// assuming we already have a reference to the ObjectName // of an MBean registered by <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>, for example the // <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>-registered ManagementMBean String systemID = derbyMgmtObjectName.getKeyProperty("system");</mrk></target>
</trans-unit>
<trans-unit id="tu33">
<source xml:lang="en">Accessing a specific <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>-registered MBean</source>
<seg-source><mrk mid="0" mtype="seg">Accessing a specific <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>-registered MBean</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Accessing a specific <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>-registered MBean</mrk></target>
</trans-unit>
<trans-unit id="tu34">
<source xml:lang="en">In the previous examples, you have already seen how to read a single MBean attribute, and how to invoke an MBean operation. In order to do this, you usually need a reference to the MBean's <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ObjectName<ept id="1">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">In the previous examples, you have already seen how to read a single MBean attribute, and how to invoke an MBean operation.</mrk><mrk mid="1" mtype="seg"> In order to do this, you usually need a reference to the MBean's <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ObjectName<ept id="1">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In the previous examples, you have already seen how to read a single MBean attribute, and how to invoke an MBean operation.</mrk><mrk mid="1" mtype="seg"> In order to do this, you usually need a reference to the MBean's <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>ObjectName<ept id="1">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu35">
<source xml:lang="en">If you consult the public API documentation for the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans and obtain the system identifier of the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system you are accessing through JMX, you have all the information you need to be able to instantiate a <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management.ObjectName<ept id="3">&lt;/codeph&gt;</ept> object directly, by fully specifying its <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>String<ept id="4">&lt;/codeph&gt;</ept> representation (see the <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>ObjectName<ept id="5">&lt;/codeph&gt;</ept> API documentation for details).</source>
<seg-source><mrk mid="0" mtype="seg">If you consult the public API documentation for the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans and obtain the system identifier of the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system you are accessing through JMX, you have all the information you need to be able to instantiate a <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management.ObjectName<ept id="3">&lt;/codeph&gt;</ept> object directly, by fully specifying its <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>String<ept id="4">&lt;/codeph&gt;</ept> representation (see the <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>ObjectName<ept id="5">&lt;/codeph&gt;</ept> API documentation for details).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you consult the public API documentation for the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans and obtain the system identifier of the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system you are accessing through JMX, you have all the information you need to be able to instantiate a <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.management.ObjectName<ept id="3">&lt;/codeph&gt;</ept> object directly, by fully specifying its <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>String<ept id="4">&lt;/codeph&gt;</ept> representation (see the <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>ObjectName<ept id="5">&lt;/codeph&gt;</ept> API documentation for details).</mrk></target>
</trans-unit>
<trans-unit id="tu36">
<source xml:lang="en">The following example code shows how to obtain a reference to the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionMBean<ept id="1">&lt;/codeph&gt;</ept> for <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept>:</source>
<seg-source><mrk mid="0" mtype="seg">The following example code shows how to obtain a reference to the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionMBean<ept id="1">&lt;/codeph&gt;</ept> for <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept>:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example code shows how to obtain a reference to the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionMBean<ept id="1">&lt;/codeph&gt;</ept> for <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept>:</mrk></target>
</trans-unit>
<trans-unit id="tu37">
<source xml:lang="en">// Assuming we already know the system identifier // (see examples above), systemID. // A list of key properties is available is each MBean's Javadoc API. Hashtable&lt;String, String&gt; keyProps = new Hashtable&lt;String, String&gt;(); keyProps.put("type", "Version"); keyProps.put("jar", "derby.jar"); keyProps.put("system", systemID); // MBeans registered by <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> always belong to the // "org.apache.derby" domain ObjectName versionObjectName = new ObjectName("org.apache.derby", keyProps); // we can now use the object name to read an attribute String versionString = (String) mbeanServerConn.getAttribute(versionObjectName, "VersionString"); System.out.println("VersionString: " + versionString);</source>
<seg-source><mrk mid="0" mtype="seg">// Assuming we already know the system identifier // (see examples above), systemID.</mrk><mrk mid="1" mtype="seg"> // A list of key properties is available is each MBean's Javadoc API.</mrk><mrk mid="2" mtype="seg"> Hashtable&lt;String, String&gt; keyProps = new Hashtable&lt;String, String&gt;(); keyProps.put("type", "Version"); keyProps.put("jar", "derby.jar"); keyProps.put("system", systemID); // MBeans registered by <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> always belong to the // "org.apache.derby" domain ObjectName versionObjectName = new ObjectName("org.apache.derby", keyProps); // we can now use the object name to read an attribute String versionString = (String) mbeanServerConn.getAttribute(versionObjectName, "VersionString"); System.out.println("VersionString: " + versionString);</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// Assuming we already know the system identifier // (see examples above), systemID.</mrk><mrk mid="1" mtype="seg"> // A list of key properties is available is each MBean's Javadoc API.</mrk><mrk mid="2" mtype="seg"> Hashtable&lt;String, String&gt; keyProps = new Hashtable&lt;String, String&gt;(); keyProps.put("type", "Version"); keyProps.put("jar", "derby.jar"); keyProps.put("system", systemID); // MBeans registered by <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> always belong to the // "org.apache.derby" domain ObjectName versionObjectName = new ObjectName("org.apache.derby", keyProps); // we can now use the object name to read an attribute String versionString = (String) mbeanServerConn.getAttribute(versionObjectName, "VersionString"); System.out.println("VersionString: " + versionString);</mrk></target>
</trans-unit>
<trans-unit id="tu38">
<source xml:lang="en">The output would look something like this:</source>
<seg-source><mrk mid="0" mtype="seg">The output would look something like this:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The output would look something like this:</mrk></target>
</trans-unit>
<trans-unit id="tu39">
<source xml:lang="en">VersionString: 10.9.1.1 - (1305115)</source>
<seg-source><mrk mid="0" mtype="seg">VersionString: 10.9.1.1 - (1305115)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">VersionString: 10.9.1.1 - (1305115)</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
