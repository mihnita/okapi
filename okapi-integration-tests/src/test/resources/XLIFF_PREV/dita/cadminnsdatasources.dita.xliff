<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="cadminnsdatasources.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Accessing the Network Server by using a DataSource object</source>
<seg-source><mrk mid="0" mtype="seg">Accessing the Network Server by using a DataSource object</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Accessing the Network Server by using a DataSource object</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">The Network Server supports a set of <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> Network Client driver <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> classes.</source>
<seg-source><mrk mid="0" mtype="seg">The Network Server supports a set of <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> Network Client driver <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> classes.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The Network Server supports a set of <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> Network Client driver <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> classes.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">DataSource objects</source>
<seg-source><mrk mid="0" mtype="seg">DataSource objects</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">DataSource objects</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">and Network Server</source>
<seg-source><mrk mid="0" mtype="seg">and Network Server</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">and Network Server</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Network Server</source>
<seg-source><mrk mid="0" mtype="seg">Network Server</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Network Server</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">using DataSource objects</source>
<seg-source><mrk mid="0" mtype="seg">using DataSource objects</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">using DataSource objects</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">You can use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="2">&lt;/codeph&gt;</ept> classes on Java SE 5 and above (except Java SE 8 Compact Profiles), in applications that call JDBC 3 or JDBC 4.0 methods. You can use the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource40<ept id="3">&lt;/codeph&gt;</ept> and <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource40<ept id="4">&lt;/codeph&gt;</ept> classes on Java SE 6 and above (except Java SE 8 Compact Profiles), in applications that call JDBC 4.1 or JDBC 4.2 methods. You must use the <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientDataSource40<ept id="5">&lt;/codeph&gt;</ept> and <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40<ept id="6">&lt;/codeph&gt;</ept> classes on Java SE 8 Compact Profile 2 or 3.</source>
<seg-source><mrk mid="0" mtype="seg">You can use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="2">&lt;/codeph&gt;</ept> classes on Java SE 5 and above (except Java SE 8 Compact Profiles), in applications that call JDBC 3 or JDBC 4.0 methods.</mrk><mrk mid="1" mtype="seg"> You can use the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource40<ept id="3">&lt;/codeph&gt;</ept> and <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource40<ept id="4">&lt;/codeph&gt;</ept> classes on Java SE 6 and above (except Java SE 8 Compact Profiles), in applications that call JDBC 4.1 or JDBC 4.2 methods.</mrk><mrk mid="2" mtype="seg"> You must use the <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientDataSource40<ept id="5">&lt;/codeph&gt;</ept> and <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40<ept id="6">&lt;/codeph&gt;</ept> classes on Java SE 8 Compact Profile 2 or 3.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You can use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="2">&lt;/codeph&gt;</ept> classes on Java SE 5 and above (except Java SE 8 Compact Profiles), in applications that call JDBC 3 or JDBC 4.0 methods.</mrk><mrk mid="1" mtype="seg"> You can use the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource40<ept id="3">&lt;/codeph&gt;</ept> and <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource40<ept id="4">&lt;/codeph&gt;</ept> classes on Java SE 6 and above (except Java SE 8 Compact Profiles), in applications that call JDBC 4.1 or JDBC 4.2 methods.</mrk><mrk mid="2" mtype="seg"> You must use the <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientDataSource40<ept id="5">&lt;/codeph&gt;</ept> and <bpt id="6" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40<ept id="6">&lt;/codeph&gt;</ept> classes on Java SE 8 Compact Profile 2 or 3.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">If your client is running on the Java SE 6 platform or higher, all connection objects returned from the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="1">&lt;/codeph&gt;</ept> will be JDBC 4 connection objects, whether or not you are using a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> whose name ends in "40".</source>
<seg-source><mrk mid="0" mtype="seg">If your client is running on the Java SE 6 platform or higher, all connection objects returned from the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="1">&lt;/codeph&gt;</ept> will be JDBC 4 connection objects, whether or not you are using a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> whose name ends in "40".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If your client is running on the Java SE 6 platform or higher, all connection objects returned from the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="1">&lt;/codeph&gt;</ept> will be JDBC 4 connection objects, whether or not you are using a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> whose name ends in "40".</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">Using statement caching</source>
<seg-source><mrk mid="0" mtype="seg">Using statement caching</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Using statement caching</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> supports JDBC statement caching, which can improve the performance of applications that use <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>PreparedStatement<ept id="2">&lt;/codeph&gt;</ept> or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>CallableStatement<ept id="3">&lt;/codeph&gt;</ept> objects. Statement caching avoids the performance penalty incurred by going over the network from the client to the server to prepare a statement that has already been prepared on the same connection.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> supports JDBC statement caching, which can improve the performance of applications that use <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>PreparedStatement<ept id="2">&lt;/codeph&gt;</ept> or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>CallableStatement<ept id="3">&lt;/codeph&gt;</ept> objects.</mrk><mrk mid="1" mtype="seg"> Statement caching avoids the performance penalty incurred by going over the network from the client to the server to prepare a statement that has already been prepared on the same connection.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> supports JDBC statement caching, which can improve the performance of applications that use <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>PreparedStatement<ept id="2">&lt;/codeph&gt;</ept> or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>CallableStatement<ept id="3">&lt;/codeph&gt;</ept> objects.</mrk><mrk mid="1" mtype="seg"> Statement caching avoids the performance penalty incurred by going over the network from the client to the server to prepare a statement that has already been prepared on the same connection.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">To use statement caching, you must use an <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="1">&lt;/codeph&gt;</ept>, <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource40<ept id="2">&lt;/codeph&gt;</ept>, or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40<ept id="3">&lt;/codeph&gt;</ept> object. After you instantiate this object, perform these steps:</source>
<seg-source><mrk mid="0" mtype="seg">To use statement caching, you must use an <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="1">&lt;/codeph&gt;</ept>, <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource40<ept id="2">&lt;/codeph&gt;</ept>, or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40<ept id="3">&lt;/codeph&gt;</ept> object.</mrk><mrk mid="1" mtype="seg"> After you instantiate this object, perform these steps:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To use statement caching, you must use an <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="1">&lt;/codeph&gt;</ept>, <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource40<ept id="2">&lt;/codeph&gt;</ept>, or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40<ept id="3">&lt;/codeph&gt;</ept> object.</mrk><mrk mid="1" mtype="seg"> After you instantiate this object, perform these steps:</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">Specify the desired size of your statement cache by calling the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>setMaxStatements<ept id="1">&lt;/codeph&gt;</ept> method on the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> object, specifying an argument greater than zero.</source>
<seg-source><mrk mid="0" mtype="seg">Specify the desired size of your statement cache by calling the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>setMaxStatements<ept id="1">&lt;/codeph&gt;</ept> method on the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> object, specifying an argument greater than zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specify the desired size of your statement cache by calling the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>setMaxStatements<ept id="1">&lt;/codeph&gt;</ept> method on the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> object, specifying an argument greater than zero.</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">Call the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>getPooledConnection<ept id="1">&lt;/codeph&gt;</ept> method on the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> object to obtain a <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.sql.PooledConnection<ept id="3">&lt;/codeph&gt;</ept> object (a physical connection).</source>
<seg-source><mrk mid="0" mtype="seg">Call the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>getPooledConnection<ept id="1">&lt;/codeph&gt;</ept> method on the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> object to obtain a <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.sql.PooledConnection<ept id="3">&lt;/codeph&gt;</ept> object (a physical connection).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Call the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>getPooledConnection<ept id="1">&lt;/codeph&gt;</ept> method on the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>DataSource<ept id="2">&lt;/codeph&gt;</ept> object to obtain a <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.sql.PooledConnection<ept id="3">&lt;/codeph&gt;</ept> object (a physical connection).</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">Call the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.sql.PooledConnection.getConnection<ept id="1">&lt;/codeph&gt;</ept> method to obtain a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.sql.Connection<ept id="2">&lt;/codeph&gt;</ept> object (a logical connection).</source>
<seg-source><mrk mid="0" mtype="seg">Call the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.sql.PooledConnection.getConnection<ept id="1">&lt;/codeph&gt;</ept> method to obtain a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.sql.Connection<ept id="2">&lt;/codeph&gt;</ept> object (a logical connection).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Call the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>javax.sql.PooledConnection.getConnection<ept id="1">&lt;/codeph&gt;</ept> method to obtain a <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.sql.Connection<ept id="2">&lt;/codeph&gt;</ept> object (a logical connection).</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">After you obtain a connection, use either prepared statements or callable statements to interact with the database. Close each statement to return it to the cache after you finish using it. The statements you create are held in the cache on the client side and reused when needed.</source>
<seg-source><mrk mid="0" mtype="seg">After you obtain a connection, use either prepared statements or callable statements to interact with the database.</mrk><mrk mid="1" mtype="seg"> Close each statement to return it to the cache after you finish using it.</mrk><mrk mid="2" mtype="seg"> The statements you create are held in the cache on the client side and reused when needed.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">After you obtain a connection, use either prepared statements or callable statements to interact with the database.</mrk><mrk mid="1" mtype="seg"> Close each statement to return it to the cache after you finish using it.</mrk><mrk mid="2" mtype="seg"> The statements you create are held in the cache on the client side and reused when needed.</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">See <bpt id="1" ctype="x-xref">&lt;xref href="radminnsdatasourcexmp.dita#radminnsdatasourcexmp/stmtcacheexmp"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for a code example.</source>
<seg-source><mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-xref">&lt;xref href="radminnsdatasourcexmp.dita#radminnsdatasourcexmp/stmtcacheexmp"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for a code example.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-xref">&lt;xref href="radminnsdatasourcexmp.dita#radminnsdatasourcexmp/stmtcacheexmp"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for a code example.</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">Use of the JDBC statement cache makes each physical connection use more memory. The amount depends on how many statements the connection is allowed to cache and how many statements are actually cached.</source>
<seg-source><mrk mid="0" mtype="seg">Use of the JDBC statement cache makes each physical connection use more memory.</mrk><mrk mid="1" mtype="seg"> The amount depends on how many statements the connection is allowed to cache and how many statements are actually cached.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use of the JDBC statement cache makes each physical connection use more memory.</mrk><mrk mid="1" mtype="seg"> The amount depends on how many statements the connection is allowed to cache and how many statements are actually cached.</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">If you enable JDBC statement caching, error handling changes slightly. Some errors that previously appeared when the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>prepareStatement<ept id="1">&lt;/codeph&gt;</ept> method was executed may now appear during statement execution. For example, suppose you query a table using a prepared statement that is then cached. If the table is deleted, the prepared statement that queries the table is not invalidated. If the query is prepared again on the same connection, the cached object is fetched from the cache, and the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>prepareStatement<ept id="2">&lt;/codeph&gt;</ept> call seems to have succeeded, although the statement has not actually been prepared. When the prepared statement is executed, the error is detected on the server side, and the client is notified.</source>
<seg-source><mrk mid="0" mtype="seg">If you enable JDBC statement caching, error handling changes slightly.</mrk><mrk mid="1" mtype="seg"> Some errors that previously appeared when the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>prepareStatement<ept id="1">&lt;/codeph&gt;</ept> method was executed may now appear during statement execution.</mrk><mrk mid="2" mtype="seg"> For example, suppose you query a table using a prepared statement that is then cached.</mrk><mrk mid="3" mtype="seg"> If the table is deleted, the prepared statement that queries the table is not invalidated.</mrk><mrk mid="4" mtype="seg"> If the query is prepared again on the same connection, the cached object is fetched from the cache, and the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>prepareStatement<ept id="2">&lt;/codeph&gt;</ept> call seems to have succeeded, although the statement has not actually been prepared.</mrk><mrk mid="5" mtype="seg"> When the prepared statement is executed, the error is detected on the server side, and the client is notified.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you enable JDBC statement caching, error handling changes slightly.</mrk><mrk mid="1" mtype="seg"> Some errors that previously appeared when the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>prepareStatement<ept id="1">&lt;/codeph&gt;</ept> method was executed may now appear during statement execution.</mrk><mrk mid="2" mtype="seg"> For example, suppose you query a table using a prepared statement that is then cached.</mrk><mrk mid="3" mtype="seg"> If the table is deleted, the prepared statement that queries the table is not invalidated.</mrk><mrk mid="4" mtype="seg"> If the query is prepared again on the same connection, the cached object is fetched from the cache, and the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>prepareStatement<ept id="2">&lt;/codeph&gt;</ept> call seems to have succeeded, although the statement has not actually been prepared.</mrk><mrk mid="5" mtype="seg"> When the prepared statement is executed, the error is detected on the server side, and the client is notified.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
