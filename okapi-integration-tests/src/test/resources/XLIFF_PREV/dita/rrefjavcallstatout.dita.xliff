<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefjavcallstatout.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">CallableStatements and OUT Parameters <bpt id="1" ctype="x-ph">&lt;ph&gt;</bpt><ept id="1">&lt;/ph&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg">CallableStatements and OUT Parameters <bpt id="1" ctype="x-ph">&lt;ph&gt;</bpt><ept id="1">&lt;/ph&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CallableStatements and OUT Parameters <bpt id="1" ctype="x-ph">&lt;ph&gt;</bpt><ept id="1">&lt;/ph&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">java.sql.CallableStatement</source>
<seg-source><mrk mid="0" mtype="seg">java.sql.CallableStatement</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">java.sql.CallableStatement</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">and OUT parameters</source>
<seg-source><mrk mid="0" mtype="seg">and OUT parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">and OUT parameters</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> supports OUT parameters and CALL statements that return values, as in the following example:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> supports OUT parameters and CALL statements that return values, as in the following example:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> supports OUT parameters and CALL statements that return values, as in the following example:</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CallableStatement cs = conn.prepareCall( "? = CALL getDriverType(cast (? as INT))" cs.registerOutParameter(1, Types.INTEGER); cs.setInt(2, 35); cs.executeUpdate();<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CallableStatement cs = conn.prepareCall( "? = CALL getDriverType(cast (? as INT))" cs.registerOutParameter(1, Types.INTEGER); cs.setInt(2, 35); cs.executeUpdate();<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CallableStatement cs = conn.prepareCall( "? = CALL getDriverType(cast (? as INT))" cs.registerOutParameter(1, Types.INTEGER); cs.setInt(2, 35); cs.executeUpdate();<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">Using a CALL statement with a procedure that returns a value is only supported with the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>? =<ept id="1">&lt;/i&gt;</ept> syntax.</source>
<seg-source><mrk mid="0" mtype="seg">Using a CALL statement with a procedure that returns a value is only supported with the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>? =<ept id="1">&lt;/i&gt;</ept> syntax.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Using a CALL statement with a procedure that returns a value is only supported with the <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>? =<ept id="1">&lt;/i&gt;</ept> syntax.</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">Register the output type of the parameter before executing the call.</source>
<seg-source><mrk mid="0" mtype="seg">Register the output type of the parameter before executing the call.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Register the output type of the parameter before executing the call.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
