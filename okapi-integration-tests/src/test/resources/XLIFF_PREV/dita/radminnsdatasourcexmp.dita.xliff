<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="radminnsdatasourcexmp.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">DataSource access examples</source>
<seg-source><mrk mid="0" mtype="seg">DataSource access examples</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">DataSource access examples</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">These examples use <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="2">&lt;/codeph&gt;</ept> to access the Network Server.</source>
<seg-source><mrk mid="0" mtype="seg">These examples use <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="2">&lt;/codeph&gt;</ept> to access the Network Server.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">These examples use <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="2">&lt;/codeph&gt;</ept> to access the Network Server.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">The following example uses <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> to access the Network Server:</source>
<seg-source><mrk mid="0" mtype="seg">The following example uses <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> to access the Network Server:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example uses <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientDataSource<ept id="1">&lt;/codeph&gt;</ept> to access the Network Server:</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">org.apache.derby.jdbc.ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource(); ds.setDatabaseName("mydb"); ds.setCreateDatabase("create"); ds.setUser("user"); ds.setPassword("mypass"); // The host on which Network Server is running ds.setServerName("localhost"); // The port on which Network Server is listening ds.setPortNumber(1527); Connection conn = ds.getConnection();</source>
<seg-source><mrk mid="0" mtype="seg">org.apache.derby.jdbc.ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource(); ds.setDatabaseName("mydb"); ds.setCreateDatabase("create"); ds.setUser("user"); ds.setPassword("mypass"); // The host on which Network Server is running ds.setServerName("localhost"); // The port on which Network Server is listening ds.setPortNumber(1527); Connection conn = ds.getConnection();</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">org.apache.derby.jdbc.ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource(); ds.setDatabaseName("mydb"); ds.setCreateDatabase("create"); ds.setUser("user"); ds.setPassword("mypass"); // The host on which Network Server is running ds.setServerName("localhost"); // The port on which Network Server is listening ds.setPortNumber(1527); Connection conn = ds.getConnection();</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Statement caching example</source>
<seg-source><mrk mid="0" mtype="seg">Statement caching example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Statement caching example</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">The following example uses <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="1">&lt;/codeph&gt;</ept> to access the Network Server and use JDBC statement caching:</source>
<seg-source><mrk mid="0" mtype="seg">The following example uses <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="1">&lt;/codeph&gt;</ept> to access the Network Server and use JDBC statement caching:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example uses <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>org.apache.derby.jdbc.ClientConnectionPoolDataSource<ept id="1">&lt;/codeph&gt;</ept> to access the Network Server and use JDBC statement caching:</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">org.apache.derby.jdbc.ClientConnectionPoolDataSource cpds = new ClientConnectionPoolDataSource(); // Set the number of statements the cache is allowed to cache. // Any number greater than zero will enable the cache. cpds.setMaxStatements(20); // Set other DataSource properties cpds.setDatabaseName("mydb"); cpds.setCreateDatabase("create"); cpds.setUser("user"); cpds.setPassword("mypass"); cpds.setServerName("localhost"); cpds.setPortNumber(1527); // This physical connection will have JDBC statement caching enabled. javax.sql.PooledConnection pc = cpds.getPooledConnection(); // Create a logical connection. java.sql.Connection con = pc.getConnection(); // Interact with the database. java.sql.PreparedStatement ps = con.prepareStatement( "select * from myTable where id = ?"); ... ps.close(); // Inserts or returns statement to the cache ... con.close(); // The next logical connection can gain from using the cache. con = pc.getConnection(); // This prepare causes a statement to be fetched from the local cache. PreparedStatement ps = con.prepareStatement( "select * from myTable where id = ?"); ... // To dispose of the cache, close the connection. pc.close();</source>
<seg-source><mrk mid="0" mtype="seg">org.apache.derby.jdbc.ClientConnectionPoolDataSource cpds = new ClientConnectionPoolDataSource(); // Set the number of statements the cache is allowed to cache.</mrk><mrk mid="1" mtype="seg"> // Any number greater than zero will enable the cache.</mrk><mrk mid="2" mtype="seg"> cpds.setMaxStatements(20); // Set other DataSource properties cpds.setDatabaseName("mydb"); cpds.setCreateDatabase("create"); cpds.setUser("user"); cpds.setPassword("mypass"); cpds.setServerName("localhost"); cpds.setPortNumber(1527); // This physical connection will have JDBC statement caching enabled.</mrk><mrk mid="3" mtype="seg"> javax.sql.PooledConnection pc = cpds.getPooledConnection(); // Create a logical connection.</mrk><mrk mid="4" mtype="seg"> java.sql.Connection con = pc.getConnection(); // Interact with the database.</mrk><mrk mid="5" mtype="seg"> java.sql.PreparedStatement ps = con.prepareStatement( "select * from myTable where id = ?"); ...</mrk><mrk mid="6" mtype="seg"> ps.close(); // Inserts or returns statement to the cache ...</mrk><mrk mid="7" mtype="seg"> con.close(); // The next logical connection can gain from using the cache.</mrk><mrk mid="8" mtype="seg"> con = pc.getConnection(); // This prepare causes a statement to be fetched from the local cache.</mrk><mrk mid="9" mtype="seg"> PreparedStatement ps = con.prepareStatement( "select * from myTable where id = ?"); ...</mrk><mrk mid="10" mtype="seg"> // To dispose of the cache, close the connection.</mrk><mrk mid="11" mtype="seg"> pc.close();</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">org.apache.derby.jdbc.ClientConnectionPoolDataSource cpds = new ClientConnectionPoolDataSource(); // Set the number of statements the cache is allowed to cache.</mrk><mrk mid="1" mtype="seg"> // Any number greater than zero will enable the cache.</mrk><mrk mid="2" mtype="seg"> cpds.setMaxStatements(20); // Set other DataSource properties cpds.setDatabaseName("mydb"); cpds.setCreateDatabase("create"); cpds.setUser("user"); cpds.setPassword("mypass"); cpds.setServerName("localhost"); cpds.setPortNumber(1527); // This physical connection will have JDBC statement caching enabled.</mrk><mrk mid="3" mtype="seg"> javax.sql.PooledConnection pc = cpds.getPooledConnection(); // Create a logical connection.</mrk><mrk mid="4" mtype="seg"> java.sql.Connection con = pc.getConnection(); // Interact with the database.</mrk><mrk mid="5" mtype="seg"> java.sql.PreparedStatement ps = con.prepareStatement( "select * from myTable where id = ?"); ...</mrk><mrk mid="6" mtype="seg"> ps.close(); // Inserts or returns statement to the cache ...</mrk><mrk mid="7" mtype="seg"> con.close(); // The next logical connection can gain from using the cache.</mrk><mrk mid="8" mtype="seg"> con = pc.getConnection(); // This prepare causes a statement to be fetched from the local cache.</mrk><mrk mid="9" mtype="seg"> PreparedStatement ps = con.prepareStatement( "select * from myTable where id = ?"); ...</mrk><mrk mid="10" mtype="seg"> // To dispose of the cache, close the connection.</mrk><mrk mid="11" mtype="seg"> pc.close();</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
