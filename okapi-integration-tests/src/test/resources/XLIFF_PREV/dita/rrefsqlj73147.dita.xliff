<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefsqlj73147.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">SQRT function</source>
<seg-source><mrk mid="0" mtype="seg">SQRT function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQRT function</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">The SQRT function returns the square root of a floating-point number; only the built-in types REAL, FLOAT, and DOUBLE PRECISION are supported.</source>
<seg-source><mrk mid="0" mtype="seg">The SQRT function returns the square root of a floating-point number; only the built-in types REAL, FLOAT, and DOUBLE PRECISION are supported.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The SQRT function returns the square root of a floating-point number; only the built-in types REAL, FLOAT, and DOUBLE PRECISION are supported.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">SQRT function</source>
<seg-source><mrk mid="0" mtype="seg">SQRT function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQRT function</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">The return type for SQRT is the type of the parameter.</source>
<seg-source><mrk mid="0" mtype="seg">The return type for SQRT is the type of the parameter.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The return type for SQRT is the type of the parameter.</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">To execute SQRT on other data types, you must cast them to floating-point types.</source>
<seg-source><mrk mid="0" mtype="seg">To execute SQRT on other data types, you must cast them to floating-point types.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To execute SQRT on other data types, you must cast them to floating-point types.</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SQRT ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SQRT ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SQRT ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">Examples</source>
<seg-source><mrk mid="0" mtype="seg">Examples</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Examples</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>-- throws an exception if any row stores a negative number: VALUES SQRT(3421E+09) -- returns the square root of an INTEGER after casting it as a -- floating-point data type: SELECT SQRT(myDoubleColumn) FROM MyTable VALUES SQRT (CAST(25 AS FLOAT));<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>-- throws an exception if any row stores a negative number: VALUES SQRT(3421E+09) -- returns the square root of an INTEGER after casting it as a -- floating-point data type: SELECT SQRT(myDoubleColumn) FROM MyTable VALUES SQRT (CAST(25 AS FLOAT));<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>-- throws an exception if any row stores a negative number: VALUES SQRT(3421E+09) -- returns the square root of an INTEGER after casting it as a -- floating-point data type: SELECT SQRT(myDoubleColumn) FROM MyTable VALUES SQRT (CAST(25 AS FLOAT));<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
</body>
</file>
</xliff>
