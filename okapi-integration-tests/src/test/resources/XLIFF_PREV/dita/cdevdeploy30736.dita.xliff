<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="cdevdeploy30736.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Loading classes from a database</source>
<seg-source><mrk mid="0" mtype="seg">Loading classes from a database</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Loading classes from a database</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">You can store application logic in a database and then load classes from the database.</source>
<seg-source><mrk mid="0" mtype="seg">You can store application logic in a database and then load classes from the database.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You can store application logic in a database and then load classes from the database.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Database class loading</source>
<seg-source><mrk mid="0" mtype="seg">Database class loading</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Database class loading</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">Classes</source>
<seg-source><mrk mid="0" mtype="seg">Classes</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Classes</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">storing in database</source>
<seg-source><mrk mid="0" mtype="seg">storing in database</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">storing in database</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">Jar files</source>
<seg-source><mrk mid="0" mtype="seg">Jar files</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Jar files</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">storing in database</source>
<seg-source><mrk mid="0" mtype="seg">storing in database</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">storing in database</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">Logic</source>
<seg-source><mrk mid="0" mtype="seg">Logic</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Logic</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">storing in database</source>
<seg-source><mrk mid="0" mtype="seg">storing in database</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">storing in database</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">Application logic, which can be used by SQL functions and procedures, includes Java class files and other resources. Storing application code simplifies application deployment, since it reduces the potential for problems with a user's classpath.</source>
<seg-source><mrk mid="0" mtype="seg">Application logic, which can be used by SQL functions and procedures, includes Java class files and other resources.</mrk><mrk mid="1" mtype="seg"> Storing application code simplifies application deployment, since it reduces the potential for problems with a user's classpath.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Application logic, which can be used by SQL functions and procedures, includes Java class files and other resources.</mrk><mrk mid="1" mtype="seg"> Storing application code simplifies application deployment, since it reduces the potential for problems with a user's classpath.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">In an embedded environment, when application logic is stored in the database, <bpt id="1" ctype="x-ph">&lt;ph
conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> can access classes loaded by the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> class loader from stored jar files.</source>
<seg-source><mrk mid="0" mtype="seg">In an embedded environment, when application logic is stored in the database, <bpt id="1" ctype="x-ph">&lt;ph
conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> can access classes loaded by the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> class loader from stored jar files.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In an embedded environment, when application logic is stored in the database, <bpt id="1" ctype="x-ph">&lt;ph
conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> can access classes loaded by the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> class loader from stored jar files.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
