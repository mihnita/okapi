<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefjdbc34565.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">java.sql.DriverManager.getConnection method</source>
<seg-source><mrk mid="0" mtype="seg">java.sql.DriverManager.getConnection method</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">java.sql.DriverManager.getConnection method</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">java.sql.DriverManager.getConnection method</source>
<seg-source><mrk mid="0" mtype="seg">java.sql.DriverManager.getConnection method</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">java.sql.DriverManager.getConnection method</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">A Java application using the JDBC API establishes a connection to a database by obtaining a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> object. The standard way to obtain a <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="2">&lt;/i&gt;</ept> object is to call the method <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>DriverManager.getConnection<ept id="3">&lt;/i&gt;</ept>, which takes a String containing a database connection URL. A JDBC database connection URL (uniform resource locator) provides a way of identifying a database.</source>
<seg-source><mrk mid="0" mtype="seg">A Java application using the JDBC API establishes a connection to a database by obtaining a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> object.</mrk><mrk mid="1" mtype="seg"> The standard way to obtain a <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="2">&lt;/i&gt;</ept> object is to call the method <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>DriverManager.getConnection<ept id="3">&lt;/i&gt;</ept>, which takes a String containing a database connection URL.</mrk><mrk mid="2" mtype="seg"> A JDBC database connection URL (uniform resource locator) provides a way of identifying a database.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A Java application using the JDBC API establishes a connection to a database by obtaining a <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="1">&lt;/i&gt;</ept> object.</mrk><mrk mid="1" mtype="seg"> The standard way to obtain a <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Connection<ept id="2">&lt;/i&gt;</ept> object is to call the method <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>DriverManager.getConnection<ept id="3">&lt;/i&gt;</ept>, which takes a String containing a database connection URL.</mrk><mrk mid="2" mtype="seg"> A JDBC database connection URL (uniform resource locator) provides a way of identifying a database.</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en"><bpt id="1" ctype="x-i">&lt;i&gt;</bpt>DriverManager.getConnection<ept id="1">&lt;/i&gt;</ept> can take one argument besides a database connection URL, a <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="2">&lt;/i&gt;</ept> object. You can use the <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="3">&lt;/i&gt;</ept> object to set database connection URL attributes. If you specify any attributes both on the connection URL and in a <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="4">&lt;/i&gt;</ept> object, the attributes on the connection URL override the attributes in the <bpt id="5" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="5">&lt;/i&gt;</ept> object.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-i">&lt;i&gt;</bpt>DriverManager.getConnection<ept id="1">&lt;/i&gt;</ept> can take one argument besides a database connection URL, a <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="2">&lt;/i&gt;</ept> object.</mrk><mrk mid="1" mtype="seg"> You can use the <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="3">&lt;/i&gt;</ept> object to set database connection URL attributes.</mrk><mrk mid="2" mtype="seg"> If you specify any attributes both on the connection URL and in a <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="4">&lt;/i&gt;</ept> object, the attributes on the connection URL override the attributes in the <bpt id="5" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="5">&lt;/i&gt;</ept> object.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-i">&lt;i&gt;</bpt>DriverManager.getConnection<ept id="1">&lt;/i&gt;</ept> can take one argument besides a database connection URL, a <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="2">&lt;/i&gt;</ept> object.</mrk><mrk mid="1" mtype="seg"> You can use the <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="3">&lt;/i&gt;</ept> object to set database connection URL attributes.</mrk><mrk mid="2" mtype="seg"> If you specify any attributes both on the connection URL and in a <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="4">&lt;/i&gt;</ept> object, the attributes on the connection URL override the attributes in the <bpt id="5" ctype="x-i">&lt;i&gt;</bpt>Properties<ept id="5">&lt;/i&gt;</ept> object.</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Schemas</source>
<seg-source><mrk mid="0" mtype="seg">Schemas</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Schemas</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">APP as default</source>
<seg-source><mrk mid="0" mtype="seg">APP as default</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">APP as default</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">You can also supply strings representing user names and passwords. When they are supplied, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> checks whether they are valid for the current system if user authentication is enabled. User names are passed to <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> as authorization identifiers, which are used to determine whether the user is authorized for access to the database and for determining the default schema. When the connection is established, if no user is supplied, <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> sets the default user to <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>APP<ept id="4">&lt;/i&gt;</ept>, which <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> uses to name the default schema. If a user is supplied, the default schema is the same as the user name.</source>
<seg-source><mrk mid="0" mtype="seg">You can also supply strings representing user names and passwords.</mrk><mrk mid="1" mtype="seg"> When they are supplied, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> checks whether they are valid for the current system if user authentication is enabled.</mrk><mrk mid="2" mtype="seg"> User names are passed to <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> as authorization identifiers, which are used to determine whether the user is authorized for access to the database and for determining the default schema.</mrk><mrk mid="3" mtype="seg"> When the connection is established, if no user is supplied, <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> sets the default user to <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>APP<ept id="4">&lt;/i&gt;</ept>, which <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> uses to name the default schema.</mrk><mrk mid="4" mtype="seg"> If a user is supplied, the default schema is the same as the user name.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You can also supply strings representing user names and passwords.</mrk><mrk mid="1" mtype="seg"> When they are supplied, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> checks whether they are valid for the current system if user authentication is enabled.</mrk><mrk mid="2" mtype="seg"> User names are passed to <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> as authorization identifiers, which are used to determine whether the user is authorized for access to the database and for determining the default schema.</mrk><mrk mid="3" mtype="seg"> When the connection is established, if no user is supplied, <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> sets the default user to <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>APP<ept id="4">&lt;/i&gt;</ept>, which <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> uses to name the default schema.</mrk><mrk mid="4" mtype="seg"> If a user is supplied, the default schema is the same as the user name.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
