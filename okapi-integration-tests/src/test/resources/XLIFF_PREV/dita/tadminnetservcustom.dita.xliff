<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="tadminnetservcustom.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Customizing the Network Server's security policy</source>
<seg-source><mrk mid="0" mtype="seg">Customizing the Network Server's security policy</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Customizing the Network Server's security policy</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">You will probably want to customize the Network Server's Basic security policy.</source>
<seg-source><mrk mid="0" mtype="seg">You will probably want to customize the Network Server's Basic security policy.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You will probably want to customize the Network Server's Basic security policy.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Network Server</source>
<seg-source><mrk mid="0" mtype="seg">Network Server</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Network Server</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">custom policy</source>
<seg-source><mrk mid="0" mtype="seg">custom policy</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">custom policy</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">The Network Server's Basic security policy is documented in <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservbasic.dita#tadminnetservbasic"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The Network Server's Basic security policy is documented in <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservbasic.dita#tadminnetservbasic"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The Network Server's Basic security policy is documented in <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservbasic.dita#tadminnetservbasic"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">For example, you might want to restrict the server's liberal file I/O permissions, which let the server backup/restore and export/import to or from any location in the local file system. Customizing the security policy is simple:</source>
<seg-source><mrk mid="0" mtype="seg">For example, you might want to restrict the server's liberal file I/O permissions, which let the server backup/restore and export/import to or from any location in the local file system.</mrk><mrk mid="1" mtype="seg"> Customizing the security policy is simple:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For example, you might want to restrict the server's liberal file I/O permissions, which let the server backup/restore and export/import to or from any location in the local file system.</mrk><mrk mid="1" mtype="seg"> Customizing the security policy is simple:</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">A template policy lives in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> distribution at <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>demo/templates/server.policy<ept id="2">&lt;/codeph&gt;</ept>. Copy the file from this location to your own file, say <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>myCustomized.policy<ept id="3">&lt;/codeph&gt;</ept>. All of the following edits take place in your custom file.</source>
<seg-source><mrk mid="0" mtype="seg">A template policy lives in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> distribution at <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>demo/templates/server.policy<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Copy the file from this location to your own file, say <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>myCustomized.policy<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> All of the following edits take place in your custom file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A template policy lives in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> distribution at <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>demo/templates/server.policy<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Copy the file from this location to your own file, say <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>myCustomized.policy<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> All of the following edits take place in your custom file.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.install.url}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> jars in your local file system.</source>
<seg-source><mrk mid="0" mtype="seg">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.install.url}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> jars in your local file system.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.install.url}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> jars in your local file system.</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.system.home}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of your <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system directory. Alternatively, rather than replacing this variable, you can simply set the value of the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.system.home<ept id="3">&lt;/codeph&gt;</ept> system property when you boot the server.</source>
<seg-source><mrk mid="0" mtype="seg">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.system.home}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of your <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system directory.</mrk><mrk mid="1" mtype="seg"> Alternatively, rather than replacing this variable, you can simply set the value of the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.system.home<ept id="3">&lt;/codeph&gt;</ept> system property when you boot the server.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.system.home}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of your <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> system directory.</mrk><mrk mid="1" mtype="seg"> Alternatively, rather than replacing this variable, you can simply set the value of the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.system.home<ept id="3">&lt;/codeph&gt;</ept> system property when you boot the server.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.drda.traceDirectory}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of your server trace file if you plan to use tracing.</source>
<seg-source><mrk mid="0" mtype="seg">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.drda.traceDirectory}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of your server trace file if you plan to use tracing.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Replace the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>${derby.drda.traceDirectory}<ept id="1">&lt;/codeph&gt;</ept> variable with the location of your server trace file if you plan to use tracing.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">Grant <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>java.net.SocketPermission<ept id="1">&lt;/codeph&gt;</ept> to <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept> if you are using LDAP authentication, so that the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> code is allowed to contact the LDAP server to perform the authentication.</source>
<seg-source><mrk mid="0" mtype="seg">Grant <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>java.net.SocketPermission<ept id="1">&lt;/codeph&gt;</ept> to <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept> if you are using LDAP authentication, so that the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> code is allowed to contact the LDAP server to perform the authentication.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Grant <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>java.net.SocketPermission<ept id="1">&lt;/codeph&gt;</ept> to <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept> if you are using LDAP authentication, so that the <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> code is allowed to contact the LDAP server to perform the authentication.</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">You may want to restrict the socket permission for <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="1">&lt;/codeph&gt;</ept>, which by default accepts connections from any host (<bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>"*"<ept id="2">&lt;/codeph&gt;</ept>). Note that the special wildcard address <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>"0.0.0.0"<ept id="3">&lt;/codeph&gt;</ept> is not understood by <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>SocketPermission<ept id="4">&lt;/codeph&gt;</ept>, even though <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> accepts this wildcard as a valid value for accepting connections on all network interfaces (IPv4).</source>
<seg-source><mrk mid="0" mtype="seg">You may want to restrict the socket permission for <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="1">&lt;/codeph&gt;</ept>, which by default accepts connections from any host (<bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>"*"<ept id="2">&lt;/codeph&gt;</ept>).</mrk><mrk mid="1" mtype="seg"> Note that the special wildcard address <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>"0.0.0.0"<ept id="3">&lt;/codeph&gt;</ept> is not understood by <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>SocketPermission<ept id="4">&lt;/codeph&gt;</ept>, even though <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> accepts this wildcard as a valid value for accepting connections on all network interfaces (IPv4).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You may want to restrict the socket permission for <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="1">&lt;/codeph&gt;</ept>, which by default accepts connections from any host (<bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>"*"<ept id="2">&lt;/codeph&gt;</ept>).</mrk><mrk mid="1" mtype="seg"> Note that the special wildcard address <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>"0.0.0.0"<ept id="3">&lt;/codeph&gt;</ept> is not understood by <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>SocketPermission<ept id="4">&lt;/codeph&gt;</ept>, even though <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> accepts this wildcard as a valid value for accepting connections on all network interfaces (IPv4).</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">Refine the file permissions needed by backup/restore, import/export, and the loading of application jars.</source>
<seg-source><mrk mid="0" mtype="seg">Refine the file permissions needed by backup/restore, import/export, and the loading of application jars.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Refine the file permissions needed by backup/restore, import/export, and the loading of application jars.</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">The following is a sample customized policy file:</source>
<seg-source><mrk mid="0" mtype="seg">The following is a sample customized policy file:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following is a sample customized policy file:</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">grant codeBase "file:/usr/local/share/sw/derby/lib/derby.jar" { // These permissions are needed for everyday, embedded <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> usage. // permission java.lang.RuntimePermission "createClassLoader"; permission java.util.PropertyPermission "derby.*", "read"; permission java.util.PropertyPermission "user.dir", "read"; // The next two properties are used to determine if the VM is 32 or // 64 bit. // permission java.util.PropertyPermission "sun.arch.data.model", "read"; permission java.util.PropertyPermission "os.arch", "read"; // Customized to actual location of derby.system.home: // permission java.io.FilePermission "/usr/local/shoppingCartApp/databases", "read"; permission java.io.FilePermission "/usr/local/shoppingCartApp/databases/-", "read,write,delete"; // This permission lets a DBA reload the policy file while the server // is still running. The policy file is reloaded by invoking the // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure. // permission java.security.SecurityPermission "getPolicy"; // This permission lets you backup and restore databases // to and from a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/backups/-", "read,write,delete"; // This permission lets you import data from // a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/imports/-", "read"; // This permission lets you export data to // a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/exports/-", "write"; // This permission lets you load your databases with jar files of // application code // permission java.io.FilePermission "/usr/local/shoppingCartApp/lib/*", "read"; // LDAP server on localhost using default LDAP port 389: // permission java.net.SocketPermission "localhost:389", "connect,resolve"; // Permissions needed for JMX based management and monitoring. // Uncomment the following MBeanServerPermission, MBeanPermission and // MBeanTrustPermission if you need JMX monitoring. Consider the // security implications before you open up for JMX // monitoring. // // Allows this code to create an MBeanServer: // // permission javax.management.MBeanServerPermission // "createMBeanServer"; // // Allows access to <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby. <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> must be allowed to register and unregister // these MBeans. It is possible to allow access only to specific // MBeans, attributes or operations. To fine-tune this permission, see // the API documentation for javax.management.MBeanPermission or the // JMX Instrumentation and Agent Specification: // // permission javax.management.MBeanPermission // "org.apache.derby.*#[org.apache.derby:*]", // "registerMBean, unregisterMBean"; // // Trusts <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these // in the MBean server: // // permission javax.management.MBeanTrustPermission "register"; // getProtectionDomain is an optional permission needed for printing // classpath information to derby.log. Consider if this could be a // security risk before enabling it. // // permission java.lang.RuntimePermission "getProtectionDomain"; // The following permission must be granted for // Connection.abort(Executor) to work. Note that this permission must // also be granted to outer (application) code domains. // Uncomment this permission if you plan to use Connection.abort. // // permission java.sql.SQLPermission "callAbort"; // Needed by file permissions restriction system (see the // documentation for derby.storage.useDefaultFilePermissions in the // Reference Manual). Consider restricting the database file-level // permissions for security. // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; }; grant codeBase "file:/usr/local/share/sw/derby/lib/derbynet.jar" { // This permission lets the Network Server manage connections from // clients originating from the localhost, on any port. Consider the // security implications before you open up database connections // from other hosts. // permission java.net.SocketPermission "localhost:0-", "accept,listen"; // Needed for server tracing. // permission java.io.FilePermission "/usr/local/shoppingCartApp/trace/-", "read,write,delete"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; // Mandatory if running with a customized policy file. // permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write"; // // JMX: Uncomment this permission to allow the ping operation of the // NetworkServerMBean to connect to the Network Server. // // permission java.net.SocketPermission "*", "connect,resolve"; // Needed by the sysinfo tool only. You may want to remove the // block of permissions below if you don't plan to use it. The file // permission is needed to check the existence of jars on the // classpath. You can limit this permission to just the locations // which hold your jar files. // // This block of permissions is granted to derbynet.jar under the // assumption that derbynet.jar is the first jar file in your // classpath which contains the sysinfo classes. If that is not the // case, then you will want to grant this block of permissions to // the first jar file in your classpath which contains the sysinfo // classes. Those classes are bundled into the following <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> jar // files: // // derbynet.jar // derby.jar // derbyclient.jar // derbytools.jar // permission java.util.PropertyPermission "user.*", "read"; permission java.util.PropertyPermission "java.home", "read"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.runtime.version", "read"; permission java.util.PropertyPermission "java.fullversion", "read"; permission java.lang.RuntimePermission "getProtectionDomain"; permission java.io.FilePermission "/usr/local/shoppingCartApp/jars/-", "read"; permission java.io.FilePer mission "java.runtime.version", "read"; permission java.io.FilePermission "java.fullversion", "read"; };</source>
<seg-source><mrk mid="0" mtype="seg">grant codeBase "file:/usr/local/share/sw/derby/lib/derby.jar" { // These permissions are needed for everyday, embedded <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> usage.</mrk><mrk mid="1" mtype="seg"> // permission java.lang.RuntimePermission "createClassLoader"; permission java.util.PropertyPermission "derby.*", "read"; permission java.util.PropertyPermission "user.dir", "read"; // The next two properties are used to determine if the VM is 32 or // 64 bit.</mrk><mrk mid="2" mtype="seg"> // permission java.util.PropertyPermission "sun.arch.data.model", "read"; permission java.util.PropertyPermission "os.arch", "read"; // Customized to actual location of derby.system.home: // permission java.io.FilePermission "/usr/local/shoppingCartApp/databases", "read"; permission java.io.FilePermission "/usr/local/shoppingCartApp/databases/-", "read,write,delete"; // This permission lets a DBA reload the policy file while the server // is still running.</mrk><mrk mid="3" mtype="seg"> The policy file is reloaded by invoking the // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure.</mrk><mrk mid="4" mtype="seg"> // permission java.security.SecurityPermission "getPolicy"; // This permission lets you backup and restore databases // to and from a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/backups/-", "read,write,delete"; // This permission lets you import data from // a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/imports/-", "read"; // This permission lets you export data to // a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/exports/-", "write"; // This permission lets you load your databases with jar files of // application code // permission java.io.FilePermission "/usr/local/shoppingCartApp/lib/*", "read"; // LDAP server on localhost using default LDAP port 389: // permission java.net.SocketPermission "localhost:389", "connect,resolve"; // Permissions needed for JMX based management and monitoring.</mrk><mrk mid="5" mtype="seg"> // Uncomment the following MBeanServerPermission, MBeanPermission and // MBeanTrustPermission if you need JMX monitoring.</mrk><mrk mid="6" mtype="seg"> Consider the // security implications before you open up for JMX // monitoring.</mrk><mrk mid="7" mtype="seg"> // // Allows this code to create an MBeanServer: // // permission javax.management.MBeanServerPermission // "createMBeanServer"; // // Allows access to <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby.</mrk><mrk mid="8" mtype="seg"> <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> must be allowed to register and unregister // these MBeans.</mrk><mrk mid="9" mtype="seg"> It is possible to allow access only to specific // MBeans, attributes or operations.</mrk><mrk mid="10" mtype="seg"> To fine-tune this permission, see // the API documentation for javax.management.MBeanPermission or the // JMX Instrumentation and Agent Specification: // // permission javax.management.MBeanPermission // "org.apache.derby.*#[org.apache.derby:*]", // "registerMBean, unregisterMBean"; // // Trusts <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these // in the MBean server: // // permission javax.management.MBeanTrustPermission "register"; // getProtectionDomain is an optional permission needed for printing // classpath information to derby.log.</mrk><mrk mid="11" mtype="seg"> Consider if this could be a // security risk before enabling it.</mrk><mrk mid="12" mtype="seg"> // // permission java.lang.RuntimePermission "getProtectionDomain"; // The following permission must be granted for // Connection.abort(Executor) to work.</mrk><mrk mid="13" mtype="seg"> Note that this permission must // also be granted to outer (application) code domains.</mrk><mrk mid="14" mtype="seg"> // Uncomment this permission if you plan to use Connection.abort.</mrk><mrk mid="15" mtype="seg"> // // permission java.sql.SQLPermission "callAbort"; // Needed by file permissions restriction system (see the // documentation for derby.storage.useDefaultFilePermissions in the // Reference Manual).</mrk><mrk mid="16" mtype="seg"> Consider restricting the database file-level // permissions for security.</mrk><mrk mid="17" mtype="seg"> // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; }; grant codeBase "file:/usr/local/share/sw/derby/lib/derbynet.jar" { // This permission lets the Network Server manage connections from // clients originating from the localhost, on any port.</mrk><mrk mid="18" mtype="seg"> Consider the // security implications before you open up database connections // from other hosts.</mrk><mrk mid="19" mtype="seg"> // permission java.net.SocketPermission "localhost:0-", "accept,listen"; // Needed for server tracing.</mrk><mrk mid="20" mtype="seg"> // permission java.io.FilePermission "/usr/local/shoppingCartApp/trace/-", "read,write,delete"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; // Mandatory if running with a customized policy file.</mrk><mrk mid="21" mtype="seg"> // permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write"; // // JMX: Uncomment this permission to allow the ping operation of the // NetworkServerMBean to connect to the Network Server.</mrk><mrk mid="22" mtype="seg"> // // permission java.net.SocketPermission "*", "connect,resolve"; // Needed by the sysinfo tool only.</mrk><mrk mid="23" mtype="seg"> You may want to remove the // block of permissions below if you don't plan to use it.</mrk><mrk mid="24" mtype="seg"> The file // permission is needed to check the existence of jars on the // classpath.</mrk><mrk mid="25" mtype="seg"> You can limit this permission to just the locations // which hold your jar files.</mrk><mrk mid="26" mtype="seg"> // // This block of permissions is granted to derbynet.jar under the // assumption that derbynet.jar is the first jar file in your // classpath which contains the sysinfo classes.</mrk><mrk mid="27" mtype="seg"> If that is not the // case, then you will want to grant this block of permissions to // the first jar file in your classpath which contains the sysinfo // classes.</mrk><mrk mid="28" mtype="seg"> Those classes are bundled into the following <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> jar // files: // // derbynet.jar // derby.jar // derbyclient.jar // derbytools.jar // permission java.util.PropertyPermission "user.*", "read"; permission java.util.PropertyPermission "java.home", "read"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.runtime.version", "read"; permission java.util.PropertyPermission "java.fullversion", "read"; permission java.lang.RuntimePermission "getProtectionDomain"; permission java.io.FilePermission "/usr/local/shoppingCartApp/jars/-", "read"; permission java.io.FilePer mission "java.runtime.version", "read"; permission java.io.FilePermission "java.fullversion", "read"; };</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">grant codeBase "file:/usr/local/share/sw/derby/lib/derby.jar" { // These permissions are needed for everyday, embedded <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> usage.</mrk><mrk mid="1" mtype="seg"> // permission java.lang.RuntimePermission "createClassLoader"; permission java.util.PropertyPermission "derby.*", "read"; permission java.util.PropertyPermission "user.dir", "read"; // The next two properties are used to determine if the VM is 32 or // 64 bit.</mrk><mrk mid="2" mtype="seg"> // permission java.util.PropertyPermission "sun.arch.data.model", "read"; permission java.util.PropertyPermission "os.arch", "read"; // Customized to actual location of derby.system.home: // permission java.io.FilePermission "/usr/local/shoppingCartApp/databases", "read"; permission java.io.FilePermission "/usr/local/shoppingCartApp/databases/-", "read,write,delete"; // This permission lets a DBA reload the policy file while the server // is still running.</mrk><mrk mid="3" mtype="seg"> The policy file is reloaded by invoking the // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure.</mrk><mrk mid="4" mtype="seg"> // permission java.security.SecurityPermission "getPolicy"; // This permission lets you backup and restore databases // to and from a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/backups/-", "read,write,delete"; // This permission lets you import data from // a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/imports/-", "read"; // This permission lets you export data to // a selected branch of the local file system: // permission java.io.FilePermission "/usr/local/shoppingCartApp/exports/-", "write"; // This permission lets you load your databases with jar files of // application code // permission java.io.FilePermission "/usr/local/shoppingCartApp/lib/*", "read"; // LDAP server on localhost using default LDAP port 389: // permission java.net.SocketPermission "localhost:389", "connect,resolve"; // Permissions needed for JMX based management and monitoring.</mrk><mrk mid="5" mtype="seg"> // Uncomment the following MBeanServerPermission, MBeanPermission and // MBeanTrustPermission if you need JMX monitoring.</mrk><mrk mid="6" mtype="seg"> Consider the // security implications before you open up for JMX // monitoring.</mrk><mrk mid="7" mtype="seg"> // // Allows this code to create an MBeanServer: // // permission javax.management.MBeanServerPermission // "createMBeanServer"; // // Allows access to <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby.</mrk><mrk mid="8" mtype="seg"> <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept> must be allowed to register and unregister // these MBeans.</mrk><mrk mid="9" mtype="seg"> It is possible to allow access only to specific // MBeans, attributes or operations.</mrk><mrk mid="10" mtype="seg"> To fine-tune this permission, see // the API documentation for javax.management.MBeanPermission or the // JMX Instrumentation and Agent Specification: // // permission javax.management.MBeanPermission // "org.apache.derby.*#[org.apache.derby:*]", // "registerMBean, unregisterMBean"; // // Trusts <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these // in the MBean server: // // permission javax.management.MBeanTrustPermission "register"; // getProtectionDomain is an optional permission needed for printing // classpath information to derby.log.</mrk><mrk mid="11" mtype="seg"> Consider if this could be a // security risk before enabling it.</mrk><mrk mid="12" mtype="seg"> // // permission java.lang.RuntimePermission "getProtectionDomain"; // The following permission must be granted for // Connection.abort(Executor) to work.</mrk><mrk mid="13" mtype="seg"> Note that this permission must // also be granted to outer (application) code domains.</mrk><mrk mid="14" mtype="seg"> // Uncomment this permission if you plan to use Connection.abort.</mrk><mrk mid="15" mtype="seg"> // // permission java.sql.SQLPermission "callAbort"; // Needed by file permissions restriction system (see the // documentation for derby.storage.useDefaultFilePermissions in the // Reference Manual).</mrk><mrk mid="16" mtype="seg"> Consider restricting the database file-level // permissions for security.</mrk><mrk mid="17" mtype="seg"> // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; }; grant codeBase "file:/usr/local/share/sw/derby/lib/derbynet.jar" { // This permission lets the Network Server manage connections from // clients originating from the localhost, on any port.</mrk><mrk mid="18" mtype="seg"> Consider the // security implications before you open up database connections // from other hosts.</mrk><mrk mid="19" mtype="seg"> // permission java.net.SocketPermission "localhost:0-", "accept,listen"; // Needed for server tracing.</mrk><mrk mid="20" mtype="seg"> // permission java.io.FilePermission "/usr/local/shoppingCartApp/trace/-", "read,write,delete"; // Needed by file permissions restriction system: // permission java.lang.RuntimePermission "accessUserInformation"; permission java.lang.RuntimePermission "getFileStoreAttributes"; // Mandatory if running with a customized policy file.</mrk><mrk mid="21" mtype="seg"> // permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write"; // // JMX: Uncomment this permission to allow the ping operation of the // NetworkServerMBean to connect to the Network Server.</mrk><mrk mid="22" mtype="seg"> // // permission java.net.SocketPermission "*", "connect,resolve"; // Needed by the sysinfo tool only.</mrk><mrk mid="23" mtype="seg"> You may want to remove the // block of permissions below if you don't plan to use it.</mrk><mrk mid="24" mtype="seg"> The file // permission is needed to check the existence of jars on the // classpath.</mrk><mrk mid="25" mtype="seg"> You can limit this permission to just the locations // which hold your jar files.</mrk><mrk mid="26" mtype="seg"> // // This block of permissions is granted to derbynet.jar under the // assumption that derbynet.jar is the first jar file in your // classpath which contains the sysinfo classes.</mrk><mrk mid="27" mtype="seg"> If that is not the // case, then you will want to grant this block of permissions to // the first jar file in your classpath which contains the sysinfo // classes.</mrk><mrk mid="28" mtype="seg"> Those classes are bundled into the following <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept> jar // files: // // derbynet.jar // derby.jar // derbyclient.jar // derbytools.jar // permission java.util.PropertyPermission "user.*", "read"; permission java.util.PropertyPermission "java.home", "read"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.runtime.version", "read"; permission java.util.PropertyPermission "java.fullversion", "read"; permission java.lang.RuntimePermission "getProtectionDomain"; permission java.io.FilePermission "/usr/local/shoppingCartApp/jars/-", "read"; permission java.io.FilePer mission "java.runtime.version", "read"; permission java.io.FilePermission "java.fullversion", "read"; };</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">After customizing the Basic policy, you may bring up the Network Server as follows:</source>
<seg-source><mrk mid="0" mtype="seg">After customizing the Basic policy, you may bring up the Network Server as follows:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">After customizing the Basic policy, you may bring up the Network Server as follows:</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java -Djava.security.manager \ -Djava.security.policy=/usr/local/shoppingCartApp/lib/myCustomized.policy \ org.apache.derby.drda.NetworkServerControl start -h localhost<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java -Djava.security.manager \ -Djava.security.policy=/usr/local/shoppingCartApp/lib/myCustomized.policy \ org.apache.derby.drda.NetworkServerControl start -h localhost<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java -Djava.security.manager \ -Djava.security.policy=/usr/local/shoppingCartApp/lib/myCustomized.policy \ org.apache.derby.drda.NetworkServerControl start -h localhost<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
</body>
</file>
</xliff>
