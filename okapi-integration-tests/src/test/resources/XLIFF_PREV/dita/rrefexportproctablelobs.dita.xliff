<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefexportproctablelobs.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE<ept id="1">&lt;/codeph&gt;</ept> system procedure to export all the data from a table, and place the LOB data into a separate export file. A reference to the location of the LOB data is placed in the LOB column in the main export file.</source>
<seg-source><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE<ept id="1">&lt;/codeph&gt;</ept> system procedure to export all the data from a table, and place the LOB data into a separate export file.</mrk><mrk mid="1" mtype="seg"> A reference to the location of the LOB data is placed in the LOB column in the main export file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE<ept id="1">&lt;/codeph&gt;</ept> system procedure to export all the data from a table, and place the LOB data into a separate export file.</mrk><mrk mid="1" mtype="seg"> A reference to the location of the LOB data is placed in the LOB column in the main export file.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">system procedures</source>
<seg-source><mrk mid="0" mtype="seg">system procedures</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">system procedures</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">system procedures</source>
<seg-source><mrk mid="0" mtype="seg">system procedures</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">system procedures</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">For security concerns, and to avoid accidental file damage, this EXPORT procedure does not export data into an existing file. You must specify a filename in the EXPORT procedure that does not exist. When you run the procedure the file is created and the data is exported into the new file.</source>
<seg-source><mrk mid="0" mtype="seg">For security concerns, and to avoid accidental file damage, this EXPORT procedure does not export data into an existing file.</mrk><mrk mid="1" mtype="seg"> You must specify a filename in the EXPORT procedure that does not exist.</mrk><mrk mid="2" mtype="seg"> When you run the procedure the file is created and the data is exported into the new file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For security concerns, and to avoid accidental file damage, this EXPORT procedure does not export data into an existing file.</mrk><mrk mid="1" mtype="seg"> You must specify a filename in the EXPORT procedure that does not exist.</mrk><mrk mid="2" mtype="seg"> When you run the procedure the file is created and the data is exported into the new file.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">The data is exported using a delimited file format.</source>
<seg-source><mrk mid="0" mtype="seg">The data is exported using a delimited file format.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The data is exported using a delimited file format.</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> issues a COMMIT or a ROLLBACK statement after each import and export procedure is run (a COMMIT if the procedure completes successfully, a ROLLBACK if it fails). For this reason, you should issue either a COMMIT or ROLLBACK statement to complete all transactions and release all table-level locks before you invoke an import or export procedure.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> issues a COMMIT or a ROLLBACK statement after each import and export procedure is run (a COMMIT if the procedure completes successfully, a ROLLBACK if it fails).</mrk><mrk mid="1" mtype="seg"> For this reason, you should issue either a COMMIT or ROLLBACK statement to complete all transactions and release all table-level locks before you invoke an import or export procedure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> issues a COMMIT or a ROLLBACK statement after each import and export procedure is run (a COMMIT if the procedure completes successfully, a ROLLBACK if it fails).</mrk><mrk mid="1" mtype="seg"> For this reason, you should issue either a COMMIT or ROLLBACK statement to complete all transactions and release all table-level locks before you invoke an import or export procedure.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">For more information on using this procedure, see the section "Importing and exporting data" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citadmin"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">For more information on using this procedure, see the section "Importing and exporting data" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citadmin"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For more information on using this procedure, see the section "Importing and exporting data" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citadmin"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE ( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN FILENAME VARCHAR(32672), IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128) IN LOBSFILENAME VARCHAR(32672) )</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE ( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN FILENAME VARCHAR(32672), IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128) IN LOBSFILENAME VARCHAR(32672) )</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE ( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN FILENAME VARCHAR(32672), IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128) IN LOBSFILENAME VARCHAR(32672) )</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">When you run this procedure, the column data is written to the main export file in a delimited data file format.</source>
<seg-source><mrk mid="0" mtype="seg">When you run this procedure, the column data is written to the main export file in a delimited data file format.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">When you run this procedure, the column data is written to the main export file in a delimited data file format.</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">SCHEMANAME</source>
<seg-source><mrk mid="0" mtype="seg">SCHEMANAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SCHEMANAME</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">Specifies the schema of the table. You can specify a NULL value to use the default schema name. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>SCHEMANAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the schema of the table.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to use the default schema name.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>SCHEMANAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the schema of the table.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to use the default schema name.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>SCHEMANAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">TABLENAME</source>
<seg-source><mrk mid="0" mtype="seg">TABLENAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">TABLENAME</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">Specifies the table name of the table or view from which the data is to be exported. This table cannot be a system table or a declared temporary table. The string must exactly match the case of the table name. Specifying a NULL value results in an error. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>TABLENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the table name of the table or view from which the data is to be exported.</mrk><mrk mid="1" mtype="seg"> This table cannot be a system table or a declared temporary table.</mrk><mrk mid="2" mtype="seg"> The string must exactly match the case of the table name.</mrk><mrk mid="3" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>TABLENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the table name of the table or view from which the data is to be exported.</mrk><mrk mid="1" mtype="seg"> This table cannot be a system table or a declared temporary table.</mrk><mrk mid="2" mtype="seg"> The string must exactly match the case of the table name.</mrk><mrk mid="3" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>TABLENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">FILENAME</source>
<seg-source><mrk mid="0" mtype="seg">FILENAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">FILENAME</mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">Specifies the name of a new file to which the data is to be exported. If the path is omitted, the current working directory is used. If the name of a file that already exists is specified, the export procedure returns an error. The specified location of the file should refer to the server-side location if you are using the Network Server. Specifying a NULL value results in an error. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>FILENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (32672) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the name of a new file to which the data is to be exported.</mrk><mrk mid="1" mtype="seg"> If the path is omitted, the current working directory is used.</mrk><mrk mid="2" mtype="seg"> If the name of a file that already exists is specified, the export procedure returns an error.</mrk><mrk mid="3" mtype="seg"> The specified location of the file should refer to the server-side location if you are using the Network Server.</mrk><mrk mid="4" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="5" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>FILENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (32672) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the name of a new file to which the data is to be exported.</mrk><mrk mid="1" mtype="seg"> If the path is omitted, the current working directory is used.</mrk><mrk mid="2" mtype="seg"> If the name of a file that already exists is specified, the export procedure returns an error.</mrk><mrk mid="3" mtype="seg"> The specified location of the file should refer to the server-side location if you are using the Network Server.</mrk><mrk mid="4" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="5" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>FILENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (32672) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">COLUMNDELIMITER</source>
<seg-source><mrk mid="0" mtype="seg">COLUMNDELIMITER</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">COLUMNDELIMITER</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en">Specifies a column delimiter. The specified character is used in place of a comma to signify the end of a column. You can specify a NULL value to use the default value of a comma. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter must be a CHAR (1) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies a column delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of a comma to signify the end of a column.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a comma.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter must be a CHAR (1) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies a column delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of a comma to signify the end of a column.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a comma.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter must be a CHAR (1) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">CHARACTERDELIMITER</source>
<seg-source><mrk mid="0" mtype="seg">CHARACTERDELIMITER</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CHARACTERDELIMITER</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en">Specifies a character delimiter. The specified character is used in place of double quotation marks to enclose a character string. You can specify a NULL value to use the default value of a double quotation mark. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CHARACTERDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR (1) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies a character delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of double quotation marks to enclose a character string.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a double quotation mark.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CHARACTERDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR (1) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies a character delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of double quotation marks to enclose a character string.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a double quotation mark.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CHARACTERDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR (1) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">CODESET</source>
<seg-source><mrk mid="0" mtype="seg">CODESET</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CODESET</mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">Specifies the code set of the data in the export file. The code set name should be one of the Java-supported character encoding sets. Data is converted from the database code page to the specified code page before writing to the file. You can specify a NULL value to write the data in the same code page as the JVM in which it is being executed. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CODESET<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the code set of the data in the export file.</mrk><mrk mid="1" mtype="seg"> The code set name should be one of the Java-supported character encoding sets.</mrk><mrk mid="2" mtype="seg"> Data is converted from the database code page to the specified code page before writing to the file.</mrk><mrk mid="3" mtype="seg"> You can specify a NULL value to write the data in the same code page as the JVM in which it is being executed.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CODESET<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the code set of the data in the export file.</mrk><mrk mid="1" mtype="seg"> The code set name should be one of the Java-supported character encoding sets.</mrk><mrk mid="2" mtype="seg"> Data is converted from the database code page to the specified code page before writing to the file.</mrk><mrk mid="3" mtype="seg"> You can specify a NULL value to write the data in the same code page as the JVM in which it is being executed.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CODESET<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (128) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en">LOBSFILENAME</source>
<seg-source><mrk mid="0" mtype="seg">LOBSFILENAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">LOBSFILENAME</mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en">Specifies the file that the large object data is exported to. If the path is omitted, the lob file is created in the same directory as the main export file. If you specify the name of an existing file, the export utility overwrites the contents of the file. The data is not appended to the file. If you are using the Network Server, the file should be in a server-side location. Specifying a NULL value results in an error. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>LOBSFILENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (32672) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the file that the large object data is exported to.</mrk><mrk mid="1" mtype="seg"> If the path is omitted, the lob file is created in the same directory as the main export file.</mrk><mrk mid="2" mtype="seg"> If you specify the name of an existing file, the export utility overwrites the contents of the file.</mrk><mrk mid="3" mtype="seg"> The data is not appended to the file.</mrk><mrk mid="4" mtype="seg"> If you are using the Network Server, the file should be in a server-side location.</mrk><mrk mid="5" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="6" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>LOBSFILENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (32672) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the file that the large object data is exported to.</mrk><mrk mid="1" mtype="seg"> If the path is omitted, the lob file is created in the same directory as the main export file.</mrk><mrk mid="2" mtype="seg"> If you specify the name of an existing file, the export utility overwrites the contents of the file.</mrk><mrk mid="3" mtype="seg"> The data is not appended to the file.</mrk><mrk mid="4" mtype="seg"> If you are using the Network Server, the file should be in a server-side location.</mrk><mrk mid="5" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="6" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>LOBSFILENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR (32672) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en">If you create a schema, table, or column name as a non-delimited identifier, you must pass the name to the export procedure using all uppercase characters. If you created a schema or table name as a delimited identifier, you must pass the name to the export procedure using the same case that was used when it was created.</source>
<seg-source><mrk mid="0" mtype="seg">If you create a schema, table, or column name as a non-delimited identifier, you must pass the name to the export procedure using all uppercase characters.</mrk><mrk mid="1" mtype="seg"> If you created a schema or table name as a delimited identifier, you must pass the name to the export procedure using the same case that was used when it was created.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you create a schema, table, or column name as a non-delimited identifier, you must pass the name to the export procedure using all uppercase characters.</mrk><mrk mid="1" mtype="seg"> If you created a schema or table name as a delimited identifier, you must pass the name to the export procedure using the same case that was used when it was created.</mrk></target>
</trans-unit>
<trans-unit id="tu29">
<source xml:lang="en">Execute privileges</source>
<seg-source><mrk mid="0" mtype="seg">Execute privileges</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Execute privileges</mrk></target>
</trans-unit>
<trans-unit id="tu30">
<source xml:lang="en">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default. See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information. The database owner can grant access to other users. The user must also have SELECT privileges on the table.</source>
<seg-source><mrk mid="0" mtype="seg">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default.</mrk><mrk mid="1" mtype="seg"> See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information.</mrk><mrk mid="2" mtype="seg"> The database owner can grant access to other users.</mrk><mrk mid="3" mtype="seg"> The user must also have SELECT privileges on the table.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default.</mrk><mrk mid="1" mtype="seg"> See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information.</mrk><mrk mid="2" mtype="seg"> The database owner can grant access to other users.</mrk><mrk mid="3" mtype="seg"> The user must also have SELECT privileges on the table.</mrk></target>
</trans-unit>
<trans-unit id="tu31">
<source xml:lang="en">Example exporting all data from a table, using a separate export file for the LOB data</source>
<seg-source><mrk mid="0" mtype="seg">Example exporting all data from a table, using a separate export file for the LOB data</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example exporting all data from a table, using a separate export file for the LOB data</mrk></target>
</trans-unit>
<trans-unit id="tu32">
<source xml:lang="en">The following example shows how to export data from the STAFF table in a sample database to the main file <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="1">&lt;/codeph&gt;</ept> and the LOB export file <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>pictures.dat<ept id="2">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The following example shows how to export data from the STAFF table in a sample database to the main file <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="1">&lt;/codeph&gt;</ept> and the LOB export file <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>pictures.dat<ept id="2">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example shows how to export data from the STAFF table in a sample database to the main file <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="1">&lt;/codeph&gt;</ept> and the LOB export file <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>pictures.dat<ept id="2">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu33">
<source xml:lang="en">CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE( 'APP', 'STAFF', 'c:\data\staff.del', ',' ,'"', 'UTF-8', 'c:\data\pictures.dat');</source>
<seg-source><mrk mid="0" mtype="seg">CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE( 'APP', 'STAFF', 'c:\data\staff.del', ',' ,'"', 'UTF-8', 'c:\data\pictures.dat');</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE( 'APP', 'STAFF', 'c:\data\staff.del', ',' ,'"', 'UTF-8', 'c:\data\pictures.dat');</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
