<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefsyscsinvalidatestoredstmts.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS system procedure</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS system procedure</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS system procedure</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="1">&lt;/codeph&gt;</ept> system procedure invalidates all stored prepared statements (that is, all statements in the SYSSTATEMENTS system table).</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="1">&lt;/codeph&gt;</ept> system procedure invalidates all stored prepared statements (that is, all statements in the SYSSTATEMENTS system table).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="1">&lt;/codeph&gt;</ept> system procedure invalidates all stored prepared statements (that is, all statements in the SYSSTATEMENTS system table).</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">The next time one of the invalid stored prepared statements in the <bpt id="1" ctype="x-xref">&lt;xref href="rrefsistabs33768.dita#rrefsistabs33768"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> is executed, it will be recompiled, and a new plan will be generated for it.</source>
<seg-source><mrk mid="0" mtype="seg">The next time one of the invalid stored prepared statements in the <bpt id="1" ctype="x-xref">&lt;xref href="rrefsistabs33768.dita#rrefsistabs33768"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> is executed, it will be recompiled, and a new plan will be generated for it.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The next time one of the invalid stored prepared statements in the <bpt id="1" ctype="x-xref">&lt;xref href="rrefsistabs33768.dita#rrefsistabs33768"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> is executed, it will be recompiled, and a new plan will be generated for it.</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">Run <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="1">&lt;/codeph&gt;</ept> whenever you think that your metadata queries or triggers are misbehaving -- for example, if they throw <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.lang.NoSuchMethodError<ept id="2">&lt;/codeph&gt;</ept> or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>java.lang.NoSuchMethodException<ept id="3">&lt;/codeph&gt;</ept> on execution. <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> stores plans for triggers and metadata queries in the database. These should be invalidated automatically on upgrade and at other necessary times. Should you encounter an instance where they are not, you have found a bug that you should report, but one that you can likely work around by running <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="5">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Run <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="1">&lt;/codeph&gt;</ept> whenever you think that your metadata queries or triggers are misbehaving -- for example, if they throw <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.lang.NoSuchMethodError<ept id="2">&lt;/codeph&gt;</ept> or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>java.lang.NoSuchMethodException<ept id="3">&lt;/codeph&gt;</ept> on execution.</mrk><mrk mid="1" mtype="seg"> <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> stores plans for triggers and metadata queries in the database.</mrk><mrk mid="2" mtype="seg"> These should be invalidated automatically on upgrade and at other necessary times.</mrk><mrk mid="3" mtype="seg"> Should you encounter an instance where they are not, you have found a bug that you should report, but one that you can likely work around by running <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="5">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Run <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="1">&lt;/codeph&gt;</ept> whenever you think that your metadata queries or triggers are misbehaving -- for example, if they throw <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>java.lang.NoSuchMethodError<ept id="2">&lt;/codeph&gt;</ept> or <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>java.lang.NoSuchMethodException<ept id="3">&lt;/codeph&gt;</ept> on execution.</mrk><mrk mid="1" mtype="seg"> <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> stores plans for triggers and metadata queries in the database.</mrk><mrk mid="2" mtype="seg"> These should be invalidated automatically on upgrade and at other necessary times.</mrk><mrk mid="3" mtype="seg"> Should you encounter an instance where they are not, you have found a bug that you should report, but one that you can likely work around by running <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS<ept id="5">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS()</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS()</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS()</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">No result is returned by this procedure.</source>
<seg-source><mrk mid="0" mtype="seg">No result is returned by this procedure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">No result is returned by this procedure.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">Execute privileges</source>
<seg-source><mrk mid="0" mtype="seg">Execute privileges</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Execute privileges</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default. See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information. The database owner can grant access to other users.</source>
<seg-source><mrk mid="0" mtype="seg">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default.</mrk><mrk mid="1" mtype="seg"> See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information.</mrk><mrk mid="2" mtype="seg"> The database owner can grant access to other users.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default.</mrk><mrk mid="1" mtype="seg"> See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information.</mrk><mrk mid="2" mtype="seg"> The database owner can grant access to other users.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">JDBC example</source>
<seg-source><mrk mid="0" mtype="seg">JDBC example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC example</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">CallableStatement cs = conn.prepareCall ("CALL SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS()"); cs.execute(); cs.close();</source>
<seg-source><mrk mid="0" mtype="seg">CallableStatement cs = conn.prepareCall ("CALL SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS()"); cs.execute(); cs.close();</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CallableStatement cs = conn.prepareCall ("CALL SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS()"); cs.execute(); cs.close();</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">SQL Example</source>
<seg-source><mrk mid="0" mtype="seg">SQL Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL Example</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">CALL SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS();</source>
<seg-source><mrk mid="0" mtype="seg">CALL SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS();</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CALL SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS();</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
