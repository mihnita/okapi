<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="cadminhubbkup01.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Using the backup procedures to perform an online backup</source>
<seg-source><mrk mid="0" mtype="seg">Using the backup procedures to perform an online backup</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Using the backup procedures to perform an online backup</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> procedure or one of the other system backup procedures to perform an online backup of a database to a specified location.</source>
<seg-source><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> procedure or one of the other system backup procedures to perform an online backup of a database to a specified location.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> procedure or one of the other system backup procedures to perform an online backup of a database to a specified location.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Backup procedure</source>
<seg-source><mrk mid="0" mtype="seg">Backup procedure</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Backup procedure</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">SYSCS_BACKUP_DATABASE() system procedure</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_BACKUP_DATABASE() system procedure</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_BACKUP_DATABASE() system procedure</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">The backup procedures are as follows:</source>
<seg-source><mrk mid="0" mtype="seg">The backup procedures are as follows:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The backup procedures are as follows:</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure if you want to make it possible to perform a roll-forward recovery of a damaged database. See <bpt id="3" ctype="x-xref">&lt;xref href="cadminrollforward.dita#cadminrollforward"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept> for details.</source>
<seg-source><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure if you want to make it possible to perform a roll-forward recovery of a damaged database.</mrk><mrk mid="1" mtype="seg"> See <bpt id="3" ctype="x-xref">&lt;xref href="cadminrollforward.dita#cadminrollforward"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept> for details.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure if you want to make it possible to perform a roll-forward recovery of a damaged database.</mrk><mrk mid="1" mtype="seg"> See <bpt id="3" ctype="x-xref">&lt;xref href="cadminrollforward.dita#cadminrollforward"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept> for details.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>NOWAIT<ept id="1">&lt;/codeph&gt;</ept> versions of the procedures do not wait for transactions in progress with unlogged operations to complete before proceeding with the backup; instead, they return an error immediately.</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>NOWAIT<ept id="1">&lt;/codeph&gt;</ept> versions of the procedures do not wait for transactions in progress with unlogged operations to complete before proceeding with the backup; instead, they return an error immediately.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>NOWAIT<ept id="1">&lt;/codeph&gt;</ept> versions of the procedures do not wait for transactions in progress with unlogged operations to complete before proceeding with the backup; instead, they return an error immediately.</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">See the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citref"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> for details about these system procedures.</source>
<seg-source><mrk mid="0" mtype="seg">See the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citref"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> for details about these system procedures.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">See the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citref"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> for details about these system procedures.</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">All four of these system procedures take a string argument that represents the location in which to back up the database. Typically, you provide the full path to the backup directory. (Relative paths are interpreted as relative to the current directory, not to the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.system.home<ept id="1">&lt;/codeph&gt;</ept> directory.)</source>
<seg-source><mrk mid="0" mtype="seg">All four of these system procedures take a string argument that represents the location in which to back up the database.</mrk><mrk mid="1" mtype="seg"> Typically, you provide the full path to the backup directory.</mrk><mrk mid="2" mtype="seg"> (Relative paths are interpreted as relative to the current directory, not to the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.system.home<ept id="1">&lt;/codeph&gt;</ept> directory.)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">All four of these system procedures take a string argument that represents the location in which to back up the database.</mrk><mrk mid="1" mtype="seg"> Typically, you provide the full path to the backup directory.</mrk><mrk mid="2" mtype="seg"> (Relative paths are interpreted as relative to the current directory, not to the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.system.home<ept id="1">&lt;/codeph&gt;</ept> directory.)</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">For example, to specify a backup location of <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>c:/mybackups/2012-04-01<ept id="1">&lt;/codeph&gt;</ept> for a database that is currently open, use the following statement (forward slashes are used as path separators in SQL commands):</source>
<seg-source><mrk mid="0" mtype="seg">For example, to specify a backup location of <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>c:/mybackups/2012-04-01<ept id="1">&lt;/codeph&gt;</ept> for a database that is currently open, use the following statement (forward slashes are used as path separators in SQL commands):</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For example, to specify a backup location of <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>c:/mybackups/2012-04-01<ept id="1">&lt;/codeph&gt;</ept> for a database that is currently open, use the following statement (forward slashes are used as path separators in SQL commands):</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE('c:/mybackups/2012-04-01')<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE('c:/mybackups/2012-04-01')<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE('c:/mybackups/2012-04-01')<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure puts the database into a state in which it can be safely copied. The procedure then copies the entire original database directory (including data files, online transaction log files, and jar files) to the specified backup directory. Files that are not within the original database directory (for example, <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.properties<ept id="3">&lt;/codeph&gt;</ept>) are <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>not<ept id="4">&lt;/i&gt;</ept> copied. With the exception of a few cases mentioned in <bpt id="5" ctype="x-xref">&lt;xref href="cadminhubbkup01.dita#cadminhubbkup01/hubbkupunlogged"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>, the procedure does not block concurrent transactions at any time.</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure puts the database into a state in which it can be safely copied.</mrk><mrk mid="1" mtype="seg"> The procedure then copies the entire original database directory (including data files, online transaction log files, and jar files) to the specified backup directory.</mrk><mrk mid="2" mtype="seg"> Files that are not within the original database directory (for example, <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.properties<ept id="3">&lt;/codeph&gt;</ept>) are <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>not<ept id="4">&lt;/i&gt;</ept> copied.</mrk><mrk mid="3" mtype="seg"> With the exception of a few cases mentioned in <bpt id="5" ctype="x-xref">&lt;xref href="cadminhubbkup01.dita#cadminhubbkup01/hubbkupunlogged"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>, the procedure does not block concurrent transactions at any time.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure puts the database into a state in which it can be safely copied.</mrk><mrk mid="1" mtype="seg"> The procedure then copies the entire original database directory (including data files, online transaction log files, and jar files) to the specified backup directory.</mrk><mrk mid="2" mtype="seg"> Files that are not within the original database directory (for example, <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.properties<ept id="3">&lt;/codeph&gt;</ept>) are <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>not<ept id="4">&lt;/i&gt;</ept> copied.</mrk><mrk mid="3" mtype="seg"> With the exception of a few cases mentioned in <bpt id="5" ctype="x-xref">&lt;xref href="cadminhubbkup01.dita#cadminhubbkup01/hubbkupunlogged"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>, the procedure does not block concurrent transactions at any time.</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">A backup made with the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure is not a full copy of the database, but depends on the log files created in the database since the backup. An attempt to access the backup directly will invalidate the backup. The result could include a corrupted database, missing data, errors during a subsequent attempt at restoring the database, or database corruption errors encountered only once the restored database is being used. The only supported way to access this kind of backup is to restore the database as documented in <bpt id="3" ctype="x-xref">&lt;xref href="cadminrollforward.dita#cadminrollforward"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">A backup made with the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure is not a full copy of the database, but depends on the log files created in the database since the backup.</mrk><mrk mid="1" mtype="seg"> An attempt to access the backup directly will invalidate the backup.</mrk><mrk mid="2" mtype="seg"> The result could include a corrupted database, missing data, errors during a subsequent attempt at restoring the database, or database corruption errors encountered only once the restored database is being used.</mrk><mrk mid="3" mtype="seg"> The only supported way to access this kind of backup is to restore the database as documented in <bpt id="3" ctype="x-xref">&lt;xref href="cadminrollforward.dita#cadminrollforward"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A backup made with the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE<ept id="1">&lt;/codeph&gt;</ept> or <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT<ept id="2">&lt;/codeph&gt;</ept> procedure is not a full copy of the database, but depends on the log files created in the database since the backup.</mrk><mrk mid="1" mtype="seg"> An attempt to access the backup directly will invalidate the backup.</mrk><mrk mid="2" mtype="seg"> The result could include a corrupted database, missing data, errors during a subsequent attempt at restoring the database, or database corruption errors encountered only once the restored database is being used.</mrk><mrk mid="3" mtype="seg"> The only supported way to access this kind of backup is to restore the database as documented in <bpt id="3" ctype="x-xref">&lt;xref href="cadminrollforward.dita#cadminrollforward"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">The following example shows how to back up a database to a directory with a name that reflects the current date:</source>
<seg-source><mrk mid="0" mtype="seg">The following example shows how to back up a database to a directory with a name that reflects the current date:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example shows how to back up a database to a directory with a name that reflects the current date:</mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">public static void backUpDatabase(Connection conn) throws SQLException { <bpt id="1" ctype="x-b">&lt;b&gt;</bpt>// Get today's date as a string:<ept id="1">&lt;/b&gt;</ept> java.text.SimpleDateFormat todaysDate = new java.text.SimpleDateFormat("yyyy-MM-dd"); String backupdirectory = "c:/mybackups/" + todaysDate.format((java.util.Calendar.getInstance()).getTime()); CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)"); cs.setString(1, backupdirectory); cs.execute(); cs.close(); System.out.println("backed up database to " + backupdirectory); }</source>
<seg-source><mrk mid="0" mtype="seg">public static void backUpDatabase(Connection conn) throws SQLException { <bpt id="1" ctype="x-b">&lt;b&gt;</bpt>// Get today's date as a string:<ept id="1">&lt;/b&gt;</ept> java.text.SimpleDateFormat todaysDate = new java.text.SimpleDateFormat("yyyy-MM-dd"); String backupdirectory = "c:/mybackups/" + todaysDate.format((java.util.Calendar.getInstance()).getTime()); CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)"); cs.setString(1, backupdirectory); cs.execute(); cs.close(); System.out.println("backed up database to " + backupdirectory); }</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">public static void backUpDatabase(Connection conn) throws SQLException { <bpt id="1" ctype="x-b">&lt;b&gt;</bpt>// Get today's date as a string:<ept id="1">&lt;/b&gt;</ept> java.text.SimpleDateFormat todaysDate = new java.text.SimpleDateFormat("yyyy-MM-dd"); String backupdirectory = "c:/mybackups/" + todaysDate.format((java.util.Calendar.getInstance()).getTime()); CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)"); cs.setString(1, backupdirectory); cs.execute(); cs.close(); System.out.println("backed up database to " + backupdirectory); }</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">For a database that was backed up on 2012-04-01, the previous commands copy the current database to a directory of the same name in <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>c:/mybackups/2012-04-01<ept id="1">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">For a database that was backed up on 2012-04-01, the previous commands copy the current database to a directory of the same name in <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>c:/mybackups/2012-04-01<ept id="1">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For a database that was backed up on 2012-04-01, the previous commands copy the current database to a directory of the same name in <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>c:/mybackups/2012-04-01<ept id="1">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en">Uncommitted transactions do not appear in the backed-up database.</source>
<seg-source><mrk mid="0" mtype="seg">Uncommitted transactions do not appear in the backed-up database.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Uncommitted transactions do not appear in the backed-up database.</mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">Do not back up different databases with the same name to the same backup directory. If a database of the same name already exists in the backup directory, it is assumed to be an older version and is overwritten.</source>
<seg-source><mrk mid="0" mtype="seg">Do not back up different databases with the same name to the same backup directory.</mrk><mrk mid="1" mtype="seg"> If a database of the same name already exists in the backup directory, it is assumed to be an older version and is overwritten.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Do not back up different databases with the same name to the same backup directory.</mrk><mrk mid="1" mtype="seg"> If a database of the same name already exists in the backup directory, it is assumed to be an older version and is overwritten.</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en">Unlogged Operations</source>
<seg-source><mrk mid="0" mtype="seg">Unlogged Operations</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Unlogged Operations</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">For some operations, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> does not log because it can keep the database consistent without logging the data.</source>
<seg-source><mrk mid="0" mtype="seg">For some operations, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> does not log because it can keep the database consistent without logging the data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For some operations, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> does not log because it can keep the database consistent without logging the data.</mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> procedure will issue an error if there are any unlogged operations in the same transaction as the backup procedure.</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> procedure will issue an error if there are any unlogged operations in the same transaction as the backup procedure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE<ept id="1">&lt;/codeph&gt;</ept> procedure will issue an error if there are any unlogged operations in the same transaction as the backup procedure.</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en">If any unlogged operations are in progress in other transactions in the system when the backup starts, this procedure will block until those transactions are complete before performing the backup.</source>
<seg-source><mrk mid="0" mtype="seg">If any unlogged operations are in progress in other transactions in the system when the backup starts, this procedure will block until those transactions are complete before performing the backup.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If any unlogged operations are in progress in other transactions in the system when the backup starts, this procedure will block until those transactions are complete before performing the backup.</mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> automatically converts unlogged operations to logged mode if they are started while the backup is in progress (except operations that maintain application jar files in the database). Procedures to install, replace, and remove jar files in a database are blocked while the backup is in progress.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> automatically converts unlogged operations to logged mode if they are started while the backup is in progress (except operations that maintain application jar files in the database).</mrk><mrk mid="1" mtype="seg"> Procedures to install, replace, and remove jar files in a database are blocked while the backup is in progress.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> automatically converts unlogged operations to logged mode if they are started while the backup is in progress (except operations that maintain application jar files in the database).</mrk><mrk mid="1" mtype="seg"> Procedures to install, replace, and remove jar files in a database are blocked while the backup is in progress.</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en">If you do not want backup to block until unlogged operations in other transactions are complete, use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept> procedure. This procedure issues an error immediately at the start of the backup if there are any transactions in progress with unlogged operations, instead of waiting for those transactions to complete.</source>
<seg-source><mrk mid="0" mtype="seg">If you do not want backup to block until unlogged operations in other transactions are complete, use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept> procedure.</mrk><mrk mid="1" mtype="seg"> This procedure issues an error immediately at the start of the backup if there are any transactions in progress with unlogged operations, instead of waiting for those transactions to complete.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you do not want backup to block until unlogged operations in other transactions are complete, use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT<ept id="1">&lt;/codeph&gt;</ept> procedure.</mrk><mrk mid="1" mtype="seg"> This procedure issues an error immediately at the start of the backup if there are any transactions in progress with unlogged operations, instead of waiting for those transactions to complete.</mrk></target>
</trans-unit>
<trans-unit id="tu29">
<source xml:lang="en">Unlogged operations include:</source>
<seg-source><mrk mid="0" mtype="seg">Unlogged operations include:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Unlogged operations include:</mrk></target>
</trans-unit>
<trans-unit id="tu30">
<source xml:lang="en">Index creation.</source>
<seg-source><mrk mid="0" mtype="seg">Index creation.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Index creation.</mrk></target>
</trans-unit>
<trans-unit id="tu31">
<source xml:lang="en">Only CREATE INDEX is logged, not all the data inserts into the index. The reason inserts into the index are not logged is that if there is a failure, it will just drop the index.</source>
<seg-source><mrk mid="0" mtype="seg">Only CREATE INDEX is logged, not all the data inserts into the index.</mrk><mrk mid="1" mtype="seg"> The reason inserts into the index are not logged is that if there is a failure, it will just drop the index.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Only CREATE INDEX is logged, not all the data inserts into the index.</mrk><mrk mid="1" mtype="seg"> The reason inserts into the index are not logged is that if there is a failure, it will just drop the index.</mrk></target>
</trans-unit>
<trans-unit id="tu32">
<source xml:lang="en">If you create an index when the backup is in progress, it will be slower, because it has to be logged.</source>
<seg-source><mrk mid="0" mtype="seg">If you create an index when the backup is in progress, it will be slower, because it has to be logged.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you create an index when the backup is in progress, it will be slower, because it has to be logged.</mrk></target>
</trans-unit>
<trans-unit id="tu33">
<source xml:lang="en">Foreign keys and primary keys create backing indexes. Adding those keys to an existing table with data will also run slower.</source>
<seg-source><mrk mid="0" mtype="seg">Foreign keys and primary keys create backing indexes.</mrk><mrk mid="1" mtype="seg"> Adding those keys to an existing table with data will also run slower.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Foreign keys and primary keys create backing indexes.</mrk><mrk mid="1" mtype="seg"> Adding those keys to an existing table with data will also run slower.</mrk></target>
</trans-unit>
<trans-unit id="tu34">
<source xml:lang="en">Importing to an empty table or replacing all the data in a table.</source>
<seg-source><mrk mid="0" mtype="seg">Importing to an empty table or replacing all the data in a table.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Importing to an empty table or replacing all the data in a table.</mrk></target>
</trans-unit>
<trans-unit id="tu35">
<source xml:lang="en">In this case also, data inserts into the table are not logged. Internally, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> creates a new table for the import, changes the catalogs to point to the new table, and drops the original table when the import completes.</source>
<seg-source><mrk mid="0" mtype="seg">In this case also, data inserts into the table are not logged.</mrk><mrk mid="1" mtype="seg"> Internally, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> creates a new table for the import, changes the catalogs to point to the new table, and drops the original table when the import completes.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In this case also, data inserts into the table are not logged.</mrk><mrk mid="1" mtype="seg"> Internally, <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> creates a new table for the import, changes the catalogs to point to the new table, and drops the original table when the import completes.</mrk></target>
</trans-unit>
<trans-unit id="tu36">
<source xml:lang="en">If you perform such an import operation when backup is in progress, it will be slower because data is logged.</source>
<seg-source><mrk mid="0" mtype="seg">If you perform such an import operation when backup is in progress, it will be slower because data is logged.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you perform such an import operation when backup is in progress, it will be slower because data is logged.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
