<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefimportdataproclobs.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE system procedure</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE system procedure</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE system procedure</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE<ept id="1">&lt;/codeph&gt;</ept> system procedure to import data to a subset of columns in a table, where the LOB data is stored in a separate file. The main import file contains all of the other data and a reference to the location of the LOB data.</source>
<seg-source><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE<ept id="1">&lt;/codeph&gt;</ept> system procedure to import data to a subset of columns in a table, where the LOB data is stored in a separate file.</mrk><mrk mid="1" mtype="seg"> The main import file contains all of the other data and a reference to the location of the LOB data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE<ept id="1">&lt;/codeph&gt;</ept> system procedure to import data to a subset of columns in a table, where the LOB data is stored in a separate file.</mrk><mrk mid="1" mtype="seg"> The main import file contains all of the other data and a reference to the location of the LOB data.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> issues a COMMIT or a ROLLBACK statement after each import and export procedure is run (a COMMIT if the procedure completes successfully, a ROLLBACK if it fails). For this reason, you should issue either a COMMIT or ROLLBACK statement to complete all transactions and release all table-level locks before you invoke an import or export procedure.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> issues a COMMIT or a ROLLBACK statement after each import and export procedure is run (a COMMIT if the procedure completes successfully, a ROLLBACK if it fails).</mrk><mrk mid="1" mtype="seg"> For this reason, you should issue either a COMMIT or ROLLBACK statement to complete all transactions and release all table-level locks before you invoke an import or export procedure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> issues a COMMIT or a ROLLBACK statement after each import and export procedure is run (a COMMIT if the procedure completes successfully, a ROLLBACK if it fails).</mrk><mrk mid="1" mtype="seg"> For this reason, you should issue either a COMMIT or ROLLBACK statement to complete all transactions and release all table-level locks before you invoke an import or export procedure.</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">For more information on using this procedure, see the section "Importing and exporting data" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citadmin"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">For more information on using this procedure, see the section "Importing and exporting data" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citadmin"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For more information on using this procedure, see the section "Importing and exporting data" in the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citadmin"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE ( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN INSERTCOLUMNS VARCHAR(32672), IN COLUMNINDEXES VARCHAR(32672), IN FILENAME VARCHAR(32672), IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128), IN REPLACE SMALLINT) )</source>
<seg-source><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE ( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN INSERTCOLUMNS VARCHAR(32672), IN COLUMNINDEXES VARCHAR(32672), IN FILENAME VARCHAR(32672), IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128), IN REPLACE SMALLINT) )</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE ( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN INSERTCOLUMNS VARCHAR(32672), IN COLUMNINDEXES VARCHAR(32672), IN FILENAME VARCHAR(32672), IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128), IN REPLACE SMALLINT) )</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">The import utility looks in the main import file for a reference to the location of the LOB data.</source>
<seg-source><mrk mid="0" mtype="seg">The import utility looks in the main import file for a reference to the location of the LOB data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The import utility looks in the main import file for a reference to the location of the LOB data.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">SCHEMANAME</source>
<seg-source><mrk mid="0" mtype="seg">SCHEMANAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SCHEMANAME</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">Specifies the schema of the table. You can specify a NULL value to use the default schema name. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>SCHEMANAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the schema of the table.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to use the default schema name.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>SCHEMANAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the schema of the table.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to use the default schema name.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>SCHEMANAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">TABLENAME</source>
<seg-source><mrk mid="0" mtype="seg">TABLENAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">TABLENAME</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">Specifies the name of the table into which the data is to be imported. This table cannot be a system table or a declared temporary table. The string must exactly match case of the table name. Specifying a NULL value results in an error. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>TABLENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the name of the table into which the data is to be imported.</mrk><mrk mid="1" mtype="seg"> This table cannot be a system table or a declared temporary table.</mrk><mrk mid="2" mtype="seg"> The string must exactly match case of the table name.</mrk><mrk mid="3" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>TABLENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the name of the table into which the data is to be imported.</mrk><mrk mid="1" mtype="seg"> This table cannot be a system table or a declared temporary table.</mrk><mrk mid="2" mtype="seg"> The string must exactly match case of the table name.</mrk><mrk mid="3" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>TABLENAME<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">INSERTCOLUMNS</source>
<seg-source><mrk mid="0" mtype="seg">INSERTCOLUMNS</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">INSERTCOLUMNS</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">Specifies the comma separated column names of the table into which the data will be imported. You can specify a NULL value to import into all columns of the table. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>INSERTCOLUMNS<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the comma separated column names of the table into which the data will be imported.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to import into all columns of the table.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>INSERTCOLUMNS<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the comma separated column names of the table into which the data will be imported.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to import into all columns of the table.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>INSERTCOLUMNS<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">COLUMNINDEXES</source>
<seg-source><mrk mid="0" mtype="seg">COLUMNINDEXES</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">COLUMNINDEXES</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">Specifies the comma separated column indexes (numbered from one) of the input data fields that will be imported. You can specify a NULL value to use all input data fields in the file. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNINDEXES<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the comma separated column indexes (numbered from one) of the input data fields that will be imported.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to use all input data fields in the file.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNINDEXES<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the comma separated column indexes (numbered from one) of the input data fields that will be imported.</mrk><mrk mid="1" mtype="seg"> You can specify a NULL value to use all input data fields in the file.</mrk><mrk mid="2" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNINDEXES<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">FILENAME</source>
<seg-source><mrk mid="0" mtype="seg">FILENAME</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">FILENAME</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">Specifies the name of the file that contains the data to be imported. If the path is omitted, the current working directory is used. The specified location of the file should refer to the server side location if using the Network Server. Specifying a NULL value results in an error. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>fileName<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the name of the file that contains the data to be imported.</mrk><mrk mid="1" mtype="seg"> If the path is omitted, the current working directory is used.</mrk><mrk mid="2" mtype="seg"> The specified location of the file should refer to the server side location if using the Network Server.</mrk><mrk mid="3" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>fileName<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the name of the file that contains the data to be imported.</mrk><mrk mid="1" mtype="seg"> If the path is omitted, the current working directory is used.</mrk><mrk mid="2" mtype="seg"> The specified location of the file should refer to the server side location if using the Network Server.</mrk><mrk mid="3" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>fileName<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(32672) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">COLUMNDELIMITER</source>
<seg-source><mrk mid="0" mtype="seg">COLUMNDELIMITER</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">COLUMNDELIMITER</mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">Specifies a column delimiter. The specified character is used in place of a comma to signify the end of a column. You can specify a NULL value to use the default value of a comma. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR(1) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies a column delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of a comma to signify the end of a column.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a comma.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR(1) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies a column delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of a comma to signify the end of a column.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a comma.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>COLUMNDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR(1) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">CHARACTERDELIMITER</source>
<seg-source><mrk mid="0" mtype="seg">CHARACTERDELIMITER</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CHARACTERDELIMITER</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en">Specifies a character delimiter. The specified character is used in place of double quotation marks to enclose a character string. You can specify a NULL value to use the default value of a double quotation mark. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CHARACTERDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR(1) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies a character delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of double quotation marks to enclose a character string.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a double quotation mark.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CHARACTERDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR(1) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies a character delimiter.</mrk><mrk mid="1" mtype="seg"> The specified character is used in place of double quotation marks to enclose a character string.</mrk><mrk mid="2" mtype="seg"> You can specify a NULL value to use the default value of a double quotation mark.</mrk><mrk mid="3" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CHARACTERDELIMITER<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a CHAR(1) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">CODESET</source>
<seg-source><mrk mid="0" mtype="seg">CODESET</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CODESET</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en">Specifies the code set of the data in the input file. The code set name should be one of the Java-supported character encoding sets. Data is converted from the specified code set to the database code set (UTF-8). You can specify a NULL value to interpret the data file in the same code set as the JVM in which it is being executed. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CODESET<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</source>
<seg-source><mrk mid="0" mtype="seg">Specifies the code set of the data in the input file.</mrk><mrk mid="1" mtype="seg"> The code set name should be one of the Java-supported character encoding sets.</mrk><mrk mid="2" mtype="seg"> Data is converted from the specified code set to the database code set (UTF-8).</mrk><mrk mid="3" mtype="seg"> You can specify a NULL value to interpret the data file in the same code set as the JVM in which it is being executed.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CODESET<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Specifies the code set of the data in the input file.</mrk><mrk mid="1" mtype="seg"> The code set name should be one of the Java-supported character encoding sets.</mrk><mrk mid="2" mtype="seg"> Data is converted from the specified code set to the database code set (UTF-8).</mrk><mrk mid="3" mtype="seg"> You can specify a NULL value to interpret the data file in the same code set as the JVM in which it is being executed.</mrk><mrk mid="4" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>CODESET<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a VARCHAR(128) data type.</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">REPLACE</source>
<seg-source><mrk mid="0" mtype="seg">REPLACE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">REPLACE</mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">A non-zero value for the replace parameter will import in REPLACE mode, while a zero value will import in INSERT mode. REPLACE mode deletes all existing data from the table by truncating the table and inserts the imported data. The table definition and the index definitions are not changed. You can only import with REPLACE mode if the table already exists. INSERT mode adds the imported data to the table without changing the existing table data. Specifying a NULL value results in an error. The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>REPLACE<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a SMALLINT data type.</source>
<seg-source><mrk mid="0" mtype="seg">A non-zero value for the replace parameter will import in REPLACE mode, while a zero value will import in INSERT mode.</mrk><mrk mid="1" mtype="seg"> REPLACE mode deletes all existing data from the table by truncating the table and inserts the imported data.</mrk><mrk mid="2" mtype="seg"> The table definition and the index definitions are not changed.</mrk><mrk mid="3" mtype="seg"> You can only import with REPLACE mode if the table already exists.</mrk><mrk mid="4" mtype="seg"> INSERT mode adds the imported data to the table without changing the existing table data.</mrk><mrk mid="5" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="6" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>REPLACE<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a SMALLINT data type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A non-zero value for the replace parameter will import in REPLACE mode, while a zero value will import in INSERT mode.</mrk><mrk mid="1" mtype="seg"> REPLACE mode deletes all existing data from the table by truncating the table and inserts the imported data.</mrk><mrk mid="2" mtype="seg"> The table definition and the index definitions are not changed.</mrk><mrk mid="3" mtype="seg"> You can only import with REPLACE mode if the table already exists.</mrk><mrk mid="4" mtype="seg"> INSERT mode adds the imported data to the table without changing the existing table data.</mrk><mrk mid="5" mtype="seg"> Specifying a NULL value results in an error.</mrk><mrk mid="6" mtype="seg"> The <bpt id="1" ctype="x-parmname">&lt;parmname&gt;</bpt>REPLACE<ept id="1">&lt;/parmname&gt;</ept> parameter takes an input argument that is a SMALLINT data type.</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en">If you create a schema, table, or column name as a non-delimited identifier, you must pass the name to the import procedure using all uppercase characters. If you created a schema, table, or column name as a delimited identifier, you must pass the name to the import procedure using the same case that was used when it was created.</source>
<seg-source><mrk mid="0" mtype="seg">If you create a schema, table, or column name as a non-delimited identifier, you must pass the name to the import procedure using all uppercase characters.</mrk><mrk mid="1" mtype="seg"> If you created a schema, table, or column name as a delimited identifier, you must pass the name to the import procedure using the same case that was used when it was created.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you create a schema, table, or column name as a non-delimited identifier, you must pass the name to the import procedure using all uppercase characters.</mrk><mrk mid="1" mtype="seg"> If you created a schema, table, or column name as a delimited identifier, you must pass the name to the import procedure using the same case that was used when it was created.</mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en">Execute privileges</source>
<seg-source><mrk mid="0" mtype="seg">Execute privileges</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Execute privileges</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default. See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information. The database owner can grant access to other users. The user must also have INSERT privileges on the table.</source>
<seg-source><mrk mid="0" mtype="seg">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default.</mrk><mrk mid="1" mtype="seg"> See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information.</mrk><mrk mid="2" mtype="seg"> The database owner can grant access to other users.</mrk><mrk mid="3" mtype="seg"> The user must also have INSERT privileges on the table.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If authentication and SQL authorization are both enabled, only the <bpt id="1" ctype="x-xref">&lt;xref href="rrefattrib26867.dita#rrefattrib26867"&gt;</bpt>database owner<ept id="1">&lt;/xref&gt;</ept> has execute privileges on this procedure by default.</mrk><mrk mid="1" mtype="seg"> See "Enabling user authentication" and "Setting the SQL standard authorization mode" in the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#pub/citdevelop"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> for more information.</mrk><mrk mid="2" mtype="seg"> The database owner can grant access to other users.</mrk><mrk mid="3" mtype="seg"> The user must also have INSERT privileges on the table.</mrk></target>
</trans-unit>
<trans-unit id="tu29">
<source xml:lang="en">Usage</source>
<seg-source><mrk mid="0" mtype="seg">Usage</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Usage</mrk></target>
</trans-unit>
<trans-unit id="tu30">
<source xml:lang="en">This procedure will read the LOB data using the reference that is stored in the main import file. The format of the reference to the LOB stored in the main import file must be <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>lobsFileName.Offset.length/<ept id="1">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">This procedure will read the LOB data using the reference that is stored in the main import file.</mrk><mrk mid="1" mtype="seg"> The format of the reference to the LOB stored in the main import file must be <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>lobsFileName.Offset.length/<ept id="1">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This procedure will read the LOB data using the reference that is stored in the main import file.</mrk><mrk mid="1" mtype="seg"> The format of the reference to the LOB stored in the main import file must be <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>lobsFileName.Offset.length/<ept id="1">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu31">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>Offset<ept id="1">&lt;/codeph&gt;</ept> is position in the external file in bytes</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>Offset<ept id="1">&lt;/codeph&gt;</ept> is position in the external file in bytes</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>Offset<ept id="1">&lt;/codeph&gt;</ept> is position in the external file in bytes</mrk></target>
</trans-unit>
<trans-unit id="tu32">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>length<ept id="1">&lt;/codeph&gt;</ept> is the size of the LOB column data in bytes</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>length<ept id="1">&lt;/codeph&gt;</ept> is the size of the LOB column data in bytes</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>length<ept id="1">&lt;/codeph&gt;</ept> is the size of the LOB column data in bytes</mrk></target>
</trans-unit>
<trans-unit id="tu33">
<source xml:lang="en">Example importing data into specific columns, using a separate import file for the LOB data</source>
<seg-source><mrk mid="0" mtype="seg">Example importing data into specific columns, using a separate import file for the LOB data</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example importing data into specific columns, using a separate import file for the LOB data</mrk></target>
</trans-unit>
<trans-unit id="tu34">
<source xml:lang="en">The following example shows how to import data into several columns of the STAFF table. The STAFF table includes a LOB column in a sample database. The import file <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="1">&lt;/codeph&gt;</ept> is a delimited data file. The <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="2">&lt;/codeph&gt;</ept> file contains references that point to a separate file which contains the LOB data. The data in the import file is formatted using double quotation marks (") as the string delimiter and a comma (,) as the column delimiter. The data will be appended to the existing data in the STAFF table.</source>
<seg-source><mrk mid="0" mtype="seg">The following example shows how to import data into several columns of the STAFF table.</mrk><mrk mid="1" mtype="seg"> The STAFF table includes a LOB column in a sample database.</mrk><mrk mid="2" mtype="seg"> The import file <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="1">&lt;/codeph&gt;</ept> is a delimited data file.</mrk><mrk mid="3" mtype="seg"> The <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="2">&lt;/codeph&gt;</ept> file contains references that point to a separate file which contains the LOB data.</mrk><mrk mid="4" mtype="seg"> The data in the import file is formatted using double quotation marks (") as the string delimiter and a comma (,) as the column delimiter.</mrk><mrk mid="5" mtype="seg"> The data will be appended to the existing data in the STAFF table.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following example shows how to import data into several columns of the STAFF table.</mrk><mrk mid="1" mtype="seg"> The STAFF table includes a LOB column in a sample database.</mrk><mrk mid="2" mtype="seg"> The import file <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="1">&lt;/codeph&gt;</ept> is a delimited data file.</mrk><mrk mid="3" mtype="seg"> The <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>staff.del<ept id="2">&lt;/codeph&gt;</ept> file contains references that point to a separate file which contains the LOB data.</mrk><mrk mid="4" mtype="seg"> The data in the import file is formatted using double quotation marks (") as the string delimiter and a comma (,) as the column delimiter.</mrk><mrk mid="5" mtype="seg"> The data will be appended to the existing data in the STAFF table.</mrk></target>
</trans-unit>
<trans-unit id="tu35">
<source xml:lang="en">CALL SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE (null, 'STAFF', 'NAME,DEPT,SALARY,PICTURE', '2,3,4,6', 'c:\data\staff.del', ',','"','UTF-8', 0);</source>
<seg-source><mrk mid="0" mtype="seg">CALL SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE (null, 'STAFF', 'NAME,DEPT,SALARY,PICTURE', '2,3,4,6', 'c:\data\staff.del', ',','"','UTF-8', 0);</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CALL SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE (null, 'STAFF', 'NAME,DEPT,SALARY,PICTURE', '2,3,4,6', 'c:\data\staff.del', ',','"','UTF-8', 0);</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
