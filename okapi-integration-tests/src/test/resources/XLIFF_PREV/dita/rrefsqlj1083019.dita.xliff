<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefsqlj1083019.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Where dynamic parameters are allowed</source>
<seg-source><mrk mid="0" mtype="seg">Where dynamic parameters are allowed</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Where dynamic parameters are allowed</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">You can use dynamic parameters anywhere in an expression where their data type can be easily deduced.</source>
<seg-source><mrk mid="0" mtype="seg">You can use dynamic parameters anywhere in an expression where their data type can be easily deduced.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You can use dynamic parameters anywhere in an expression where their data type can be easily deduced.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Use as the first operand of BETWEEN is allowed if one of the second and third operands is not also a dynamic parameter. The type of the first operand is assumed to be the type of the non-dynamic parameter, or the union result of their types if both are not dynamic parameters.</source>
<seg-source><mrk mid="0" mtype="seg">Use as the first operand of BETWEEN is allowed if one of the second and third operands is not also a dynamic parameter.</mrk><mrk mid="1" mtype="seg"> The type of the first operand is assumed to be the type of the non-dynamic parameter, or the union result of their types if both are not dynamic parameters.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use as the first operand of BETWEEN is allowed if one of the second and third operands is not also a dynamic parameter.</mrk><mrk mid="1" mtype="seg"> The type of the first operand is assumed to be the type of the non-dynamic parameter, or the union result of their types if both are not dynamic parameters.</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? BETWEEN DATE('1996-01-01') AND ? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be DATE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? BETWEEN DATE('1996-01-01') AND ? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be DATE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? BETWEEN DATE('1996-01-01') AND ? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be DATE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">Use as the second or third operand of BETWEEN is allowed. Type is assumed to be the type of the left operand.</source>
<seg-source><mrk mid="0" mtype="seg">Use as the second or third operand of BETWEEN is allowed.</mrk><mrk mid="1" mtype="seg"> Type is assumed to be the type of the left operand.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use as the second or third operand of BETWEEN is allowed.</mrk><mrk mid="1" mtype="seg"> Type is assumed to be the type of the left operand.</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE DATE('1996-01-01') BETWEEN ? AND ? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be DATE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE DATE('1996-01-01') BETWEEN ? AND ? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be DATE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE DATE('1996-01-01') BETWEEN ? AND ? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be DATE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu7" resname="sqlj30695-id">
<source xml:lang="en">Use as the left operand of an IN list is allowed if at least one item in the list is not itself a dynamic parameter. Type for the left operand is assumed to be the union result of the types of the non-dynamic parameters in the list.</source>
<seg-source><mrk mid="0" mtype="seg">Use as the left operand of an IN list is allowed if at least one item in the list is not itself a dynamic parameter.</mrk><mrk mid="1" mtype="seg"> Type for the left operand is assumed to be the union result of the types of the non-dynamic parameters in the list.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use as the left operand of an IN list is allowed if at least one item in the list is not itself a dynamic parameter.</mrk><mrk mid="1" mtype="seg"> Type for the left operand is assumed to be the union result of the types of the non-dynamic parameters in the list.</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? NOT IN (?, ?, 'Santiago') <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be CHAR<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? NOT IN (?, ?, 'Santiago') <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be CHAR<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? NOT IN (?, ?, 'Santiago') <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be CHAR<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">Use in the values list in an IN predicate is allowed if the first operand is not a dynamic parameter or its type was determined in the previous rule. Type of the dynamic parameters appearing in the values list is assumed to be the type of the left operand.</source>
<seg-source><mrk mid="0" mtype="seg">Use in the values list in an IN predicate is allowed if the first operand is not a dynamic parameter or its type was determined in the previous rule.</mrk><mrk mid="1" mtype="seg"> Type of the dynamic parameters appearing in the values list is assumed to be the type of the left operand.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use in the values list in an IN predicate is allowed if the first operand is not a dynamic parameter or its type was determined in the previous rule.</mrk><mrk mid="1" mtype="seg"> Type of the dynamic parameters appearing in the values list is assumed to be the type of the left operand.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE <bpt id="2" ctype="x-b">&lt;b&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>FloatColumn<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/b&gt;</ept> IN (?, ?, ?) <bpt id="4" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be FLOAT<ept id="4">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE <bpt id="2" ctype="x-b">&lt;b&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>FloatColumn<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/b&gt;</ept> IN (?, ?, ?) <bpt id="4" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be FLOAT<ept id="4">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE <bpt id="2" ctype="x-b">&lt;b&gt;</bpt><bpt id="3" ctype="x-i">&lt;i&gt;</bpt>FloatColumn<ept id="3">&lt;/i&gt;</ept><ept id="2">&lt;/b&gt;</ept> IN (?, ?, ?) <bpt id="4" ctype="x-ph">&lt;ph&gt;</bpt>-- types assumed to be FLOAT<ept id="4">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu11" resname="sqlj18960-id">
<source xml:lang="en">For the binary operators +, -, *, /, AND, OR, &lt;, &gt;, =, &lt;&gt;, &lt;=, and &gt;=, use of a dynamic parameter as one operand but not both is permitted. Its type is taken from the other side.</source>
<seg-source><mrk mid="0" mtype="seg">For the binary operators +, -, *, /, AND, OR, &lt;, &gt;, =, &lt;&gt;, &lt;=, and &gt;=, use of a dynamic parameter as one operand but not both is permitted.</mrk><mrk mid="1" mtype="seg"> Its type is taken from the other side.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For the binary operators +, -, *, /, AND, OR, &lt;, &gt;, =, &lt;&gt;, &lt;=, and &gt;=, use of a dynamic parameter as one operand but not both is permitted.</mrk><mrk mid="1" mtype="seg"> Its type is taken from the other side.</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? &lt; CURRENT_TIMESTAMP <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type assumed to be a TIMESTAMP<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? &lt; CURRENT_TIMESTAMP <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type assumed to be a TIMESTAMP<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? &lt; CURRENT_TIMESTAMP <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type assumed to be a TIMESTAMP<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">Use in a CAST is always permitted. This gives the dynamic parameter a type.</source>
<seg-source><mrk mid="0" mtype="seg">Use in a CAST is always permitted.</mrk><mrk mid="1" mtype="seg"> This gives the dynamic parameter a type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use in a CAST is always permitted.</mrk><mrk mid="1" mtype="seg"> This gives the dynamic parameter a type.</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CALL valueOf(CAST (? AS VARCHAR(10)))<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CALL valueOf(CAST (? AS VARCHAR(10)))<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CALL valueOf(CAST (? AS VARCHAR(10)))<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">Use on either or both sides of LIKE operator is permitted. When used on the left, the type of the dynamic parameter is set to the type of the right operand, but with the maximum allowed length for the type. When used on the right, the type is assumed to be of the same length and type as the left operand. (LIKE is permitted on CHAR and VARCHAR types; see <bpt id="1" ctype="x-xref">&lt;xref href="rrefsqlj40899.dita#rrefsqlj40899"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for more information.)</source>
<seg-source><mrk mid="0" mtype="seg">Use on either or both sides of LIKE operator is permitted.</mrk><mrk mid="1" mtype="seg"> When used on the left, the type of the dynamic parameter is set to the type of the right operand, but with the maximum allowed length for the type.</mrk><mrk mid="2" mtype="seg"> When used on the right, the type is assumed to be of the same length and type as the left operand.</mrk><mrk mid="3" mtype="seg"> (LIKE is permitted on CHAR and VARCHAR types; see <bpt id="1" ctype="x-xref">&lt;xref href="rrefsqlj40899.dita#rrefsqlj40899"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for more information.)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use on either or both sides of LIKE operator is permitted.</mrk><mrk mid="1" mtype="seg"> When used on the left, the type of the dynamic parameter is set to the type of the right operand, but with the maximum allowed length for the type.</mrk><mrk mid="2" mtype="seg"> When used on the right, the type is assumed to be of the same length and type as the left operand.</mrk><mrk mid="3" mtype="seg"> (LIKE is permitted on CHAR and VARCHAR types; see <bpt id="1" ctype="x-xref">&lt;xref href="rrefsqlj40899.dita#rrefsqlj40899"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for more information.)</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? LIKE 'Santi%' <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type assumed to be CHAR with a length of -- java.lang.Integer.MAX_VALUE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? LIKE 'Santi%' <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type assumed to be CHAR with a length of -- java.lang.Integer.MAX_VALUE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>WHERE ? LIKE 'Santi%' <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type assumed to be CHAR with a length of -- java.lang.Integer.MAX_VALUE<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">A ? parameter is allowed by itself on only one side of the || operator. That is, "? || ?" is not allowed. The type of a ? parameter on one side of a || operator is determined by the type of the expression on the other side of the || operator. If the expression on the other side is a CHAR or VARCHAR, the type of the parameter is VARCHAR with the maximum allowed length for the type. If the expression on the other side is a CHAR FOR BIT DATA or VARCHAR FOR BIT DATA type, the type of the parameter is VARCHAR FOR BIT DATA with the maximum allowed length for the type.</source>
<seg-source><mrk mid="0" mtype="seg">A ? parameter is allowed by itself on only one side of the || operator.</mrk><mrk mid="1" mtype="seg"> That is, "? || ?" is not allowed.</mrk><mrk mid="2" mtype="seg"> The type of a ? parameter on one side of a || operator is determined by the type of the expression on the other side of the || operator.</mrk><mrk mid="3" mtype="seg"> If the expression on the other side is a CHAR or VARCHAR, the type of the parameter is VARCHAR with the maximum allowed length for the type.</mrk><mrk mid="4" mtype="seg"> If the expression on the other side is a CHAR FOR BIT DATA or VARCHAR FOR BIT DATA type, the type of the parameter is VARCHAR FOR BIT DATA with the maximum allowed length for the type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A ? parameter is allowed by itself on only one side of the || operator.</mrk><mrk mid="1" mtype="seg"> That is, "? || ?" is not allowed.</mrk><mrk mid="2" mtype="seg"> The type of a ? parameter on one side of a || operator is determined by the type of the expression on the other side of the || operator.</mrk><mrk mid="3" mtype="seg"> If the expression on the other side is a CHAR or VARCHAR, the type of the parameter is VARCHAR with the maximum allowed length for the type.</mrk><mrk mid="4" mtype="seg"> If the expression on the other side is a CHAR FOR BIT DATA or VARCHAR FOR BIT DATA type, the type of the parameter is VARCHAR FOR BIT DATA with the maximum allowed length for the type.</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT BITcolumn || ? FROM UserTable <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- Type assumed to be CHAR FOR BIT DATA of length specified for BITcolumn<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT BITcolumn || ? FROM UserTable <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- Type assumed to be CHAR FOR BIT DATA of length specified for BITcolumn<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT BITcolumn || ? FROM UserTable <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- Type assumed to be CHAR FOR BIT DATA of length specified for BITcolumn<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">? (dynamic parameter)</source>
<seg-source><mrk mid="0" mtype="seg">? (dynamic parameter)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">? (dynamic parameter)</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">used in conditional expression</source>
<seg-source><mrk mid="0" mtype="seg">used in conditional expression</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">used in conditional expression</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en">In a conditional expression, which uses a ?, use of a dynamic parameter (which is also represented as a ?) is allowed. The type of a dynamic parameter as the first operand is assumed to be boolean. Only one of the second and third operands can be a dynamic parameter, and its type will be assumed to be the same as that of the other (that is, the third and second operand, respectively).</source>
<seg-source><mrk mid="0" mtype="seg">In a conditional expression, which uses a ?, use of a dynamic parameter (which is also represented as a ?) is allowed.</mrk><mrk mid="1" mtype="seg"> The type of a dynamic parameter as the first operand is assumed to be boolean.</mrk><mrk mid="2" mtype="seg"> Only one of the second and third operands can be a dynamic parameter, and its type will be assumed to be the same as that of the other (that is, the third and second operand, respectively).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In a conditional expression, which uses a ?, use of a dynamic parameter (which is also represented as a ?) is allowed.</mrk><mrk mid="1" mtype="seg"> The type of a dynamic parameter as the first operand is assumed to be boolean.</mrk><mrk mid="2" mtype="seg"> Only one of the second and third operands can be a dynamic parameter, and its type will be assumed to be the same as that of the other (that is, the third and second operand, respectively).</mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT c1 IS NULL ? ? : c1 <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- allows you to specify a "default" value at execution time -- dynamic parameter assumed to be the type of c1 -- you cannot have dynamic parameters on both sides -- of the :<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT c1 IS NULL ? ? : c1 <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- allows you to specify a "default" value at execution time -- dynamic parameter assumed to be the type of c1 -- you cannot have dynamic parameters on both sides -- of the :<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT c1 IS NULL ? ? : c1 <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- allows you to specify a "default" value at execution time -- dynamic parameter assumed to be the type of c1 -- you cannot have dynamic parameters on both sides -- of the :<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en">A dynamic parameter is allowed as an item in the values list or select list of an INSERT statement. The type of the dynamic parameter is assumed to be the type of the target column.</source>
<seg-source><mrk mid="0" mtype="seg">A dynamic parameter is allowed as an item in the values list or select list of an INSERT statement.</mrk><mrk mid="1" mtype="seg"> The type of the dynamic parameter is assumed to be the type of the target column.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A dynamic parameter is allowed as an item in the values list or select list of an INSERT statement.</mrk><mrk mid="1" mtype="seg"> The type of the dynamic parameter is assumed to be the type of the target column.</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>INSERT INTO t VALUES (?) <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- dynamic parameter assumed to be the type -- of the only column in table t<ept id="2">&lt;/ph&gt;</ept> INSERT INTO t SELECT ? FROM t2 <bpt id="3" ctype="x-ph">&lt;ph&gt;</bpt>-- not allowed<ept id="3">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>INSERT INTO t VALUES (?) <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- dynamic parameter assumed to be the type -- of the only column in table t<ept id="2">&lt;/ph&gt;</ept> INSERT INTO t SELECT ? FROM t2 <bpt id="3" ctype="x-ph">&lt;ph&gt;</bpt>-- not allowed<ept id="3">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>INSERT INTO t VALUES (?) <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- dynamic parameter assumed to be the type -- of the only column in table t<ept id="2">&lt;/ph&gt;</ept> INSERT INTO t SELECT ? FROM t2 <bpt id="3" ctype="x-ph">&lt;ph&gt;</bpt>-- not allowed<ept id="3">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">A ? parameter in a comparison with a subquery takes its type from the expression being selected by the subquery. For example:</source>
<seg-source><mrk mid="0" mtype="seg">A ? parameter in a comparison with a subquery takes its type from the expression being selected by the subquery.</mrk><mrk mid="1" mtype="seg"> For example:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A ? parameter in a comparison with a subquery takes its type from the expression being selected by the subquery.</mrk><mrk mid="1" mtype="seg"> For example:</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT * FROM tab1 WHERE ? = (SELECT x FROM tab2) SELECT * FROM tab1 WHERE ? = ANY (SELECT x FROM tab2) <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- In both cases, the type of the dynamic parameter is -- assumed to be the same as the type of tab2.x.<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT * FROM tab1 WHERE ? = (SELECT x FROM tab2) SELECT * FROM tab1 WHERE ? = ANY (SELECT x FROM tab2) <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- In both cases, the type of the dynamic parameter is -- assumed to be the same as the type of tab2.x.<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT * FROM tab1 WHERE ? = (SELECT x FROM tab2) SELECT * FROM tab1 WHERE ? = ANY (SELECT x FROM tab2) <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- In both cases, the type of the dynamic parameter is -- assumed to be the same as the type of tab2.x.<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en">A dynamic parameter is allowed as the value in an UPDATE statement. The type of the dynamic parameter is assumed to be the type of the column in the target table.</source>
<seg-source><mrk mid="0" mtype="seg">A dynamic parameter is allowed as the value in an UPDATE statement.</mrk><mrk mid="1" mtype="seg"> The type of the dynamic parameter is assumed to be the type of the column in the target table.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A dynamic parameter is allowed as the value in an UPDATE statement.</mrk><mrk mid="1" mtype="seg"> The type of the dynamic parameter is assumed to be the type of the column in the target table.</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>UPDATE t2 SET c2 =? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type is assumed to be type of c2<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>UPDATE t2 SET c2 =? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type is assumed to be type of c2<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>UPDATE t2 SET c2 =? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-- type is assumed to be type of c2<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu29">
<source xml:lang="en">Dynamic parameters are allowed as the operand of the unary operators - or +. For example:</source>
<seg-source><mrk mid="0" mtype="seg">Dynamic parameters are allowed as the operand of the unary operators - or +.</mrk><mrk mid="1" mtype="seg"> For example:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Dynamic parameters are allowed as the operand of the unary operators - or +.</mrk><mrk mid="1" mtype="seg"> For example:</mrk></target>
</trans-unit>
<trans-unit id="tu30">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE t1 (c11 INT, c12 SMALLINT, c13 DOUBLE, c14 CHAR(3)) SELECT * FROM t1 WHERE c11 BETWEEN -? AND +? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-– The type of both of the unary operators is INT -- based on the context in which they are used (that is, -- because c11 is INT, the unary parameters also get the -- type INT.<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE t1 (c11 INT, c12 SMALLINT, c13 DOUBLE, c14 CHAR(3)) SELECT * FROM t1 WHERE c11 BETWEEN -? AND +? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-– The type of both of the unary operators is INT -- based on the context in which they are used (that is, -- because c11 is INT, the unary parameters also get the -- type INT.<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>CREATE TABLE t1 (c11 INT, c12 SMALLINT, c13 DOUBLE, c14 CHAR(3)) SELECT * FROM t1 WHERE c11 BETWEEN -? AND +? <bpt id="2" ctype="x-ph">&lt;ph&gt;</bpt>-– The type of both of the unary operators is INT -- based on the context in which they are used (that is, -- because c11 is INT, the unary parameters also get the -- type INT.<ept id="2">&lt;/ph&gt;</ept><ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu31">
<source xml:lang="en">LENGTH allow a dynamic parameter. The type is assumed to be a maximum length VARCHAR type.</source>
<seg-source><mrk mid="0" mtype="seg">LENGTH allow a dynamic parameter.</mrk><mrk mid="1" mtype="seg"> The type is assumed to be a maximum length VARCHAR type.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">LENGTH allow a dynamic parameter.</mrk><mrk mid="1" mtype="seg"> The type is assumed to be a maximum length VARCHAR type.</mrk></target>
</trans-unit>
<trans-unit id="tu32">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT LENGTH(?)<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT LENGTH(?)<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>SELECT LENGTH(?)<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu33">
<source xml:lang="en">Qualified comparisons.</source>
<seg-source><mrk mid="0" mtype="seg">Qualified comparisons.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Qualified comparisons.</mrk></target>
</trans-unit>
<trans-unit id="tu34">
<source xml:lang="en"><it id="1" ctype="x-b" pos="open">&lt;b&gt;</it>? = SOME (SELECT 1 FROM t) <it id="2" ctype="x-ph" pos="open">&lt;ph&gt;</it>-- is valid. Dynamic parameter assumed to be INTEGER type<it id="2" ctype="x-ph" pos="close">&lt;/ph&gt;</it> 1 = SOME (SELECT ? FROM t) <it id="3" ctype="x-ph" pos="open">&lt;ph&gt;</it>-- is valid. Dynamic parameter assumed to be INTEGER type.<it id="3" ctype="x-ph" pos="close">&lt;/ph&gt;</it><it id="1" ctype="x-b" pos="close">&lt;/b&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-b" pos="open">&lt;b&gt;</it>? = SOME (SELECT 1 FROM t) <it id="2" ctype="x-ph" pos="open">&lt;ph&gt;</it>-- is valid.</mrk><mrk mid="1" mtype="seg"> Dynamic parameter assumed to be INTEGER type<it id="2" ctype="x-ph" pos="close">&lt;/ph&gt;</it> 1 = SOME (SELECT ? FROM t) <it id="3" ctype="x-ph" pos="open">&lt;ph&gt;</it>-- is valid.</mrk><mrk mid="2" mtype="seg"> Dynamic parameter assumed to be INTEGER type.<it id="3" ctype="x-ph" pos="close">&lt;/ph&gt;</it><it id="1" ctype="x-b" pos="close">&lt;/b&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-b" pos="open">&lt;b&gt;</it>? = SOME (SELECT 1 FROM t) <it id="2" ctype="x-ph" pos="open">&lt;ph&gt;</it>-- is valid.</mrk><mrk mid="1" mtype="seg"> Dynamic parameter assumed to be INTEGER type<it id="2" ctype="x-ph" pos="close">&lt;/ph&gt;</it> 1 = SOME (SELECT ? FROM t) <it id="3" ctype="x-ph" pos="open">&lt;ph&gt;</it>-- is valid.</mrk><mrk mid="2" mtype="seg"> Dynamic parameter assumed to be INTEGER type.<it id="3" ctype="x-ph" pos="close">&lt;/ph&gt;</it><it id="1" ctype="x-b" pos="close">&lt;/b&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu35">
<source xml:lang="en">A dynamic parameter is allowed as the left operand of an IS expression and is assumed to be a boolean.</source>
<seg-source><mrk mid="0" mtype="seg">A dynamic parameter is allowed as the left operand of an IS expression and is assumed to be a boolean.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A dynamic parameter is allowed as the left operand of an IS expression and is assumed to be a boolean.</mrk></target>
</trans-unit>
<trans-unit id="tu36">
<source xml:lang="en">Once the type of a dynamic parameter is determined based on the expression it is in, that expression is allowed anywhere it would normally be allowed if it did not include a dynamic parameter.</source>
<seg-source><mrk mid="0" mtype="seg">Once the type of a dynamic parameter is determined based on the expression it is in, that expression is allowed anywhere it would normally be allowed if it did not include a dynamic parameter.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Once the type of a dynamic parameter is determined based on the expression it is in, that expression is allowed anywhere it would normally be allowed if it did not include a dynamic parameter.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
