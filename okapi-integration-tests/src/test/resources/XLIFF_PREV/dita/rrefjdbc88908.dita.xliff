<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="rrefjdbc88908.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">JDBC escape syntax for fn keyword</source>
<seg-source><mrk mid="0" mtype="seg">JDBC escape syntax for fn keyword</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC escape syntax for fn keyword</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">fn</source>
<seg-source><mrk mid="0" mtype="seg">fn</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">fn</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">JDBC escape keyword</source>
<seg-source><mrk mid="0" mtype="seg">JDBC escape keyword</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC escape keyword</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">JDBC</source>
<seg-source><mrk mid="0" mtype="seg">JDBC</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">escape keyword</source>
<seg-source><mrk mid="0" mtype="seg">escape keyword</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">escape keyword</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">escape keyword</source>
<seg-source><mrk mid="0" mtype="seg">escape keyword</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">escape keyword</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">JDBC</source>
<seg-source><mrk mid="0" mtype="seg">JDBC</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">JDBC</source>
<seg-source><mrk mid="0" mtype="seg">JDBC</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">escape functions</source>
<seg-source><mrk mid="0" mtype="seg">escape functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">escape functions</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">abs</source>
<seg-source><mrk mid="0" mtype="seg">abs</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">abs</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">acos</source>
<seg-source><mrk mid="0" mtype="seg">acos</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">acos</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">asin</source>
<seg-source><mrk mid="0" mtype="seg">asin</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">asin</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">atan</source>
<seg-source><mrk mid="0" mtype="seg">atan</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">atan</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">atan2</source>
<seg-source><mrk mid="0" mtype="seg">atan2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">atan2</mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">ceiling</source>
<seg-source><mrk mid="0" mtype="seg">ceiling</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ceiling</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">cos</source>
<seg-source><mrk mid="0" mtype="seg">cos</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">cos</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">cot</source>
<seg-source><mrk mid="0" mtype="seg">cot</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">cot</mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en">degrees</source>
<seg-source><mrk mid="0" mtype="seg">degrees</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">degrees</mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en">exp</source>
<seg-source><mrk mid="0" mtype="seg">exp</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">exp</mrk></target>
</trans-unit>
<trans-unit id="tu29">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu30">
<source xml:lang="en">floor</source>
<seg-source><mrk mid="0" mtype="seg">floor</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">floor</mrk></target>
</trans-unit>
<trans-unit id="tu31">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu32">
<source xml:lang="en">log</source>
<seg-source><mrk mid="0" mtype="seg">log</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">log</mrk></target>
</trans-unit>
<trans-unit id="tu33">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu34">
<source xml:lang="en">log10</source>
<seg-source><mrk mid="0" mtype="seg">log10</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">log10</mrk></target>
</trans-unit>
<trans-unit id="tu35">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu36">
<source xml:lang="en">mod</source>
<seg-source><mrk mid="0" mtype="seg">mod</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">mod</mrk></target>
</trans-unit>
<trans-unit id="tu37">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu38">
<source xml:lang="en">pi</source>
<seg-source><mrk mid="0" mtype="seg">pi</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">pi</mrk></target>
</trans-unit>
<trans-unit id="tu39">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu40">
<source xml:lang="en">radians</source>
<seg-source><mrk mid="0" mtype="seg">radians</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">radians</mrk></target>
</trans-unit>
<trans-unit id="tu41">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu42">
<source xml:lang="en">rand</source>
<seg-source><mrk mid="0" mtype="seg">rand</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">rand</mrk></target>
</trans-unit>
<trans-unit id="tu43">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu44">
<source xml:lang="en">sign</source>
<seg-source><mrk mid="0" mtype="seg">sign</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sign</mrk></target>
</trans-unit>
<trans-unit id="tu45">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu46">
<source xml:lang="en">sin</source>
<seg-source><mrk mid="0" mtype="seg">sin</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sin</mrk></target>
</trans-unit>
<trans-unit id="tu47">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu48">
<source xml:lang="en">sqrt</source>
<seg-source><mrk mid="0" mtype="seg">sqrt</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sqrt</mrk></target>
</trans-unit>
<trans-unit id="tu49">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu50">
<source xml:lang="en">tan</source>
<seg-source><mrk mid="0" mtype="seg">tan</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">tan</mrk></target>
</trans-unit>
<trans-unit id="tu51">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu52">
<source xml:lang="en">concat</source>
<seg-source><mrk mid="0" mtype="seg">concat</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">concat</mrk></target>
</trans-unit>
<trans-unit id="tu53">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu54">
<source xml:lang="en">lcase</source>
<seg-source><mrk mid="0" mtype="seg">lcase</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">lcase</mrk></target>
</trans-unit>
<trans-unit id="tu55">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu56">
<source xml:lang="en">length</source>
<seg-source><mrk mid="0" mtype="seg">length</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">length</mrk></target>
</trans-unit>
<trans-unit id="tu57">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu58">
<source xml:lang="en">locate</source>
<seg-source><mrk mid="0" mtype="seg">locate</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">locate</mrk></target>
</trans-unit>
<trans-unit id="tu59">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu60">
<source xml:lang="en">ltrim</source>
<seg-source><mrk mid="0" mtype="seg">ltrim</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ltrim</mrk></target>
</trans-unit>
<trans-unit id="tu61">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu62">
<source xml:lang="en">rtrim</source>
<seg-source><mrk mid="0" mtype="seg">rtrim</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">rtrim</mrk></target>
</trans-unit>
<trans-unit id="tu63">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu64">
<source xml:lang="en">substring</source>
<seg-source><mrk mid="0" mtype="seg">substring</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">substring</mrk></target>
</trans-unit>
<trans-unit id="tu65">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu66">
<source xml:lang="en">ucase</source>
<seg-source><mrk mid="0" mtype="seg">ucase</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ucase</mrk></target>
</trans-unit>
<trans-unit id="tu67">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu68">
<source xml:lang="en">curdate</source>
<seg-source><mrk mid="0" mtype="seg">curdate</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">curdate</mrk></target>
</trans-unit>
<trans-unit id="tu69">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu70">
<source xml:lang="en">curtime</source>
<seg-source><mrk mid="0" mtype="seg">curtime</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">curtime</mrk></target>
</trans-unit>
<trans-unit id="tu71">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu72">
<source xml:lang="en">hour</source>
<seg-source><mrk mid="0" mtype="seg">hour</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">hour</mrk></target>
</trans-unit>
<trans-unit id="tu73">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu74">
<source xml:lang="en">minute</source>
<seg-source><mrk mid="0" mtype="seg">minute</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">minute</mrk></target>
</trans-unit>
<trans-unit id="tu75">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu76">
<source xml:lang="en">month</source>
<seg-source><mrk mid="0" mtype="seg">month</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">month</mrk></target>
</trans-unit>
<trans-unit id="tu77">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu78">
<source xml:lang="en">second</source>
<seg-source><mrk mid="0" mtype="seg">second</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">second</mrk></target>
</trans-unit>
<trans-unit id="tu79">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu80">
<source xml:lang="en">TIMESTAMPADD function</source>
<seg-source><mrk mid="0" mtype="seg">TIMESTAMPADD function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">TIMESTAMPADD function</mrk></target>
</trans-unit>
<trans-unit id="tu81">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu82">
<source xml:lang="en">TIMESTAMPDIFF function</source>
<seg-source><mrk mid="0" mtype="seg">TIMESTAMPDIFF function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">TIMESTAMPDIFF function</mrk></target>
</trans-unit>
<trans-unit id="tu83">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu84">
<source xml:lang="en">year</source>
<seg-source><mrk mid="0" mtype="seg">year</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">year</mrk></target>
</trans-unit>
<trans-unit id="tu85">
<source xml:lang="en">JDBC scalar function</source>
<seg-source><mrk mid="0" mtype="seg">JDBC scalar function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JDBC scalar function</mrk></target>
</trans-unit>
<trans-unit id="tu86">
<source xml:lang="en">You can specify functions in JDBC escape syntax by using the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>fn<ept id="1">&lt;/codeph&gt;</ept> keyword.</source>
<seg-source><mrk mid="0" mtype="seg">You can specify functions in JDBC escape syntax by using the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>fn<ept id="1">&lt;/codeph&gt;</ept> keyword.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You can specify functions in JDBC escape syntax by using the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>fn<ept id="1">&lt;/codeph&gt;</ept> keyword.</mrk></target>
</trans-unit>
<trans-unit id="tu87">
<source xml:lang="en">Syntax</source>
<seg-source><mrk mid="0" mtype="seg">Syntax</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Syntax</mrk></target>
</trans-unit>
<trans-unit id="tu88">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{ fn <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>functionCall<ept id="2">&lt;/i&gt;</ept> }<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{ fn <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>functionCall<ept id="2">&lt;/i&gt;</ept> }<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{ fn <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>functionCall<ept id="2">&lt;/i&gt;</ept> }<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu89">
<source xml:lang="en">where <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>functionCall<ept id="1">&lt;/i&gt;</ept> is the name of one of the scalar functions listed below. The functions are of the following types:</source>
<seg-source><mrk mid="0" mtype="seg">where <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>functionCall<ept id="1">&lt;/i&gt;</ept> is the name of one of the scalar functions listed below.</mrk><mrk mid="1" mtype="seg"> The functions are of the following types:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">where <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>functionCall<ept id="1">&lt;/i&gt;</ept> is the name of one of the scalar functions listed below.</mrk><mrk mid="1" mtype="seg"> The functions are of the following types:</mrk></target>
</trans-unit>
<trans-unit id="tu90">
<source xml:lang="en">Numeric functions</source>
<seg-source><mrk mid="0" mtype="seg">Numeric functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Numeric functions</mrk></target>
</trans-unit>
<trans-unit id="tu91">
<source xml:lang="en">String functions</source>
<seg-source><mrk mid="0" mtype="seg">String functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">String functions</mrk></target>
</trans-unit>
<trans-unit id="tu92">
<source xml:lang="en">Date and time functions</source>
<seg-source><mrk mid="0" mtype="seg">Date and time functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Date and time functions</mrk></target>
</trans-unit>
<trans-unit id="tu93">
<source xml:lang="en">System function</source>
<seg-source><mrk mid="0" mtype="seg">System function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">System function</mrk></target>
</trans-unit>
<trans-unit id="tu94">
<source xml:lang="en">Numeric functions</source>
<seg-source><mrk mid="0" mtype="seg">Numeric functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Numeric functions</mrk></target>
</trans-unit>
<trans-unit id="tu95">
<source xml:lang="en">abs</source>
<seg-source><mrk mid="0" mtype="seg">abs</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">abs</mrk></target>
</trans-unit>
<trans-unit id="tu96">
<source xml:lang="en">Returns the absolute value of a number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the absolute value of a number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the absolute value of a number.</mrk></target>
</trans-unit>
<trans-unit id="tu97">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>abs ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>abs ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>abs ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu98">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn abs(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ABS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj98067.dita#rrefsqlj98067"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn abs(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ABS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj98067.dita#rrefsqlj98067"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn abs(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ABS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>numericExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj98067.dita#rrefsqlj98067"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu99">
<source xml:lang="en">acos</source>
<seg-source><mrk mid="0" mtype="seg">acos</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">acos</mrk></target>
</trans-unit>
<trans-unit id="tu100">
<source xml:lang="en">Returns the arc cosine of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the arc cosine of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the arc cosine of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu101">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>acos ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>acos ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>acos ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu102">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn acos(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ACOS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncacos.dita#rreffuncacos"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn acos(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ACOS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncacos.dita#rreffuncacos"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn acos(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ACOS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncacos.dita#rreffuncacos"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu103">
<source xml:lang="en">asin</source>
<seg-source><mrk mid="0" mtype="seg">asin</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">asin</mrk></target>
</trans-unit>
<trans-unit id="tu104">
<source xml:lang="en">Returns the arc sine of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the arc sine of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the arc sine of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu105">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>asin ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>asin ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>asin ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu106">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn asin(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ASIN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncasin.dita#rreffuncasin"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn asin(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ASIN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncasin.dita#rreffuncasin"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn asin(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ASIN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncasin.dita#rreffuncasin"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu107">
<source xml:lang="en">atan</source>
<seg-source><mrk mid="0" mtype="seg">atan</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">atan</mrk></target>
</trans-unit>
<trans-unit id="tu108">
<source xml:lang="en">Returns the arc tangent of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the arc tangent of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the arc tangent of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu109">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>atan ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>atan ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>atan ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu110">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn atan(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ATAN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncatan.dita#rreffuncatan"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn atan(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ATAN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncatan.dita#rreffuncatan"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn atan(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>ATAN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncatan.dita#rreffuncatan"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu111">
<source xml:lang="en">atan2</source>
<seg-source><mrk mid="0" mtype="seg">atan2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">atan2</mrk></target>
</trans-unit>
<trans-unit id="tu112">
<source xml:lang="en">Returns the arc tangent in radians of <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>/<bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept><ept id="1">&lt;/codeph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the arc tangent in radians of <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>/<bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept><ept id="1">&lt;/codeph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the arc tangent in radians of <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>/<bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept><ept id="1">&lt;/codeph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu113">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>atan2 ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>atan2 ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>atan2 ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu114">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn atan2(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>ATAN2(<bpt id="5" ctype="x-i">&lt;i&gt;</bpt>y<ept id="5">&lt;/i&gt;</ept>, <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>x<ept id="6">&lt;/i&gt;</ept>)<ept id="4">&lt;/codeph&gt;</ept>. For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rreffuncatan2.dita#rreffuncatan2"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn atan2(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>ATAN2(<bpt id="5" ctype="x-i">&lt;i&gt;</bpt>y<ept id="5">&lt;/i&gt;</ept>, <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>x<ept id="6">&lt;/i&gt;</ept>)<ept id="4">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rreffuncatan2.dita#rreffuncatan2"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn atan2(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>y<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>x<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>ATAN2(<bpt id="5" ctype="x-i">&lt;i&gt;</bpt>y<ept id="5">&lt;/i&gt;</ept>, <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>x<ept id="6">&lt;/i&gt;</ept>)<ept id="4">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rreffuncatan2.dita#rreffuncatan2"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu115">
<source xml:lang="en">ceiling</source>
<seg-source><mrk mid="0" mtype="seg">ceiling</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ceiling</mrk></target>
</trans-unit>
<trans-unit id="tu116">
<source xml:lang="en">Rounds the specified number up, and returns the smallest number that is greater than or equal to the specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Rounds the specified number up, and returns the smallest number that is greater than or equal to the specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Rounds the specified number up, and returns the smallest number that is greater than or equal to the specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu117">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ceiling ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ceiling ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ceiling ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu118">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ceiling(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>CEILING(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncceil.dita#rreffuncceil"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ceiling(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>CEILING(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncceil.dita#rreffuncceil"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ceiling(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>CEILING(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncceil.dita#rreffuncceil"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu119">
<source xml:lang="en">cos</source>
<seg-source><mrk mid="0" mtype="seg">cos</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">cos</mrk></target>
</trans-unit>
<trans-unit id="tu120">
<source xml:lang="en">Returns the cosine of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the cosine of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the cosine of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu121">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>cos ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>cos ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>cos ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu122">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn cos(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>COS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunccos.dita#rreffunccos"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn cos(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>COS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunccos.dita#rreffunccos"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn cos(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>COS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunccos.dita#rreffunccos"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu123">
<source xml:lang="en">cot</source>
<seg-source><mrk mid="0" mtype="seg">cot</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">cot</mrk></target>
</trans-unit>
<trans-unit id="tu124">
<source xml:lang="en">Returns the cotangent of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the cotangent of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the cotangent of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu125">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>cot ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>cot ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>cot ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu126">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn cot(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>COT(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunccot.dita#rreffunccot"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn cot(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>COT(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunccot.dita#rreffunccot"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn cot(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>COT(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunccot.dita#rreffunccot"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu127">
<source xml:lang="en">degrees</source>
<seg-source><mrk mid="0" mtype="seg">degrees</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">degrees</mrk></target>
</trans-unit>
<trans-unit id="tu128">
<source xml:lang="en">Converts a specified number from radians to degrees.</source>
<seg-source><mrk mid="0" mtype="seg">Converts a specified number from radians to degrees.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Converts a specified number from radians to degrees.</mrk></target>
</trans-unit>
<trans-unit id="tu129">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>degrees ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>degrees ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>degrees ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu130">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn degrees(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>DEGREES(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncdegrees.dita#rreffuncdegrees"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn degrees(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>DEGREES(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncdegrees.dita#rreffuncdegrees"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn degrees(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>DEGREES(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncdegrees.dita#rreffuncdegrees"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu131">
<source xml:lang="en">exp</source>
<seg-source><mrk mid="0" mtype="seg">exp</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">exp</mrk></target>
</trans-unit>
<trans-unit id="tu132">
<source xml:lang="en">Returns <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>e<ept id="1">&lt;/term&gt;</ept> raised to the power of the specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>e<ept id="1">&lt;/term&gt;</ept> raised to the power of the specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>e<ept id="1">&lt;/term&gt;</ept> raised to the power of the specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu133">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>exp ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>exp ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>exp ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu134">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn exp(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>EXP(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncexp.dita#rreffuncexp"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn exp(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>EXP(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncexp.dita#rreffuncexp"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn exp(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>EXP(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncexp.dita#rreffuncexp"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu135">
<source xml:lang="en">floor</source>
<seg-source><mrk mid="0" mtype="seg">floor</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">floor</mrk></target>
</trans-unit>
<trans-unit id="tu136">
<source xml:lang="en">Rounds the specified number down, and returns the largest number that is less than or equal to the specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Rounds the specified number down, and returns the largest number that is less than or equal to the specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Rounds the specified number down, and returns the largest number that is less than or equal to the specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu137">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>floor ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>floor ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>floor ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu138">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn floor(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>FLOOR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncfloor.dita#rreffuncfloor"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn floor(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>FLOOR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncfloor.dita#rreffuncfloor"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn floor(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>FLOOR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncfloor.dita#rreffuncfloor"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu139">
<source xml:lang="en">log</source>
<seg-source><mrk mid="0" mtype="seg">log</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">log</mrk></target>
</trans-unit>
<trans-unit id="tu140">
<source xml:lang="en">Returns the natural logarithm (base <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>e<ept id="1">&lt;/term&gt;</ept>) of the specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the natural logarithm (base <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>e<ept id="1">&lt;/term&gt;</ept>) of the specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the natural logarithm (base <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>e<ept id="1">&lt;/term&gt;</ept>) of the specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu141">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>log ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>log ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>log ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu142">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn log(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LOG(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunclog.dita#rreffunclog"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn log(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LOG(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunclog.dita#rreffunclog"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn log(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LOG(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunclog.dita#rreffunclog"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu143">
<source xml:lang="en">log10</source>
<seg-source><mrk mid="0" mtype="seg">log10</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">log10</mrk></target>
</trans-unit>
<trans-unit id="tu144">
<source xml:lang="en">Returns the base-10 logarithm of the specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the base-10 logarithm of the specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the base-10 logarithm of the specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu145">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>log10 ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>log10 ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>log10 ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu146">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn log10(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LOG10(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunclog10.dita#rreffunclog10"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn log10(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LOG10(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunclog10.dita#rreffunclog10"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn log10(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LOG10(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunclog10.dita#rreffunclog10"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu147">
<source xml:lang="en">mod</source>
<seg-source><mrk mid="0" mtype="seg">mod</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">mod</mrk></target>
</trans-unit>
<trans-unit id="tu148">
<source xml:lang="en">Returns the remainder (modulus) of argument 1 divided by argument 2. The result is negative only if argument 1 is negative.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the remainder (modulus) of argument 1 divided by argument 2.</mrk><mrk mid="1" mtype="seg"> The result is negative only if argument 1 is negative.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the remainder (modulus) of argument 1 divided by argument 2.</mrk><mrk mid="1" mtype="seg"> The result is negative only if argument 1 is negative.</mrk></target>
</trans-unit>
<trans-unit id="tu149">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>mod ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>mod ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>mod ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu150">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn mod(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>MOD(<bpt id="5" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="5">&lt;/i&gt;</ept>, <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="6">&lt;/i&gt;</ept>)<ept id="4">&lt;/codeph&gt;</ept>. For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rrefsqljmod.dita#rrefsqljmod"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn mod(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>MOD(<bpt id="5" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="5">&lt;/i&gt;</ept>, <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="6">&lt;/i&gt;</ept>)<ept id="4">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rrefsqljmod.dita#rrefsqljmod"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn mod(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>MOD(<bpt id="5" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="5">&lt;/i&gt;</ept>, <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="6">&lt;/i&gt;</ept>)<ept id="4">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rrefsqljmod.dita#rrefsqljmod"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu151">
<source xml:lang="en">pi</source>
<seg-source><mrk mid="0" mtype="seg">pi</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">pi</mrk></target>
</trans-unit>
<trans-unit id="tu152">
<source xml:lang="en">Returns a value that is closer than any other value to <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>pi<ept id="1">&lt;/term&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Returns a value that is closer than any other value to <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>pi<ept id="1">&lt;/term&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns a value that is closer than any other value to <bpt id="1" ctype="x-term">&lt;term&gt;</bpt>pi<ept id="1">&lt;/term&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu153">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>pi ( )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>pi ( )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>pi ( )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu154">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn pi()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>PI()<ept id="2">&lt;/codeph&gt;</ept>. For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rreffuncpi.dita#rreffuncpi"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn pi()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>PI()<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rreffuncpi.dita#rreffuncpi"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn pi()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>PI()<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rreffuncpi.dita#rreffuncpi"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu155">
<source xml:lang="en">radians</source>
<seg-source><mrk mid="0" mtype="seg">radians</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">radians</mrk></target>
</trans-unit>
<trans-unit id="tu156">
<source xml:lang="en">Converts a specified number from degrees to radians.</source>
<seg-source><mrk mid="0" mtype="seg">Converts a specified number from degrees to radians.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Converts a specified number from degrees to radians.</mrk></target>
</trans-unit>
<trans-unit id="tu157">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>radians ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>radians ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>radians ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu158">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn radians(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RADIANS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncradians.dita#rreffuncradians"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn radians(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RADIANS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncradians.dita#rreffuncradians"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn radians(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RADIANS(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncradians.dita#rreffuncradians"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu159">
<source xml:lang="en">rand</source>
<seg-source><mrk mid="0" mtype="seg">rand</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">rand</mrk></target>
</trans-unit>
<trans-unit id="tu160">
<source xml:lang="en">Returns a random number given a seed number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns a random number given a seed number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns a random number given a seed number.</mrk></target>
</trans-unit>
<trans-unit id="tu161">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>rand ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>rand ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>rand ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu162">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn rand(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RAND(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncrand.dita#rreffuncrand"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn rand(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RAND(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncrand.dita#rreffuncrand"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn rand(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RAND(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>seed<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncrand.dita#rreffuncrand"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu163">
<source xml:lang="en">sign</source>
<seg-source><mrk mid="0" mtype="seg">sign</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sign</mrk></target>
</trans-unit>
<trans-unit id="tu164">
<source xml:lang="en">Returns an integer that represents the sign of a specified number (+1 if the number is positive, -1 if it is negative, 0 if it is 0).</source>
<seg-source><mrk mid="0" mtype="seg">Returns an integer that represents the sign of a specified number (+1 if the number is positive, -1 if it is negative, 0 if it is 0).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns an integer that represents the sign of a specified number (+1 if the number is positive, -1 if it is negative, 0 if it is 0).</mrk></target>
</trans-unit>
<trans-unit id="tu165">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sign ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sign ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sign ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu166">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sign(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SIGN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncsign.dita#rreffuncsign"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sign(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SIGN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncsign.dita#rreffuncsign"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sign(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SIGN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncsign.dita#rreffuncsign"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu167">
<source xml:lang="en">sin</source>
<seg-source><mrk mid="0" mtype="seg">sin</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sin</mrk></target>
</trans-unit>
<trans-unit id="tu168">
<source xml:lang="en">Returns the sine of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the sine of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the sine of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu169">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sin ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sin ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sin ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu170">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sin(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SIN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncsin.dita#rreffuncsin"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sin(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SIN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncsin.dita#rreffuncsin"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sin(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SIN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffuncsin.dita#rreffuncsin"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu171">
<source xml:lang="en">sqrt</source>
<seg-source><mrk mid="0" mtype="seg">sqrt</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sqrt</mrk></target>
</trans-unit>
<trans-unit id="tu172">
<source xml:lang="en">Returns the square root of a floating-point number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the square root of a floating-point number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the square root of a floating-point number.</mrk></target>
</trans-unit>
<trans-unit id="tu173">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sqrt ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sqrt ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>sqrt ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu174">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sqrt(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SQRT(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj73147.dita#rrefsqlj73147"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sqrt(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SQRT(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj73147.dita#rrefsqlj73147"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn sqrt(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SQRT(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj73147.dita#rrefsqlj73147"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu175">
<source xml:lang="en">tan</source>
<seg-source><mrk mid="0" mtype="seg">tan</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">tan</mrk></target>
</trans-unit>
<trans-unit id="tu176">
<source xml:lang="en">Returns the tangent of a specified number.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the tangent of a specified number.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the tangent of a specified number.</mrk></target>
</trans-unit>
<trans-unit id="tu177">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>tan ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>tan ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>tan ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu178">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn tan(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>TAN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunctan.dita#rreffunctan"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn tan(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>TAN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunctan.dita#rreffunctan"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn tan(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>number<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>TAN(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>number<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rreffunctan.dita#rreffunctan"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu179">
<source xml:lang="en">String functions</source>
<seg-source><mrk mid="0" mtype="seg">String functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">String functions</mrk></target>
</trans-unit>
<trans-unit id="tu180">
<source xml:lang="en">concat</source>
<seg-source><mrk mid="0" mtype="seg">concat</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">concat</mrk></target>
</trans-unit>
<trans-unit id="tu181">
<source xml:lang="en">Returns the concatenation of character strings; that is, the character string formed by appending the second string to the first string. If either string is null, the result is NULL.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the concatenation of character strings; that is, the character string formed by appending the second string to the first string.</mrk><mrk mid="1" mtype="seg"> If either string is null, the result is NULL.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the concatenation of character strings; that is, the character string formed by appending the second string to the first string.</mrk><mrk mid="1" mtype="seg"> If either string is null, the result is NULL.</mrk></target>
</trans-unit>
<trans-unit id="tu182">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>concat ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>concat ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>concat ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu183">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn concat(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="5" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="5">&lt;/i&gt;</ept> || <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept><ept id="4">&lt;/codeph&gt;</ept>. For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rrefsqlj40899.dita#rrefsqlj40899"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn concat(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="5" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="5">&lt;/i&gt;</ept> || <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept><ept id="4">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rrefsqlj40899.dita#rrefsqlj40899"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn concat(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt><bpt id="5" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="5">&lt;/i&gt;</ept> || <bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept><ept id="4">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="7" ctype="x-xref">&lt;xref href="rrefsqlj40899.dita#rrefsqlj40899"&gt;</bpt><ept id="7">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu184">
<source xml:lang="en">lcase</source>
<seg-source><mrk mid="0" mtype="seg">lcase</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">lcase</mrk></target>
</trans-unit>
<trans-unit id="tu185">
<source xml:lang="en">Returns a string in which all alphabetic characters in the argument have been converted to lowercase.</source>
<seg-source><mrk mid="0" mtype="seg">Returns a string in which all alphabetic characters in the argument have been converted to lowercase.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns a string in which all alphabetic characters in the argument have been converted to lowercase.</mrk></target>
</trans-unit>
<trans-unit id="tu186">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>lcase ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>lcase ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>lcase ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu187">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn lcase(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LCASE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj42049.dita#rrefsqlj42049"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn lcase(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LCASE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj42049.dita#rrefsqlj42049"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn lcase(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LCASE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj42049.dita#rrefsqlj42049"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu188">
<source xml:lang="en">length</source>
<seg-source><mrk mid="0" mtype="seg">length</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">length</mrk></target>
</trans-unit>
<trans-unit id="tu189">
<source xml:lang="en">Returns the number of characters in a character string expression.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the number of characters in a character string expression.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the number of characters in a character string expression.</mrk></target>
</trans-unit>
<trans-unit id="tu190">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>length ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>length ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>length ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu191">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn length(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LENGTH(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj16762.dita#rrefsqlj16762"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn length(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LENGTH(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj16762.dita#rrefsqlj16762"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn length(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LENGTH(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj16762.dita#rrefsqlj16762"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu192">
<source xml:lang="en">locate</source>
<seg-source><mrk mid="0" mtype="seg">locate</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">locate</mrk></target>
</trans-unit>
<trans-unit id="tu193">
<source xml:lang="en">Returns the position in the second <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="1">&lt;/i&gt;</ept> of the first occurrence of the first <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>. Searches from the beginning of the second <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept>, unless the <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept> parameter is specified.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the position in the second <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="1">&lt;/i&gt;</ept> of the first occurrence of the first <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Searches from the beginning of the second <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept>, unless the <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept> parameter is specified.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the position in the second <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="1">&lt;/i&gt;</ept> of the first occurrence of the first <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Searches from the beginning of the second <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept>, unless the <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept> parameter is specified.</mrk></target>
</trans-unit>
<trans-unit id="tu194">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>locate ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> [ , <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept> ] )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>locate ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> [ , <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept> ] )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>locate ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> [ , <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept> ] )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu195">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn locate(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> [, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept>] )}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>LOCATE(<bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept>, <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="7">&lt;/i&gt;</ept> [, <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>startPosition<ept id="8">&lt;/i&gt;</ept>] )<ept id="5">&lt;/codeph&gt;</ept>. For more information, see <bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj61998.dita#rrefsqlj61998"&gt;</bpt><ept id="9">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn locate(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> [, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept>] )}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>LOCATE(<bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept>, <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="7">&lt;/i&gt;</ept> [, <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>startPosition<ept id="8">&lt;/i&gt;</ept>] )<ept id="5">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj61998.dita#rrefsqlj61998"&gt;</bpt><ept id="9">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn locate(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="3">&lt;/i&gt;</ept> [, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="4">&lt;/i&gt;</ept>] )}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>LOCATE(<bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept>, <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="7">&lt;/i&gt;</ept> [, <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>startPosition<ept id="8">&lt;/i&gt;</ept>] )<ept id="5">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj61998.dita#rrefsqlj61998"&gt;</bpt><ept id="9">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu196">
<source xml:lang="en">ltrim</source>
<seg-source><mrk mid="0" mtype="seg">ltrim</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ltrim</mrk></target>
</trans-unit>
<trans-unit id="tu197">
<source xml:lang="en">Removes blanks from the beginning of a character string expression.</source>
<seg-source><mrk mid="0" mtype="seg">Removes blanks from the beginning of a character string expression.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Removes blanks from the beginning of a character string expression.</mrk></target>
</trans-unit>
<trans-unit id="tu198">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ltrim ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ltrim ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ltrim ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu199">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ltrim(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LTRIM(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj97870.dita#rrefsqlj97870"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ltrim(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LTRIM(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj97870.dita#rrefsqlj97870"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ltrim(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>LTRIM(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj97870.dita#rrefsqlj97870"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu200">
<source xml:lang="en">rtrim</source>
<seg-source><mrk mid="0" mtype="seg">rtrim</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">rtrim</mrk></target>
</trans-unit>
<trans-unit id="tu201">
<source xml:lang="en">Removes blanks from the end of a character string expression.</source>
<seg-source><mrk mid="0" mtype="seg">Removes blanks from the end of a character string expression.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Removes blanks from the end of a character string expression.</mrk></target>
</trans-unit>
<trans-unit id="tu202">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>rtrim ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>rtrim ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>rtrim ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu203">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn rtrim(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RTRIM(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj32613.dita#rrefsqlj32613"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn rtrim(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RTRIM(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj32613.dita#rrefsqlj32613"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn rtrim(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>RTRIM(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj32613.dita#rrefsqlj32613"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu204">
<source xml:lang="en">substring</source>
<seg-source><mrk mid="0" mtype="seg">substring</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">substring</mrk></target>
</trans-unit>
<trans-unit id="tu205">
<source xml:lang="en">Forms a character string by extracting <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> characters from the <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> beginning at <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>. The index of the first character in the <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept> is 1.</source>
<seg-source><mrk mid="0" mtype="seg">Forms a character string by extracting <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> characters from the <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> beginning at <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> The index of the first character in the <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept> is 1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Forms a character string by extracting <bpt id="1" ctype="x-i">&lt;i&gt;</bpt>length<ept id="1">&lt;/i&gt;</ept> characters from the <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> beginning at <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> The index of the first character in the <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept> is 1.</mrk></target>
</trans-unit>
<trans-unit id="tu206">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>substring ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>length<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>substring ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>length<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>substring ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>length<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu207">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn substring(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>length<ept id="4">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>SUBSTR(<bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept>, <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="7">&lt;/i&gt;</ept>, <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>length<ept id="8">&lt;/i&gt;</ept>)<ept id="5">&lt;/codeph&gt;</ept>. For more information, see <bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj93082.dita#rrefsqlj93082"&gt;</bpt><ept id="9">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn substring(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>length<ept id="4">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>SUBSTR(<bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept>, <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="7">&lt;/i&gt;</ept>, <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>length<ept id="8">&lt;/i&gt;</ept>)<ept id="5">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj93082.dita#rrefsqlj93082"&gt;</bpt><ept id="9">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn substring(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>length<ept id="4">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="5" ctype="x-codeph">&lt;codeph&gt;</bpt>SUBSTR(<bpt id="6" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="6">&lt;/i&gt;</ept>, <bpt id="7" ctype="x-i">&lt;i&gt;</bpt>startIndex<ept id="7">&lt;/i&gt;</ept>, <bpt id="8" ctype="x-i">&lt;i&gt;</bpt>length<ept id="8">&lt;/i&gt;</ept>)<ept id="5">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="9" ctype="x-xref">&lt;xref href="rrefsqlj93082.dita#rrefsqlj93082"&gt;</bpt><ept id="9">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu208">
<source xml:lang="en">ucase</source>
<seg-source><mrk mid="0" mtype="seg">ucase</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ucase</mrk></target>
</trans-unit>
<trans-unit id="tu209">
<source xml:lang="en">Returns a string in which all alphabetic characters in the argument have been converted to uppercase.</source>
<seg-source><mrk mid="0" mtype="seg">Returns a string in which all alphabetic characters in the argument have been converted to uppercase.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns a string in which all alphabetic characters in the argument have been converted to uppercase.</mrk></target>
</trans-unit>
<trans-unit id="tu210">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ucase ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ucase ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>ucase ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu211">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ucase(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>UCASE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj29930.dita#rrefsqlj29930"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ucase(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>UCASE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj29930.dita#rrefsqlj29930"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn ucase(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>UCASE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>characterExpression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsqlj29930.dita#rrefsqlj29930"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu212">
<source xml:lang="en">Date and time functions</source>
<seg-source><mrk mid="0" mtype="seg">Date and time functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Date and time functions</mrk></target>
</trans-unit>
<trans-unit id="tu213">
<source xml:lang="en">curdate</source>
<seg-source><mrk mid="0" mtype="seg">curdate</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">curdate</mrk></target>
</trans-unit>
<trans-unit id="tu214">
<source xml:lang="en">Returns the current date.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the current date.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the current date.</mrk></target>
</trans-unit>
<trans-unit id="tu215">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>curdate ( )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>curdate ( )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>curdate ( )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu216">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn curdate()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>CURRENT_DATE<ept id="2">&lt;/codeph&gt;</ept>. For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj34177.dita#rrefsqlj34177"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn curdate()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>CURRENT_DATE<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj34177.dita#rrefsqlj34177"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn curdate()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>CURRENT_DATE<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj34177.dita#rrefsqlj34177"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu217">
<source xml:lang="en">curtime</source>
<seg-source><mrk mid="0" mtype="seg">curtime</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">curtime</mrk></target>
</trans-unit>
<trans-unit id="tu218">
<source xml:lang="en">Returns the current time.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the current time.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the current time.</mrk></target>
</trans-unit>
<trans-unit id="tu219">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>curtime ( )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>curtime ( )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>curtime ( )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu220">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn curtime()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>CURRENT_TIME<ept id="2">&lt;/codeph&gt;</ept>. For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj33772.dita#rrefsqlj33772"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn curtime()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>CURRENT_TIME<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj33772.dita#rrefsqlj33772"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn curtime()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>CURRENT_TIME<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj33772.dita#rrefsqlj33772"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu221">
<source xml:lang="en">hour</source>
<seg-source><mrk mid="0" mtype="seg">hour</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">hour</mrk></target>
</trans-unit>
<trans-unit id="tu222">
<source xml:lang="en">Returns the hour part of a time value.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the hour part of a time value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the hour part of a time value.</mrk></target>
</trans-unit>
<trans-unit id="tu223">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>hour ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>hour ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>hour ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu224">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn hour(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>HOUR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefhourfunc.dita#rrefhourfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn hour(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>HOUR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefhourfunc.dita#rrefhourfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn hour(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>HOUR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefhourfunc.dita#rrefhourfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu225">
<source xml:lang="en">minute</source>
<seg-source><mrk mid="0" mtype="seg">minute</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">minute</mrk></target>
</trans-unit>
<trans-unit id="tu226">
<source xml:lang="en">Returns the minute part of a time value.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the minute part of a time value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the minute part of a time value.</mrk></target>
</trans-unit>
<trans-unit id="tu227">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>minute ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>minute ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>minute ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu228">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn minute(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>MINUTE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefminutefunc.dita#rrefminutefunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn minute(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>MINUTE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefminutefunc.dita#rrefminutefunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn minute(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>MINUTE(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefminutefunc.dita#rrefminutefunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu229">
<source xml:lang="en">month</source>
<seg-source><mrk mid="0" mtype="seg">month</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">month</mrk></target>
</trans-unit>
<trans-unit id="tu230">
<source xml:lang="en">Returns the month part of a date value.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the month part of a date value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the month part of a date value.</mrk></target>
</trans-unit>
<trans-unit id="tu231">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>month ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>month ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>month ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu232">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn month(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>MONTH(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefmonthfunc.dita#rrefmonthfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn month(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>MONTH(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefmonthfunc.dita#rrefmonthfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn month(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>MONTH(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefmonthfunc.dita#rrefmonthfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu233">
<source xml:lang="en">second</source>
<seg-source><mrk mid="0" mtype="seg">second</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">second</mrk></target>
</trans-unit>
<trans-unit id="tu234">
<source xml:lang="en">Returns the seconds part of a time value.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the seconds part of a time value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the seconds part of a time value.</mrk></target>
</trans-unit>
<trans-unit id="tu235">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>second ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>second ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>second ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu236">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn second(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SECOND(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsecondfunc.dita#rrefsecondfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn second(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SECOND(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsecondfunc.dita#rrefsecondfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn second(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>SECOND(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefsecondfunc.dita#rrefsecondfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu237">
<source xml:lang="en">TIMESTAMPADD</source>
<seg-source><mrk mid="0" mtype="seg">TIMESTAMPADD</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">TIMESTAMPADD</mrk></target>
</trans-unit>
<trans-unit id="tu238">
<source xml:lang="en">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> function to add the value of an interval to a timestamp. The function applies the integer to the specified timestamp based on the interval type and returns the sum as a new timestamp. You can subtract from the timestamp by using negative integers.</source>
<seg-source><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> function to add the value of an interval to a timestamp.</mrk><mrk mid="1" mtype="seg"> The function applies the integer to the specified timestamp based on the interval type and returns the sum as a new timestamp.</mrk><mrk mid="2" mtype="seg"> You can subtract from the timestamp by using negative integers.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> function to add the value of an interval to a timestamp.</mrk><mrk mid="1" mtype="seg"> The function applies the integer to the specified timestamp based on the interval type and returns the sum as a new timestamp.</mrk><mrk mid="2" mtype="seg"> You can subtract from the timestamp by using negative integers.</mrk></target>
</trans-unit>
<trans-unit id="tu239">
<source xml:lang="en"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> is a JDBC escaped function and is accessible only by using the JDBC escape function syntax.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> is a JDBC escaped function and is accessible only by using the JDBC escape function syntax.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> is a JDBC escaped function and is accessible only by using the JDBC escape function syntax.</mrk></target>
</trans-unit>
<trans-unit id="tu240">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>TIMESTAMPADD ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>interval<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>timestampExpression<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>TIMESTAMPADD ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>interval<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>timestampExpression<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>TIMESTAMPADD ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>interval<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>integerExpression<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>timestampExpression<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu241">
<source xml:lang="en">To perform <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> on dates and times, it is necessary to convert the dates and times to timestamps. Dates are converted to timestamps by putting 00:00:00.0 in the time-of-day fields. Times are converted to timestamps by putting the current date in the date fields.</source>
<seg-source><mrk mid="0" mtype="seg">To perform <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> on dates and times, it is necessary to convert the dates and times to timestamps.</mrk><mrk mid="1" mtype="seg"> Dates are converted to timestamps by putting 00:00:00.0 in the time-of-day fields.</mrk><mrk mid="2" mtype="seg"> Times are converted to timestamps by putting the current date in the date fields.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To perform <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> on dates and times, it is necessary to convert the dates and times to timestamps.</mrk><mrk mid="1" mtype="seg"> Dates are converted to timestamps by putting 00:00:00.0 in the time-of-day fields.</mrk><mrk mid="2" mtype="seg"> Times are converted to timestamps by putting the current date in the date fields.</mrk></target>
</trans-unit>
<trans-unit id="tu242">
<source xml:lang="en">Do not put a datetime column inside a timestamp arithmetic function in WHERE clauses, because the optimizer will not use any index on the column.</source>
<seg-source><mrk mid="0" mtype="seg">Do not put a datetime column inside a timestamp arithmetic function in WHERE clauses, because the optimizer will not use any index on the column.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Do not put a datetime column inside a timestamp arithmetic function in WHERE clauses, because the optimizer will not use any index on the column.</mrk></target>
</trans-unit>
<trans-unit id="tu243">
<source xml:lang="en">TIMESTAMPDIFF</source>
<seg-source><mrk mid="0" mtype="seg">TIMESTAMPDIFF</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">TIMESTAMPDIFF</mrk></target>
</trans-unit>
<trans-unit id="tu244">
<source xml:lang="en">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> function to find the difference between two timestamp values at a specified interval. For example, the function can return the number of minutes between two specified timestamps.</source>
<seg-source><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> function to find the difference between two timestamp values at a specified interval.</mrk><mrk mid="1" mtype="seg"> For example, the function can return the number of minutes between two specified timestamps.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> function to find the difference between two timestamp values at a specified interval.</mrk><mrk mid="1" mtype="seg"> For example, the function can return the number of minutes between two specified timestamps.</mrk></target>
</trans-unit>
<trans-unit id="tu245">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> is a JDBC escaped function and is accessible only by using the JDBC escape function syntax.</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> is a JDBC escaped function and is accessible only by using the JDBC escape function syntax.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> is a JDBC escaped function and is accessible only by using the JDBC escape function syntax.</mrk></target>
</trans-unit>
<trans-unit id="tu246">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>TIMESTAMPDIFF ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>interval<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>timestampExpression1<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>timestampExpression2<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>TIMESTAMPDIFF ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>interval<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>timestampExpression1<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>timestampExpression2<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>TIMESTAMPDIFF ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>interval<ept id="2">&lt;/i&gt;</ept>, <bpt id="3" ctype="x-i">&lt;i&gt;</bpt>timestampExpression1<ept id="3">&lt;/i&gt;</ept>, <bpt id="4" ctype="x-i">&lt;i&gt;</bpt>timestampExpression2<ept id="4">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu247">
<source xml:lang="en">To perform <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> on dates and times, it is necessary to convert the dates and times to timestamps. Dates are converted to timestamps by putting 00:00:00.0 in the time-of-day fields. Times are converted to timestamps by putting the current date in the date fields.</source>
<seg-source><mrk mid="0" mtype="seg">To perform <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> on dates and times, it is necessary to convert the dates and times to timestamps.</mrk><mrk mid="1" mtype="seg"> Dates are converted to timestamps by putting 00:00:00.0 in the time-of-day fields.</mrk><mrk mid="2" mtype="seg"> Times are converted to timestamps by putting the current date in the date fields.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To perform <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="1">&lt;/codeph&gt;</ept> on dates and times, it is necessary to convert the dates and times to timestamps.</mrk><mrk mid="1" mtype="seg"> Dates are converted to timestamps by putting 00:00:00.0 in the time-of-day fields.</mrk><mrk mid="2" mtype="seg"> Times are converted to timestamps by putting the current date in the date fields.</mrk></target>
</trans-unit>
<trans-unit id="tu248">
<source xml:lang="en">Do not put a datetime column inside a timestamp arithmetic function in WHERE clauses, because the optimizer will not use any index on the column.</source>
<seg-source><mrk mid="0" mtype="seg">Do not put a datetime column inside a timestamp arithmetic function in WHERE clauses, because the optimizer will not use any index on the column.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Do not put a datetime column inside a timestamp arithmetic function in WHERE clauses, because the optimizer will not use any index on the column.</mrk></target>
</trans-unit>
<trans-unit id="tu249">
<source xml:lang="en">year</source>
<seg-source><mrk mid="0" mtype="seg">year</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">year</mrk></target>
</trans-unit>
<trans-unit id="tu250">
<source xml:lang="en">Returns the year part of a date value.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the year part of a date value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the year part of a date value.</mrk></target>
</trans-unit>
<trans-unit id="tu251">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>year ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>year ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>year ( <bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept> )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu252">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn year(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>YEAR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>. For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefyearfunc.dita#rrefyearfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn year(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>YEAR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefyearfunc.dita#rrefyearfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn year(<bpt id="2" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="2">&lt;/i&gt;</ept>)}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>YEAR(<bpt id="4" ctype="x-i">&lt;i&gt;</bpt>expression<ept id="4">&lt;/i&gt;</ept>)<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="5" ctype="x-xref">&lt;xref href="rrefyearfunc.dita#rrefyearfunc"&gt;</bpt><ept id="5">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu253">
<source xml:lang="en">Valid intervals for TIMESTAMPADD and TIMESTAMPDIFF</source>
<seg-source><mrk mid="0" mtype="seg">Valid intervals for TIMESTAMPADD and TIMESTAMPDIFF</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Valid intervals for TIMESTAMPADD and TIMESTAMPDIFF</mrk></target>
</trans-unit>
<trans-unit id="tu254">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="2">&lt;/codeph&gt;</ept> functions are used to perform arithmetic with timestamps. These two functions use the following valid intervals for arithmetic operations:</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="2">&lt;/codeph&gt;</ept> functions are used to perform arithmetic with timestamps.</mrk><mrk mid="1" mtype="seg"> These two functions use the following valid intervals for arithmetic operations:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPADD<ept id="1">&lt;/codeph&gt;</ept> and <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>TIMESTAMPDIFF<ept id="2">&lt;/codeph&gt;</ept> functions are used to perform arithmetic with timestamps.</mrk><mrk mid="1" mtype="seg"> These two functions use the following valid intervals for arithmetic operations:</mrk></target>
</trans-unit>
<trans-unit id="tu255">
<source xml:lang="en">SQL_TSI_DAY</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_DAY</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_DAY</mrk></target>
</trans-unit>
<trans-unit id="tu256">
<source xml:lang="en">SQL_TSI_FRAC_SECOND</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_FRAC_SECOND</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_FRAC_SECOND</mrk></target>
</trans-unit>
<trans-unit id="tu257">
<source xml:lang="en">SQL_TSI_HOUR</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_HOUR</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_HOUR</mrk></target>
</trans-unit>
<trans-unit id="tu258">
<source xml:lang="en">SQL_TSI_MINUTE</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_MINUTE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_MINUTE</mrk></target>
</trans-unit>
<trans-unit id="tu259">
<source xml:lang="en">SQL_TSI_MONTH</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_MONTH</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_MONTH</mrk></target>
</trans-unit>
<trans-unit id="tu260">
<source xml:lang="en">SQL_TSI_QUARTER</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_QUARTER</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_QUARTER</mrk></target>
</trans-unit>
<trans-unit id="tu261">
<source xml:lang="en">SQL_TSI_SECOND</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_SECOND</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_SECOND</mrk></target>
</trans-unit>
<trans-unit id="tu262">
<source xml:lang="en">SQL_TSI_WEEK</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_WEEK</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_WEEK</mrk></target>
</trans-unit>
<trans-unit id="tu263">
<source xml:lang="en">SQL_TSI_YEAR</source>
<seg-source><mrk mid="0" mtype="seg">SQL_TSI_YEAR</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SQL_TSI_YEAR</mrk></target>
</trans-unit>
<trans-unit id="tu264">
<source xml:lang="en">Examples for the TIMESTAMPADD and TIMESTAMPDIFF escape functions</source>
<seg-source><mrk mid="0" mtype="seg">Examples for the TIMESTAMPADD and TIMESTAMPDIFF escape functions</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Examples for the TIMESTAMPADD and TIMESTAMPDIFF escape functions</mrk></target>
</trans-unit>
<trans-unit id="tu265">
<source xml:lang="en">To return a timestamp value one month later than the current timestamp, use the following syntax:</source>
<seg-source><mrk mid="0" mtype="seg">To return a timestamp value one month later than the current timestamp, use the following syntax:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To return a timestamp value one month later than the current timestamp, use the following syntax:</mrk></target>
</trans-unit>
<trans-unit id="tu266">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{fn TIMESTAMPADD( SQL_TSI_MONTH, 1, CURRENT_TIMESTAMP)}<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{fn TIMESTAMPADD( SQL_TSI_MONTH, 1, CURRENT_TIMESTAMP)}<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{fn TIMESTAMPADD( SQL_TSI_MONTH, 1, CURRENT_TIMESTAMP)}<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu267">
<source xml:lang="en">To return the number of weeks between now and the specified time on January 1, 2008, use the following syntax:</source>
<seg-source><mrk mid="0" mtype="seg">To return the number of weeks between now and the specified time on January 1, 2008, use the following syntax:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To return the number of weeks between now and the specified time on January 1, 2008, use the following syntax:</mrk></target>
</trans-unit>
<trans-unit id="tu268">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{fn TIMESTAMPDIFF(SQL_TSI_WEEK, CURRENT_TIMESTAMP, timestamp('2008-01-01-12.00.00.000000'))}<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{fn TIMESTAMPDIFF(SQL_TSI_WEEK, CURRENT_TIMESTAMP, timestamp('2008-01-01-12.00.00.000000'))}<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>{fn TIMESTAMPDIFF(SQL_TSI_WEEK, CURRENT_TIMESTAMP, timestamp('2008-01-01-12.00.00.000000'))}<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu269">
<source xml:lang="en">System function</source>
<seg-source><mrk mid="0" mtype="seg">System function</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">System function</mrk></target>
</trans-unit>
<trans-unit id="tu270">
<source xml:lang="en">user</source>
<seg-source><mrk mid="0" mtype="seg">user</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">user</mrk></target>
</trans-unit>
<trans-unit id="tu271">
<source xml:lang="en">Returns the authorization identifier or name of the current user. If there is no current user, it returns APP.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the authorization identifier or name of the current user.</mrk><mrk mid="1" mtype="seg"> If there is no current user, it returns APP.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the authorization identifier or name of the current user.</mrk><mrk mid="1" mtype="seg"> If there is no current user, it returns APP.</mrk></target>
</trans-unit>
<trans-unit id="tu272">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>user ( )<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>user ( )<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>user ( )<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu273">
<source xml:lang="en">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn user()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>USER<ept id="2">&lt;/codeph&gt;</ept>. For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj42476.dita#rrefsqlj42476"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn user()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>USER<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj42476.dita#rrefsqlj42476"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The JDBC escape syntax <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>{fn user()}<ept id="1">&lt;/codeph&gt;</ept> is equivalent to the built-in syntax <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>USER<ept id="2">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> For more information, see <bpt id="3" ctype="x-xref">&lt;xref href="rrefsqlj42476.dita#rrefsqlj42476"&gt;</bpt><ept id="3">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
