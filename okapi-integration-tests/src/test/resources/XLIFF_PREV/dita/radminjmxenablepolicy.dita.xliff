<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="radminjmxenablepolicy.dita" source-language="en" target-language="fr" datatype="xml" okp:inputEncoding="utf-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/xmlstream/target/classes/net/sf/okapi/filters/xmlstream/dita.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1">
<source xml:lang="en">Fine-grained authorization using a security policy</source>
<seg-source><mrk mid="0" mtype="seg">Fine-grained authorization using a security policy</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Fine-grained authorization using a security policy</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en">When you start the Network Server from the command line, it installs a security manager and a basic security policy by default.</source>
<seg-source><mrk mid="0" mtype="seg">When you start the Network Server from the command line, it installs a security manager and a basic security policy by default.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">When you start the Network Server from the command line, it installs a security manager and a basic security policy by default.</mrk></target>
</trans-unit>
<trans-unit id="tu3">
<source xml:lang="en">Java Management Extensions (JMX) technology</source>
<seg-source><mrk mid="0" mtype="seg">Java Management Extensions (JMX) technology</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Java Management Extensions (JMX) technology</mrk></target>
</trans-unit>
<trans-unit id="tu4">
<source xml:lang="en">JMX</source>
<seg-source><mrk mid="0" mtype="seg">JMX</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">JMX</mrk></target>
</trans-unit>
<trans-unit id="tu5">
<source xml:lang="en">using a security policy</source>
<seg-source><mrk mid="0" mtype="seg">using a security policy</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">using a security policy</mrk></target>
</trans-unit>
<trans-unit id="tu6">
<source xml:lang="en">This policy includes the required permissions to allow JMX users to access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans if JMX user authentication is disabled. If JMX user authentication is enabled, you may need to grant additional permissions to specific users (JMXPrincipals).</source>
<seg-source><mrk mid="0" mtype="seg">This policy includes the required permissions to allow JMX users to access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans if JMX user authentication is disabled.</mrk><mrk mid="1" mtype="seg"> If JMX user authentication is enabled, you may need to grant additional permissions to specific users (JMXPrincipals).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This policy includes the required permissions to allow JMX users to access the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans if JMX user authentication is disabled.</mrk><mrk mid="1" mtype="seg"> If JMX user authentication is enabled, you may need to grant additional permissions to specific users (JMXPrincipals).</mrk></target>
</trans-unit>
<trans-unit id="tu7">
<source xml:lang="en">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>NetworkServerMBean<ept id="1">&lt;/codeph&gt;</ept>'s <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ping<ept id="2">&lt;/codeph&gt;</ept> operation requires the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="3">&lt;/codeph&gt;</ept> file to be granted an additional permission that is not included in the default security policy:</source>
<seg-source><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>NetworkServerMBean<ept id="1">&lt;/codeph&gt;</ept>'s <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ping<ept id="2">&lt;/codeph&gt;</ept> operation requires the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="3">&lt;/codeph&gt;</ept> file to be granted an additional permission that is not included in the default security policy:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>NetworkServerMBean<ept id="1">&lt;/codeph&gt;</ept>'s <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>ping<ept id="2">&lt;/codeph&gt;</ept> operation requires the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="3">&lt;/codeph&gt;</ept> file to be granted an additional permission that is not included in the default security policy:</mrk></target>
</trans-unit>
<trans-unit id="tu8">
<source xml:lang="en">// If the server is listening on the loopback interface only (default) permission java.net.SocketPermission "localhost", "connect,resolve"; // If the server's network interface setting (-h or derby.drda.host) is // non-default // Note: Allows outbound connections to any host! permission java.net.SocketPermission "*", "connect,resolve";</source>
<seg-source><mrk mid="0" mtype="seg">// If the server is listening on the loopback interface only (default) permission java.net.SocketPermission "localhost", "connect,resolve"; // If the server's network interface setting (-h or derby.drda.host) is // non-default // Note: Allows outbound connections to any host! permission java.net.SocketPermission "*", "connect,resolve";</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// If the server is listening on the loopback interface only (default) permission java.net.SocketPermission "localhost", "connect,resolve"; // If the server's network interface setting (-h or derby.drda.host) is // non-default // Note: Allows outbound connections to any host! permission java.net.SocketPermission "*", "connect,resolve";</mrk></target>
</trans-unit>
<trans-unit id="tu9">
<source xml:lang="en">If you are using a custom security policy, refer to the public API documentation for the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans and to the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> security policy file template (<bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>$DERBY_HOME/demo/templates/server.policy<ept id="3">&lt;/codeph&gt;</ept>) for details about the permissions you may need to set to allow or restrict specific JMX access. This recommendation also applies if you are running <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> embedded with a security manager installed.</source>
<seg-source><mrk mid="0" mtype="seg">If you are using a custom security policy, refer to the public API documentation for the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans and to the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> security policy file template (<bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>$DERBY_HOME/demo/templates/server.policy<ept id="3">&lt;/codeph&gt;</ept>) for details about the permissions you may need to set to allow or restrict specific JMX access.</mrk><mrk mid="1" mtype="seg"> This recommendation also applies if you are running <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> embedded with a security manager installed.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you are using a custom security policy, refer to the public API documentation for the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> MBeans and to the <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> security policy file template (<bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>$DERBY_HOME/demo/templates/server.policy<ept id="3">&lt;/codeph&gt;</ept>) for details about the permissions you may need to set to allow or restrict specific JMX access.</mrk><mrk mid="1" mtype="seg"> This recommendation also applies if you are running <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> embedded with a security manager installed.</mrk></target>
</trans-unit>
<trans-unit id="tu10">
<source xml:lang="en">See <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservrun.dita#tadminnetservrun"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for more information about security policy files.</source>
<seg-source><mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservrun.dita#tadminnetservrun"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for more information about security policy files.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-xref">&lt;xref href="tadminnetservrun.dita#tadminnetservrun"&gt;</bpt><ept id="1">&lt;/xref&gt;</ept> for more information about security policy files.</mrk></target>
</trans-unit>
<trans-unit id="tu11">
<source xml:lang="en">Some example permissions are included in the following code. These permissions are not necessarily suitable for any particular application or environment; some customization is probably needed. Only permissions relating to the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> JMX features have been included in the code. Additional permissions are needed for use of <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Some example permissions are included in the following code.</mrk><mrk mid="1" mtype="seg"> These permissions are not necessarily suitable for any particular application or environment; some customization is probably needed.</mrk><mrk mid="2" mtype="seg"> Only permissions relating to the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> JMX features have been included in the code.</mrk><mrk mid="3" mtype="seg"> Additional permissions are needed for use of <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some example permissions are included in the following code.</mrk><mrk mid="1" mtype="seg"> These permissions are not necessarily suitable for any particular application or environment; some customization is probably needed.</mrk><mrk mid="2" mtype="seg"> Only permissions relating to the <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> JMX features have been included in the code.</mrk><mrk mid="3" mtype="seg"> Additional permissions are needed for use of <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu12">
<source xml:lang="en">// // permissions for the user/principal "controlRole", for all codebases: // grant principal javax.management.remote.JMXPrincipal "controlRole" { // <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> system permissions (what is the user allowed to do?) // See API docs for SystemPermission and the specific MBeans for // details. permission org.apache.derby.security.SystemPermission "jmx", "control"; permission org.apache.derby.security.SystemPermission "engine", "monitor"; permission org.apache.derby.security.SystemPermission "server", "monitor,control"; // MBean permissions (which mbeans and associated actions should be // allowed for this user?) // Target name format is: className#member[objectName], where // objectName is: domain:keyProperties // Asterisk (*) means "all". See MBeanPermission API docs for details. permission javax.management.MBeanPermission "org.apache.derby.mbeans.*#*[org.apache.derby:*]", "getAttribute"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.JDBCMBean#acceptsURL[org.apache.derby:*]", "invoke"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.drda.NetworkServerMBean#ping[org.apache.derby:*]", "invoke"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.ManagementMBean#*[org.apache.derby:*]", "invoke"; // Extra permissions for application controlled ManagementMBean: // Not needed if you do not intend to create/register your own // <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> Management MBean. // Wildcards (*) allow all domains, key properties and MBean members. // You may want to be more specific here. permission javax.management.MBeanPermission "org.apache.derby.mbeans.Management#-[*:*]", "instantiate,registerMBean,unregisterMBean"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.Management#*[*:*]", "invoke"; // // jconsole: // - most of these permissions are needed to let JConsole query the // MBean server and display information about <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept>'s mbeans as well // as some default platform MBeans/MXBeans. // - if you don't use JConsole, but query the MBean server from your // JMX client app, some of these permissions may be needed. permission javax.management.MBeanPermission "org.apache.derby.mbeans.*#-[org.apache.derby:*]", "getMBeanInfo,queryNames,isInstanceOf"; permission javax.management.MBeanPermission "sun.management.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "sun.management.*#*[java.*:*]", "getAttribute,invoke"; permission javax.management.MBeanPermission "sun.management.*#-[com.sun.management*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "com.sun.management.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "com.sun.management.*#*[java.*:*]", "getAttribute,invoke"; permission javax.management.MBeanPermission "java.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "javax.management.MBeanServerDelegate#-[JMImplementation:type=MBeanServerDelegate]", "getMBeanInfo,isInstanceOf,queryNames,addNotificationListener"; permission java.net.SocketPermission "*", "resolve"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.library.path", "read"; permission java.lang.management.ManagementPermission "monitor"; // end jconsole }; grant codeBase "${derby.install.url}derby.jar" { // Allows <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> to create an MBeanServer: // permission javax.management.MBeanServerPermission "createMBeanServer"; // Allows access to <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby. <bpt id="6" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="6">&lt;/ph&gt;</ept> must be allowed to register and unregister // these MBeans. // It is possible to allow access only to specific MBeans, attributes, // or operations. To fine-tune this permission, see the API doc of // javax.management.MBeanPermission or the JMX Instrumentation and // Agent Specification. // permission javax.management.MBeanPermission "org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean"; // Trusts <bpt id="7" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="7">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these in // the MBean server. // permission javax.management.MBeanTrustPermission "register"; // Gives permission for JMX to be used against <bpt id="8" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="8">&lt;/ph&gt;</ept>. // If JMX user authentication is being used, a whole set of // fine-grained permissions needs to be granted to allow specific // users access to MBeans and actions they perform (see JMXPrincipal // permissions above). // Needed to allow access to all actions related to MBeans in the // org.apache.derby.mbeans package. // permission org.apache.derby.security.SystemPermission "jmx", "control"; permission org.apache.derby.security.SystemPermission "engine", "monitor"; permission org.apache.derby.security.SystemPermission "server", "monitor"; // add additonal derby.jar related permissions here... }; grant codeBase "${derby.install.url}derbynet.jar" { // Accept connections from any host (only localhost access is required // for JMX). // permission java.net.SocketPermission "*", "accept"; // For outbound MBean operations such as NetworkServerMBean's ping: // The wildcard "*" is to allow pings to both localhost and any other // server host. // permission java.net.SocketPermission "*", "connect,resolve"; // Gives permission for JMX to be used against <bpt id="9" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="9">&lt;/ph&gt;</ept>. // If JMX user authentication is being used, a whole set of // fine-grained permissions need to be granted to allow specific users // access to MBeans and actions they perform (see JMXPrincipal // permissions above). // Needed to allow access to all actions related to the // NetworkServerMBean. // permission org.apache.derby.security.SystemPermission "server", "control,monitor"; // add additonal derbynet.jar related permissions here...</source>
<seg-source><mrk mid="0" mtype="seg">// // permissions for the user/principal "controlRole", for all codebases: // grant principal javax.management.remote.JMXPrincipal "controlRole" { // <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> system permissions (what is the user allowed to do?) // See API docs for SystemPermission and the specific MBeans for // details.</mrk><mrk mid="1" mtype="seg"> permission org.apache.derby.security.SystemPermission "jmx", "control"; permission org.apache.derby.security.SystemPermission "engine", "monitor"; permission org.apache.derby.security.SystemPermission "server", "monitor,control"; // MBean permissions (which mbeans and associated actions should be // allowed for this user?) // Target name format is: className#member[objectName], where // objectName is: domain:keyProperties // Asterisk (*) means "all".</mrk><mrk mid="2" mtype="seg"> See MBeanPermission API docs for details.</mrk><mrk mid="3" mtype="seg"> permission javax.management.MBeanPermission "org.apache.derby.mbeans.*#*[org.apache.derby:*]", "getAttribute"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.JDBCMBean#acceptsURL[org.apache.derby:*]", "invoke"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.drda.NetworkServerMBean#ping[org.apache.derby:*]", "invoke"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.ManagementMBean#*[org.apache.derby:*]", "invoke"; // Extra permissions for application controlled ManagementMBean: // Not needed if you do not intend to create/register your own // <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> Management MBean.</mrk><mrk mid="4" mtype="seg"> // Wildcards (*) allow all domains, key properties and MBean members.</mrk><mrk mid="5" mtype="seg"> // You may want to be more specific here.</mrk><mrk mid="6" mtype="seg"> permission javax.management.MBeanPermission "org.apache.derby.mbeans.Management#-[*:*]", "instantiate,registerMBean,unregisterMBean"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.Management#*[*:*]", "invoke"; // // jconsole: // - most of these permissions are needed to let JConsole query the // MBean server and display information about <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept>'s mbeans as well // as some default platform MBeans/MXBeans.</mrk><mrk mid="7" mtype="seg"> // - if you don't use JConsole, but query the MBean server from your // JMX client app, some of these permissions may be needed.</mrk><mrk mid="8" mtype="seg"> permission javax.management.MBeanPermission "org.apache.derby.mbeans.*#-[org.apache.derby:*]", "getMBeanInfo,queryNames,isInstanceOf"; permission javax.management.MBeanPermission "sun.management.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "sun.management.*#*[java.*:*]", "getAttribute,invoke"; permission javax.management.MBeanPermission "sun.management.*#-[com.sun.management*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "com.sun.management.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "com.sun.management.*#*[java.*:*]", "getAttribute,invoke"; permission javax.management.MBeanPermission "java.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "javax.management.MBeanServerDelegate#-[JMImplementation:type=MBeanServerDelegate]", "getMBeanInfo,isInstanceOf,queryNames,addNotificationListener"; permission java.net.SocketPermission "*", "resolve"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.library.path", "read"; permission java.lang.management.ManagementPermission "monitor"; // end jconsole }; grant codeBase "${derby.install.url}derby.jar" { // Allows <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> to create an MBeanServer: // permission javax.management.MBeanServerPermission "createMBeanServer"; // Allows access to <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby.</mrk><mrk mid="9" mtype="seg"> <bpt id="6" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="6">&lt;/ph&gt;</ept> must be allowed to register and unregister // these MBeans.</mrk><mrk mid="10" mtype="seg"> // It is possible to allow access only to specific MBeans, attributes, // or operations.</mrk><mrk mid="11" mtype="seg"> To fine-tune this permission, see the API doc of // javax.management.MBeanPermission or the JMX Instrumentation and // Agent Specification.</mrk><mrk mid="12" mtype="seg"> // permission javax.management.MBeanPermission "org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean"; // Trusts <bpt id="7" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="7">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these in // the MBean server.</mrk><mrk mid="13" mtype="seg"> // permission javax.management.MBeanTrustPermission "register"; // Gives permission for JMX to be used against <bpt id="8" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="8">&lt;/ph&gt;</ept>.</mrk><mrk mid="14" mtype="seg"> // If JMX user authentication is being used, a whole set of // fine-grained permissions needs to be granted to allow specific // users access to MBeans and actions they perform (see JMXPrincipal // permissions above).</mrk><mrk mid="15" mtype="seg"> // Needed to allow access to all actions related to MBeans in the // org.apache.derby.mbeans package.</mrk><mrk mid="16" mtype="seg"> // permission org.apache.derby.security.SystemPermission "jmx", "control"; permission org.apache.derby.security.SystemPermission "engine", "monitor"; permission org.apache.derby.security.SystemPermission "server", "monitor"; // add additonal derby.jar related permissions here...</mrk><mrk mid="17" mtype="seg"> }; grant codeBase "${derby.install.url}derbynet.jar" { // Accept connections from any host (only localhost access is required // for JMX).</mrk><mrk mid="18" mtype="seg"> // permission java.net.SocketPermission "*", "accept"; // For outbound MBean operations such as NetworkServerMBean's ping: // The wildcard "*" is to allow pings to both localhost and any other // server host.</mrk><mrk mid="19" mtype="seg"> // permission java.net.SocketPermission "*", "connect,resolve"; // Gives permission for JMX to be used against <bpt id="9" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="9">&lt;/ph&gt;</ept>.</mrk><mrk mid="20" mtype="seg"> // If JMX user authentication is being used, a whole set of // fine-grained permissions need to be granted to allow specific users // access to MBeans and actions they perform (see JMXPrincipal // permissions above).</mrk><mrk mid="21" mtype="seg"> // Needed to allow access to all actions related to the // NetworkServerMBean.</mrk><mrk mid="22" mtype="seg"> // permission org.apache.derby.security.SystemPermission "server", "control,monitor"; // add additonal derbynet.jar related permissions here...</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">// // permissions for the user/principal "controlRole", for all codebases: // grant principal javax.management.remote.JMXPrincipal "controlRole" { // <bpt id="1" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="1">&lt;/ph&gt;</ept> system permissions (what is the user allowed to do?) // See API docs for SystemPermission and the specific MBeans for // details.</mrk><mrk mid="1" mtype="seg"> permission org.apache.derby.security.SystemPermission "jmx", "control"; permission org.apache.derby.security.SystemPermission "engine", "monitor"; permission org.apache.derby.security.SystemPermission "server", "monitor,control"; // MBean permissions (which mbeans and associated actions should be // allowed for this user?) // Target name format is: className#member[objectName], where // objectName is: domain:keyProperties // Asterisk (*) means "all".</mrk><mrk mid="2" mtype="seg"> See MBeanPermission API docs for details.</mrk><mrk mid="3" mtype="seg"> permission javax.management.MBeanPermission "org.apache.derby.mbeans.*#*[org.apache.derby:*]", "getAttribute"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.JDBCMBean#acceptsURL[org.apache.derby:*]", "invoke"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.drda.NetworkServerMBean#ping[org.apache.derby:*]", "invoke"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.ManagementMBean#*[org.apache.derby:*]", "invoke"; // Extra permissions for application controlled ManagementMBean: // Not needed if you do not intend to create/register your own // <bpt id="2" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="2">&lt;/ph&gt;</ept> Management MBean.</mrk><mrk mid="4" mtype="seg"> // Wildcards (*) allow all domains, key properties and MBean members.</mrk><mrk mid="5" mtype="seg"> // You may want to be more specific here.</mrk><mrk mid="6" mtype="seg"> permission javax.management.MBeanPermission "org.apache.derby.mbeans.Management#-[*:*]", "instantiate,registerMBean,unregisterMBean"; permission javax.management.MBeanPermission "org.apache.derby.mbeans.Management#*[*:*]", "invoke"; // // jconsole: // - most of these permissions are needed to let JConsole query the // MBean server and display information about <bpt id="3" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="3">&lt;/ph&gt;</ept>'s mbeans as well // as some default platform MBeans/MXBeans.</mrk><mrk mid="7" mtype="seg"> // - if you don't use JConsole, but query the MBean server from your // JMX client app, some of these permissions may be needed.</mrk><mrk mid="8" mtype="seg"> permission javax.management.MBeanPermission "org.apache.derby.mbeans.*#-[org.apache.derby:*]", "getMBeanInfo,queryNames,isInstanceOf"; permission javax.management.MBeanPermission "sun.management.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "sun.management.*#*[java.*:*]", "getAttribute,invoke"; permission javax.management.MBeanPermission "sun.management.*#-[com.sun.management*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "com.sun.management.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "com.sun.management.*#*[java.*:*]", "getAttribute,invoke"; permission javax.management.MBeanPermission "java.*#-[java.*:*]", "getMBeanInfo,isInstanceOf,queryNames"; permission javax.management.MBeanPermission "javax.management.MBeanServerDelegate#-[JMImplementation:type=MBeanServerDelegate]", "getMBeanInfo,isInstanceOf,queryNames,addNotificationListener"; permission java.net.SocketPermission "*", "resolve"; permission java.util.PropertyPermission "java.class.path", "read"; permission java.util.PropertyPermission "java.library.path", "read"; permission java.lang.management.ManagementPermission "monitor"; // end jconsole }; grant codeBase "${derby.install.url}derby.jar" { // Allows <bpt id="4" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="4">&lt;/ph&gt;</ept> to create an MBeanServer: // permission javax.management.MBeanServerPermission "createMBeanServer"; // Allows access to <bpt id="5" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="5">&lt;/ph&gt;</ept>'s built-in MBeans, within the domain // org.apache.derby.</mrk><mrk mid="9" mtype="seg"> <bpt id="6" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="6">&lt;/ph&gt;</ept> must be allowed to register and unregister // these MBeans.</mrk><mrk mid="10" mtype="seg"> // It is possible to allow access only to specific MBeans, attributes, // or operations.</mrk><mrk mid="11" mtype="seg"> To fine-tune this permission, see the API doc of // javax.management.MBeanPermission or the JMX Instrumentation and // Agent Specification.</mrk><mrk mid="12" mtype="seg"> // permission javax.management.MBeanPermission "org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean"; // Trusts <bpt id="7" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="7">&lt;/ph&gt;</ept> code to be a source of MBeans and to register these in // the MBean server.</mrk><mrk mid="13" mtype="seg"> // permission javax.management.MBeanTrustPermission "register"; // Gives permission for JMX to be used against <bpt id="8" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="8">&lt;/ph&gt;</ept>.</mrk><mrk mid="14" mtype="seg"> // If JMX user authentication is being used, a whole set of // fine-grained permissions needs to be granted to allow specific // users access to MBeans and actions they perform (see JMXPrincipal // permissions above).</mrk><mrk mid="15" mtype="seg"> // Needed to allow access to all actions related to MBeans in the // org.apache.derby.mbeans package.</mrk><mrk mid="16" mtype="seg"> // permission org.apache.derby.security.SystemPermission "jmx", "control"; permission org.apache.derby.security.SystemPermission "engine", "monitor"; permission org.apache.derby.security.SystemPermission "server", "monitor"; // add additonal derby.jar related permissions here...</mrk><mrk mid="17" mtype="seg"> }; grant codeBase "${derby.install.url}derbynet.jar" { // Accept connections from any host (only localhost access is required // for JMX).</mrk><mrk mid="18" mtype="seg"> // permission java.net.SocketPermission "*", "accept"; // For outbound MBean operations such as NetworkServerMBean's ping: // The wildcard "*" is to allow pings to both localhost and any other // server host.</mrk><mrk mid="19" mtype="seg"> // permission java.net.SocketPermission "*", "connect,resolve"; // Gives permission for JMX to be used against <bpt id="9" ctype="x-ph">&lt;ph conref="../conrefs.dita#prod/productshortname"&gt;</bpt><ept id="9">&lt;/ph&gt;</ept>.</mrk><mrk mid="20" mtype="seg"> // If JMX user authentication is being used, a whole set of // fine-grained permissions need to be granted to allow specific users // access to MBeans and actions they perform (see JMXPrincipal // permissions above).</mrk><mrk mid="21" mtype="seg"> // Needed to allow access to all actions related to the // NetworkServerMBean.</mrk><mrk mid="22" mtype="seg"> // permission org.apache.derby.security.SystemPermission "server", "control,monitor"; // add additonal derbynet.jar related permissions here...</mrk></target>
</trans-unit>
<trans-unit id="tu13">
<source xml:lang="en">In the example above, the system property <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.install.url<ept id="1">&lt;/codeph&gt;</ept> is used to tell the security manager/policy implementation where to find the codebases <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept> and <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="3">&lt;/codeph&gt;</ept>. Using a property provides flexibility; however, you may avoid the use of such a property by specifying the full codebase URLs directly in the policy file. The value of this property may be specified on the command line, as shown below:</source>
<seg-source><mrk mid="0" mtype="seg">In the example above, the system property <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.install.url<ept id="1">&lt;/codeph&gt;</ept> is used to tell the security manager/policy implementation where to find the codebases <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept> and <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Using a property provides flexibility; however, you may avoid the use of such a property by specifying the full codebase URLs directly in the policy file.</mrk><mrk mid="2" mtype="seg"> The value of this property may be specified on the command line, as shown below:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In the example above, the system property <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.install.url<ept id="1">&lt;/codeph&gt;</ept> is used to tell the security manager/policy implementation where to find the codebases <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="2">&lt;/codeph&gt;</ept> and <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>derbynet.jar<ept id="3">&lt;/codeph&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Using a property provides flexibility; however, you may avoid the use of such a property by specifying the full codebase URLs directly in the policy file.</mrk><mrk mid="2" mtype="seg"> The value of this property may be specified on the command line, as shown below:</mrk></target>
</trans-unit>
<trans-unit id="tu14">
<source xml:lang="en">-Dderby.install.url=file:/home/user/derby/10.9.1/lib/</source>
<seg-source><mrk mid="0" mtype="seg">-Dderby.install.url=file:/home/user/derby/10.9.1/lib/</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">-Dderby.install.url=file:/home/user/derby/10.9.1/lib/</mrk></target>
</trans-unit>
<trans-unit id="tu15">
<source xml:lang="en">or</source>
<seg-source><mrk mid="0" mtype="seg">or</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">or</mrk></target>
</trans-unit>
<trans-unit id="tu16">
<source xml:lang="en">-Dderby.install.url=file:/C:/derby/10.9.1/lib/</source>
<seg-source><mrk mid="0" mtype="seg">-Dderby.install.url=file:/C:/derby/10.9.1/lib/</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">-Dderby.install.url=file:/C:/derby/10.9.1/lib/</mrk></target>
</trans-unit>
<trans-unit id="tu17">
<source xml:lang="en">For more information about policy files, granting permissions, and property expansion, see "Default Policy Implementation and Policy File Syntax" at <bpt id="1" ctype="x-xref">&lt;xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html"
scope="external"&gt;</bpt>http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html<ept id="1">&lt;/xref&gt;</ept> and "Policy File Creation and Management" at <bpt id="2" ctype="x-xref">&lt;xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyGuide.html"
scope="external"&gt;</bpt>http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyGuide.html<ept id="2">&lt;/xref&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">For more information about policy files, granting permissions, and property expansion, see "Default Policy Implementation and Policy File Syntax" at <bpt id="1" ctype="x-xref">&lt;xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html"
scope="external"&gt;</bpt>http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html<ept id="1">&lt;/xref&gt;</ept> and "Policy File Creation and Management" at <bpt id="2" ctype="x-xref">&lt;xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyGuide.html"
scope="external"&gt;</bpt>http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyGuide.html<ept id="2">&lt;/xref&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For more information about policy files, granting permissions, and property expansion, see "Default Policy Implementation and Policy File Syntax" at <bpt id="1" ctype="x-xref">&lt;xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html"
scope="external"&gt;</bpt>http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html<ept id="1">&lt;/xref&gt;</ept> and "Policy File Creation and Management" at <bpt id="2" ctype="x-xref">&lt;xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyGuide.html"
scope="external"&gt;</bpt>http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyGuide.html<ept id="2">&lt;/xref&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu18">
<source xml:lang="en">Debugging permission issues</source>
<seg-source><mrk mid="0" mtype="seg">Debugging permission issues</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Debugging permission issues</mrk></target>
</trans-unit>
<trans-unit id="tu19">
<source xml:lang="en">Dealing with security managers, policy files and permissions is not always easy. Sometimes an action you want to perform fails due to some security or permission issue that you do not understand. The following tip may help.</source>
<seg-source><mrk mid="0" mtype="seg">Dealing with security managers, policy files and permissions is not always easy.</mrk><mrk mid="1" mtype="seg"> Sometimes an action you want to perform fails due to some security or permission issue that you do not understand.</mrk><mrk mid="2" mtype="seg"> The following tip may help.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Dealing with security managers, policy files and permissions is not always easy.</mrk><mrk mid="1" mtype="seg"> Sometimes an action you want to perform fails due to some security or permission issue that you do not understand.</mrk><mrk mid="2" mtype="seg"> The following tip may help.</mrk></target>
</trans-unit>
<trans-unit id="tu20">
<source xml:lang="en">When you start the JVM that is being protected by the security manager, add a <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>java.security.debug<ept id="1">&lt;/codeph&gt;</ept> flag to see detailed output related to security policy and permission usage. For a list of valid options, use the following command:</source>
<seg-source><mrk mid="0" mtype="seg">When you start the JVM that is being protected by the security manager, add a <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>java.security.debug<ept id="1">&lt;/codeph&gt;</ept> flag to see detailed output related to security policy and permission usage.</mrk><mrk mid="1" mtype="seg"> For a list of valid options, use the following command:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">When you start the JVM that is being protected by the security manager, add a <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>java.security.debug<ept id="1">&lt;/codeph&gt;</ept> flag to see detailed output related to security policy and permission usage.</mrk><mrk mid="1" mtype="seg"> For a list of valid options, use the following command:</mrk></target>
</trans-unit>
<trans-unit id="tu21">
<source xml:lang="en"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java -Djava.security.debug=help<ept id="1">&lt;/b&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java -Djava.security.debug=help<ept id="1">&lt;/b&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-b">&lt;b&gt;</bpt>java -Djava.security.debug=help<ept id="1">&lt;/b&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu22">
<source xml:lang="en">For example, you could use the following option when you start the Network Server from the command line:</source>
<seg-source><mrk mid="0" mtype="seg">For example, you could use the following option when you start the Network Server from the command line:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For example, you could use the following option when you start the Network Server from the command line:</mrk></target>
</trans-unit>
<trans-unit id="tu23">
<source xml:lang="en">-Djava.security.debug=access:failure</source>
<seg-source><mrk mid="0" mtype="seg">-Djava.security.debug=access:failure</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">-Djava.security.debug=access:failure</mrk></target>
</trans-unit>
<trans-unit id="tu24">
<source xml:lang="en">This option will print information to the console that allows you to learn specifically which permissions are granted and which are missing when a failure occurs. Due to the amount of output generated when you set the debug flag, it may be wise to store the output in a file and search through it afterwards.</source>
<seg-source><mrk mid="0" mtype="seg">This option will print information to the console that allows you to learn specifically which permissions are granted and which are missing when a failure occurs.</mrk><mrk mid="1" mtype="seg"> Due to the amount of output generated when you set the debug flag, it may be wise to store the output in a file and search through it afterwards.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This option will print information to the console that allows you to learn specifically which permissions are granted and which are missing when a failure occurs.</mrk><mrk mid="1" mtype="seg"> Due to the amount of output generated when you set the debug flag, it may be wise to store the output in a file and search through it afterwards.</mrk></target>
</trans-unit>
<trans-unit id="tu25">
<source xml:lang="en">For example, to find out details about a missing permission, search for the text "access denied" in the output, and you will see something like the following:</source>
<seg-source><mrk mid="0" mtype="seg">For example, to find out details about a missing permission, search for the text "access denied" in the output, and you will see something like the following:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For example, to find out details about a missing permission, search for the text "access denied" in the output, and you will see something like the following:</mrk></target>
</trans-unit>
<trans-unit id="tu26">
<source xml:lang="en">access: access denied (org.apache.derby.security.SystemPermission engine monitor) java.lang.Exception: Stack trace at java.lang.Thread.dumpStack(Thread.java:1158) ... at org.apache.derby.iapi.services.info.Version.getVersionString (Unknown Source) ...</source>
<seg-source><mrk mid="0" mtype="seg">access: access denied (org.apache.derby.security.SystemPermission engine monitor) java.lang.Exception: Stack trace at java.lang.Thread.dumpStack(Thread.java:1158) ...</mrk><mrk mid="1" mtype="seg"> at org.apache.derby.iapi.services.info.Version.getVersionString (Unknown Source) ...</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">access: access denied (org.apache.derby.security.SystemPermission engine monitor) java.lang.Exception: Stack trace at java.lang.Thread.dumpStack(Thread.java:1158) ...</mrk><mrk mid="1" mtype="seg"> at org.apache.derby.iapi.services.info.Version.getVersionString (Unknown Source) ...</mrk></target>
</trans-unit>
<trans-unit id="tu27">
<source xml:lang="en">The above example output shows that the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="1">&lt;/codeph&gt;</ept> code base was missing the following permission as the JMX client was accessing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionString<ept id="2">&lt;/codeph&gt;</ept> attribute of the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionMBean<ept id="3">&lt;/codeph&gt;</ept> for <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="4">&lt;/codeph&gt;</ept>:</source>
<seg-source><mrk mid="0" mtype="seg">The above example output shows that the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="1">&lt;/codeph&gt;</ept> code base was missing the following permission as the JMX client was accessing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionString<ept id="2">&lt;/codeph&gt;</ept> attribute of the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionMBean<ept id="3">&lt;/codeph&gt;</ept> for <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="4">&lt;/codeph&gt;</ept>:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The above example output shows that the <bpt id="1" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="1">&lt;/codeph&gt;</ept> code base was missing the following permission as the JMX client was accessing the <bpt id="2" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionString<ept id="2">&lt;/codeph&gt;</ept> attribute of the <bpt id="3" ctype="x-codeph">&lt;codeph&gt;</bpt>VersionMBean<ept id="3">&lt;/codeph&gt;</ept> for <bpt id="4" ctype="x-codeph">&lt;codeph&gt;</bpt>derby.jar<ept id="4">&lt;/codeph&gt;</ept>:</mrk></target>
</trans-unit>
<trans-unit id="tu28">
<source xml:lang="en">org.apache.derby.security.SystemPermission "engine", "monitor";</source>
<seg-source><mrk mid="0" mtype="seg">org.apache.derby.security.SystemPermission "engine", "monitor";</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">org.apache.derby.security.SystemPermission "engine", "monitor";</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
