<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="sanitizer.html" source-language="en" target-language="fr" datatype="html" okp:inputEncoding="UTF-8" okp:configId="/home/jimh/Code/Okapi/okapi/okapi/filters/html/target/classes/net/sf/okapi/filters/html/nonwellformedConfiguration.yml">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="tu1" restype="x-title">
<source xml:lang="en">The Anomy Sanitizer manual</source>
<seg-source><mrk mid="0" mtype="seg">The Anomy Sanitizer manual</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The Anomy Sanitizer manual</mrk></target>
</trans-unit>
<trans-unit id="tu2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu3" restype="x-h1">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>WARNING:<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>WARNING:<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>WARNING:<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu4" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>This document is outdated! Please refer to the CHANGELOG for up-to-date information on new features.<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>This document is outdated! Please refer to the CHANGELOG for up-to-date information on new features.<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>This document is outdated! Please refer to the CHANGELOG for up-to-date information on new features.<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu5" restype="x-h1">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>The <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp10]</bpt>Anomy<ept id="2">&lt;/a&gt;</ept> Sanitizer</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>The <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp10]</bpt>Anomy<ept id="2">&lt;/a&gt;</ept> Sanitizer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="top"&gt;</bpt>The <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp10]</bpt>Anomy<ept id="2">&lt;/a&gt;</ept> Sanitizer</mrk></target>
</trans-unit>
<trans-unit id="tu6" restype="x-paragraph">
<source xml:lang="en">This file is slowly turning into the Anomy sanitizer's user manual. The document is organized so that it makes sense to start at the beginning, and read continuously until you reach the mailer-specific configuration chapters. From that point on, everything is optional, read what interests you. Well... the <bpt id="1" ctype="link">[#$dp13]</bpt>feedback chapter<ept id="1">&lt;/a&gt;</ept> isn't really optional. Read it. <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>:-)<ept id="2">&lt;/tt&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg">This file is slowly turning into the Anomy sanitizer's user manual.</mrk><mrk mid="1" mtype="seg"> The document is organized so that it makes sense to start at the beginning, and read continuously until you reach the mailer-specific configuration chapters.</mrk><mrk mid="2" mtype="seg"> From that point on, everything is optional, read what interests you.</mrk><mrk mid="3" mtype="seg"> Well...</mrk><mrk mid="4" mtype="seg"> the <bpt id="1" ctype="link">[#$dp13]</bpt>feedback chapter<ept id="1">&lt;/a&gt;</ept> isn't really optional.</mrk><mrk mid="5" mtype="seg"> Read it.</mrk><mrk mid="6" mtype="seg"> <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>:-)<ept id="2">&lt;/tt&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This file is slowly turning into the Anomy sanitizer's user manual.</mrk><mrk mid="1" mtype="seg"> The document is organized so that it makes sense to start at the beginning, and read continuously until you reach the mailer-specific configuration chapters.</mrk><mrk mid="2" mtype="seg"> From that point on, everything is optional, read what interests you.</mrk><mrk mid="3" mtype="seg"> Well...</mrk><mrk mid="4" mtype="seg"> the <bpt id="1" ctype="link">[#$dp13]</bpt>feedback chapter<ept id="1">&lt;/a&gt;</ept> isn't really optional.</mrk><mrk mid="5" mtype="seg"> Read it.</mrk><mrk mid="6" mtype="seg"> <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>:-)<ept id="2">&lt;/tt&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu7" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu8" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp18]</bpt>Introduction<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp18]</bpt>Introduction<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp18]</bpt>Introduction<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu9" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp20]</bpt>Requirements<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp20]</bpt>Requirements<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp20]</bpt>Requirements<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu10" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp22]</bpt>Installation, testing<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp22]</bpt>Installation, testing<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp22]</bpt>Installation, testing<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu11" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp24]</bpt>Configuration<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp24]</bpt>Configuration<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp24]</bpt>Configuration<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu12" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp26]</bpt>Policies and virus scanners<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp26]</bpt>Policies and virus scanners<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp26]</bpt>Policies and virus scanners<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu13" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp28]</bpt>Customizing messages<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp28]</bpt>Customizing messages<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp28]</bpt>Customizing messages<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu14" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp30]</bpt>Recommendations<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp30]</bpt>Recommendations<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp30]</bpt>Recommendations<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu15" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp32]</bpt>A real-world configuration<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp32]</bpt>A real-world configuration<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp32]</bpt>A real-world configuration<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu16" restype="x-li">
<source xml:lang="en">In-transit sanitizing</source>
<seg-source><mrk mid="0" mtype="seg">In-transit sanitizing</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In-transit sanitizing</mrk></target>
</trans-unit>
<trans-unit id="tu17" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp37]</bpt>sendmail<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp37]</bpt>sendmail<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp37]</bpt>sendmail<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu18" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp39]</bpt>qmail<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp39]</bpt>qmail<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp39]</bpt>qmail<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu19" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp41]</bpt>others<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp41]</bpt>others<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp41]</bpt>others<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu20" restype="x-li">
<source xml:lang="en">Performance</source>
<seg-source><mrk mid="0" mtype="seg">Performance</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Performance</mrk></target>
</trans-unit>
<trans-unit id="tu21" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp46]</bpt>CPU<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp46]</bpt>CPU<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp46]</bpt>CPU<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu22" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp48]</bpt>Memory<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp48]</bpt>Memory<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp48]</bpt>Memory<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu23" restype="x-li">
<source xml:lang="en">Miscellanious hints / FAQs</source>
<seg-source><mrk mid="0" mtype="seg">Miscellanious hints / FAQs</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Miscellanious hints / FAQs</mrk></target>
</trans-unit>
<trans-unit id="tu24" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp53]</bpt>Virus scanning doesn't work!<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp53]</bpt>Virus scanning doesn't work!<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp53]</bpt>Virus scanning doesn't work!<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu25" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp55]</bpt>The testcases succeed, but I can't run the Sanitizer!<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp55]</bpt>The testcases succeed, but I can't run the Sanitizer!<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp55]</bpt>The testcases succeed, but I can't run the Sanitizer!<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu26" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp57]</bpt>What is the ANOMY environment variable for?<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp57]</bpt>What is the ANOMY environment variable for?<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp57]</bpt>What is the ANOMY environment variable for?<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu27" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp59]</bpt>Solaris and procmail<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp59]</bpt>Solaris and procmail<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp59]</bpt>Solaris and procmail<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu28" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp61]</bpt>Incoming mail and Postfix<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp61]</bpt>Incoming mail and Postfix<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp61]</bpt>Incoming mail and Postfix<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu29" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp63]</bpt>Large messages and memory consumption<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp63]</bpt>Large messages and memory consumption<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp63]</bpt>Large messages and memory consumption<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu30" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp65]</bpt>Corrupt attachments from Outlook users<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp65]</bpt>Corrupt attachments from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp65]</bpt>Corrupt attachments from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu31" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp67]</bpt>Ugly HTML mail from Outlook users<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp67]</bpt>Ugly HTML mail from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp67]</bpt>Ugly HTML mail from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu32" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu33" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu34" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp76]</bpt>Hacking the Anomy sanitizer<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp76]</bpt>Hacking the Anomy sanitizer<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp76]</bpt>Hacking the Anomy sanitizer<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu35" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp78]</bpt>Basic design<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp78]</bpt>Basic design<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp78]</bpt>Basic design<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu36" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp80]</bpt>Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp80]</bpt>Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp80]</bpt>Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu37" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp82]</bpt>Rough edges<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp82]</bpt>Rough edges<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp82]</bpt>Rough edges<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu38" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp84]</bpt>Standards<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp84]</bpt>Standards<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp84]</bpt>Standards<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu39" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu40" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu41" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp93]</bpt>Feedback<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp93]</bpt>Feedback<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp93]</bpt>Feedback<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu42" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp95]</bpt>Credits &amp; GPL<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp95]</bpt>Credits &amp; GPL<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp95]</bpt>Credits &amp; GPL<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu43" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu44">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu45" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt> Introduction <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt> Introduction <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt> Introduction <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu46" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> The Anomy sanitizer is what most people would call "an email virus scanner". That description is not totally accurate, but it does cover one of the more important jobs that the sanitizer can do for you - <bpt id="2" ctype="bold">&lt;b&gt;</bpt>it can scan email attachments for viruses<ept id="2">&lt;/b&gt;</ept>. Other things it can do: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> The Anomy sanitizer is what most people would call "an email virus scanner".</mrk><mrk mid="1" mtype="seg"> That description is not totally accurate, but it does cover one of the more important jobs that the sanitizer can do for you - <bpt id="2" ctype="bold">&lt;b&gt;</bpt>it can scan email attachments for viruses<ept id="2">&lt;/b&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> Other things it can do: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> The Anomy sanitizer is what most people would call "an email virus scanner".</mrk><mrk mid="1" mtype="seg"> That description is not totally accurate, but it does cover one of the more important jobs that the sanitizer can do for you - <bpt id="2" ctype="bold">&lt;b&gt;</bpt>it can scan email attachments for viruses<ept id="2">&lt;/b&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> Other things it can do: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu47" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu48" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Disable potentially dangerous HTML code, such as javascript, within incoming email. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Disable potentially dangerous HTML code, such as javascript, within incoming email.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Disable potentially dangerous HTML code, such as javascript, within incoming email.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu49" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Protect you from email-based break-in attempts which exploit bugs in common email programs (Outlook, Eudora, Pine, ...). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Protect you from email-based break-in attempts which exploit bugs in common email programs (Outlook, Eudora, Pine, ...).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Protect you from email-based break-in attempts which exploit bugs in common email programs (Outlook, Eudora, Pine, ...).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu50" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Block or "mangle" attachments based on their file names. This way if you don't <bpt id="2" ctype="italic">&lt;i&gt;</bpt>need<ept id="2">&lt;/i&gt;</ept> to recieve e.g. visual basic scripts, then you don't have to worry about the security risk they imply (the ILOVEYOU virus was a visual basic program). This lets you protect yourself and your users from whole classes of attacks, without relying on complex, resource intensive and <bpt id="3" ctype="italic">&lt;i&gt;</bpt>outdated<ept id="3">&lt;/i&gt;</ept> virus scanning solutions. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Block or "mangle" attachments based on their file names.</mrk><mrk mid="1" mtype="seg"> This way if you don't <bpt id="2" ctype="italic">&lt;i&gt;</bpt>need<ept id="2">&lt;/i&gt;</ept> to recieve e.g. visual basic scripts, then you don't have to worry about the security risk they imply (the ILOVEYOU virus was a visual basic program).</mrk><mrk mid="2" mtype="seg"> This lets you protect yourself and your users from whole classes of attacks, without relying on complex, resource intensive and <bpt id="3" ctype="italic">&lt;i&gt;</bpt>outdated<ept id="3">&lt;/i&gt;</ept> virus scanning solutions.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="general"&gt;</it> Block or "mangle" attachments based on their file names.</mrk><mrk mid="1" mtype="seg"> This way if you don't <bpt id="2" ctype="italic">&lt;i&gt;</bpt>need<ept id="2">&lt;/i&gt;</ept> to recieve e.g. visual basic scripts, then you don't have to worry about the security risk they imply (the ILOVEYOU virus was a visual basic program).</mrk><mrk mid="2" mtype="seg"> This lets you protect yourself and your users from whole classes of attacks, without relying on complex, resource intensive and <bpt id="3" ctype="italic">&lt;i&gt;</bpt>outdated<ept id="3">&lt;/i&gt;</ept> virus scanning solutions.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu51" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu52" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt> The sanitizer is designed not to waste important system resources (<ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp113]</bpt>CPU<ept id="2">&lt;/a&gt;</ept>, <bpt id="3" ctype="link">[#$dp114]</bpt>memory<ept id="3">&lt;/a&gt;</ept>, disk space) unnecessarily, and does so by treating it's input as a stream which is scanned and rewritten a little bit at a time.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt> The sanitizer is designed not to waste important system resources (<ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp113]</bpt>CPU<ept id="2">&lt;/a&gt;</ept>, <bpt id="3" ctype="link">[#$dp114]</bpt>memory<ept id="3">&lt;/a&gt;</ept>, disk space) unnecessarily, and does so by treating it's input as a stream which is scanned and rewritten a little bit at a time.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="general"&gt;</bpt> The sanitizer is designed not to waste important system resources (<ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp113]</bpt>CPU<ept id="2">&lt;/a&gt;</ept>, <bpt id="3" ctype="link">[#$dp114]</bpt>memory<ept id="3">&lt;/a&gt;</ept>, disk space) unnecessarily, and does so by treating it's input as a stream which is scanned and rewritten a little bit at a time.</mrk></target>
</trans-unit>
<trans-unit id="tu53" restype="x-paragraph">
<source xml:lang="en">One of the core ideas behind the design of the sanitizer, is that just because a message contains an infected attachment doesn't mean that the rest of it shouldn't be delivered. Email often contains important information, and it is vital that a tool like this interrupt the normal flow of communication as little as possible. It's common courtesy to <bpt id="1" ctype="link">[#$dp117]</bpt>inform the user<ept id="1">&lt;/a&gt;</ept> of any changes that are made. The Anomy sanitizer tries to follow these rules.</source>
<seg-source><mrk mid="0" mtype="seg">One of the core ideas behind the design of the sanitizer, is that just because a message contains an infected attachment doesn't mean that the rest of it shouldn't be delivered.</mrk><mrk mid="1" mtype="seg"> Email often contains important information, and it is vital that a tool like this interrupt the normal flow of communication as little as possible.</mrk><mrk mid="2" mtype="seg"> It's common courtesy to <bpt id="1" ctype="link">[#$dp117]</bpt>inform the user<ept id="1">&lt;/a&gt;</ept> of any changes that are made.</mrk><mrk mid="3" mtype="seg"> The Anomy sanitizer tries to follow these rules.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">One of the core ideas behind the design of the sanitizer, is that just because a message contains an infected attachment doesn't mean that the rest of it shouldn't be delivered.</mrk><mrk mid="1" mtype="seg"> Email often contains important information, and it is vital that a tool like this interrupt the normal flow of communication as little as possible.</mrk><mrk mid="2" mtype="seg"> It's common courtesy to <bpt id="1" ctype="link">[#$dp117]</bpt>inform the user<ept id="1">&lt;/a&gt;</ept> of any changes that are made.</mrk><mrk mid="3" mtype="seg"> The Anomy sanitizer tries to follow these rules.</mrk></target>
</trans-unit>
<trans-unit id="tu54" restype="x-paragraph">
<source xml:lang="en">The sanitizer is based on solid foundations - most of the ideas implemented in the first versions of the sanitizer were ported from John D. Hardin's "<bpt id="1" ctype="link">[#$dp120]</bpt>email security through procmail<ept id="1">&lt;/a&gt;</ept>" package. The sanitizer, like the code it is based on, is <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Free Software<ept id="2">&lt;/b&gt;</ept> in the <bpt id="3" ctype="link">[#$dp121]</bpt>GNU<ept id="3">&lt;/a&gt;</ept> sense of the term - the sanitizer may be modified and redistributed according to the terms of the GNU General Public License.</source>
<seg-source><mrk mid="0" mtype="seg">The sanitizer is based on solid foundations - most of the ideas implemented in the first versions of the sanitizer were ported from John D. Hardin's "<bpt id="1" ctype="link">[#$dp120]</bpt>email security through procmail<ept id="1">&lt;/a&gt;</ept>" package.</mrk><mrk mid="1" mtype="seg"> The sanitizer, like the code it is based on, is <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Free Software<ept id="2">&lt;/b&gt;</ept> in the <bpt id="3" ctype="link">[#$dp121]</bpt>GNU<ept id="3">&lt;/a&gt;</ept> sense of the term - the sanitizer may be modified and redistributed according to the terms of the GNU General Public License.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The sanitizer is based on solid foundations - most of the ideas implemented in the first versions of the sanitizer were ported from John D. Hardin's "<bpt id="1" ctype="link">[#$dp120]</bpt>email security through procmail<ept id="1">&lt;/a&gt;</ept>" package.</mrk><mrk mid="1" mtype="seg"> The sanitizer, like the code it is based on, is <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Free Software<ept id="2">&lt;/b&gt;</ept> in the <bpt id="3" ctype="link">[#$dp121]</bpt>GNU<ept id="3">&lt;/a&gt;</ept> sense of the term - the sanitizer may be modified and redistributed according to the terms of the GNU General Public License.</mrk></target>
</trans-unit>
<trans-unit id="tu55" restype="x-paragraph">
<source xml:lang="en">The following is a random sample of the attacks that are blocked by the Anomy sanitizer in it's most common configurations (as of release 1.28):</source>
<seg-source><mrk mid="0" mtype="seg">The following is a random sample of the attacks that are blocked by the Anomy sanitizer in it's most common configurations (as of release 1.28):</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following is a random sample of the attacks that are blocked by the Anomy sanitizer in it's most common configurations (as of release 1.28):</mrk></target>
</trans-unit>
<trans-unit id="tu56" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu57" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp128]</bpt>Microsoft Windows 2000 ActiveX Control Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp128]</bpt>Microsoft Windows 2000 ActiveX Control Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp128]</bpt>Microsoft Windows 2000 ActiveX Control Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu58" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp130]</bpt>Microsoft Exchange Server Invalid MIME Header charset = "" DoS Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp130]</bpt>Microsoft Exchange Server Invalid MIME Header charset = "" DoS Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp130]</bpt>Microsoft Exchange Server Invalid MIME Header charset = "" DoS Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu59" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp132]</bpt>Microsoft Internet Explorer / Outlook Express GetObject() File Disclosure Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp132]</bpt>Microsoft Internet Explorer / Outlook Express GetObject() File Disclosure Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp132]</bpt>Microsoft Internet Explorer / Outlook Express GetObject() File Disclosure Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu60" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp134]</bpt>Pine "From:" Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp134]</bpt>Pine "From:" Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp134]</bpt>Pine "From:" Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu61" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp136]</bpt>Microsoft Outlook / Outlook Express GMT Field Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp136]</bpt>Microsoft Outlook / Outlook Express GMT Field Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp136]</bpt>Microsoft Outlook / Outlook Express GMT Field Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu62" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp138]</bpt>Microsoft Internet Explorer and Outlook/Outlook Express Remote File Write Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp138]</bpt>Microsoft Internet Explorer and Outlook/Outlook Express Remote File Write Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp138]</bpt>Microsoft Internet Explorer and Outlook/Outlook Express Remote File Write Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu63" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp140]</bpt>ITHouse Mail Server 1.04 Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp140]</bpt>ITHouse Mail Server 1.04 Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp140]</bpt>ITHouse Mail Server 1.04 Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu64" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp142]</bpt>Microsoft Clip Art Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp142]</bpt>Microsoft Clip Art Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp142]</bpt>Microsoft Clip Art Buffer Overflow Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu65" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp144]</bpt>MS Outlook Express 5 Javascript Email Access Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp144]</bpt>MS Outlook Express 5 Javascript Email Access Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp144]</bpt>MS Outlook Express 5 Javascript Email Access Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu66" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp146]</bpt>Microsoft ActiveX CAB File Execution Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp146]</bpt>Microsoft ActiveX CAB File Execution Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp146]</bpt>Microsoft ActiveX CAB File Execution Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu67" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp148]</bpt>Microsoft Virtual Machine com.ms.activeX.ActiveXComponent Arbitrary Program Execution Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp148]</bpt>Microsoft Virtual Machine com.ms.activeX.ActiveXComponent Arbitrary Program Execution Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp148]</bpt>Microsoft Virtual Machine com.ms.activeX.ActiveXComponent Arbitrary Program Execution Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu68" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp150]</bpt>Microsoft Outlook Express Persistent Mail-Browser Link Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp150]</bpt>Microsoft Outlook Express Persistent Mail-Browser Link Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp150]</bpt>Microsoft Outlook Express Persistent Mail-Browser Link Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu69" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp152]</bpt>Microsoft Outlook 98 / Outlook Express 4.x Long Filename Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp152]</bpt>Microsoft Outlook 98 / Outlook Express 4.x Long Filename Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp152]</bpt>Microsoft Outlook 98 / Outlook Express 4.x Long Filename Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu70" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp154]</bpt>Multiple Vendor Buffer Overflow in MIME-aware Mail and News Clients Vulnerability<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp154]</bpt>Multiple Vendor Buffer Overflow in MIME-aware Mail and News Clients Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp154]</bpt>Multiple Vendor Buffer Overflow in MIME-aware Mail and News Clients Vulnerability<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu71" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu72" restype="x-paragraph">
<source xml:lang="en">In all cases the above exploits are blocked by some sort of generic mechanism which will prevent a number of related attacks against similar software with similar problems. This list doesn't include the more common low-tech trojan-horse/social engineering attack methods which are best handled with user education and an automatically enforced attachment policy.</source>
<seg-source><mrk mid="0" mtype="seg">In all cases the above exploits are blocked by some sort of generic mechanism which will prevent a number of related attacks against similar software with similar problems.</mrk><mrk mid="1" mtype="seg"> This list doesn't include the more common low-tech trojan-horse/social engineering attack methods which are best handled with user education and an automatically enforced attachment policy.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In all cases the above exploits are blocked by some sort of generic mechanism which will prevent a number of related attacks against similar software with similar problems.</mrk><mrk mid="1" mtype="seg"> This list doesn't include the more common low-tech trojan-horse/social engineering attack methods which are best handled with user education and an automatically enforced attachment policy.</mrk></target>
</trans-unit>
<trans-unit id="tu73" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp161]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp161]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp161]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu74">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu75" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> Requirements <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> Requirements <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> Requirements <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu76" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="requirements"&gt;</it> The Anomy sanitizer is developed on a RedHat Linux system running Perl 5.005_03. Any newer version of Perl on a Unix platform should work fine. The sanitizer has very modest module requirements, and only needs the following Perl modules to be present on your system: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="requirements"&gt;</it> The Anomy sanitizer is developed on a RedHat Linux system running Perl 5.005_03.</mrk><mrk mid="1" mtype="seg"> Any newer version of Perl on a Unix platform should work fine.</mrk><mrk mid="2" mtype="seg"> The sanitizer has very modest module requirements, and only needs the following Perl modules to be present on your system: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="requirements"&gt;</it> The Anomy sanitizer is developed on a RedHat Linux system running Perl 5.005_03.</mrk><mrk mid="1" mtype="seg"> Any newer version of Perl on a Unix platform should work fine.</mrk><mrk mid="2" mtype="seg"> The sanitizer has very modest module requirements, and only needs the following Perl modules to be present on your system: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu77" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu78" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> MIME::Base64 <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> MIME::Base64 <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> MIME::Base64 <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu79" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> MIME::QuotedPrint <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> MIME::QuotedPrint <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> MIME::QuotedPrint <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu80" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu81" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="requirements"&gt;</it> Consult your perl documentation (hint: "man CPAN") for information on how to install these if you haven't already. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="requirements"&gt;</it> Consult your perl documentation (hint: "man CPAN") for information on how to install these if you haven't already.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="requirements"&gt;</it> Consult your perl documentation (hint: "man CPAN") for information on how to install these if you haven't already.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu82" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> The sanitizer makes no assumptions about what mailer you are using - it has been configured to work well with <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp178]</bpt>sendmail<ept id="2">&lt;/a&gt;</ept> and <bpt id="3" ctype="link">[#$dp179]</bpt>qmail<ept id="3">&lt;/a&gt;</ept>, and it should be relatively easy to <bpt id="4" ctype="link">[#$dp180]</bpt>get it to work with others<ept id="4">&lt;/a&gt;</ept>, such as postfix or exim.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> The sanitizer makes no assumptions about what mailer you are using - it has been configured to work well with <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp178]</bpt>sendmail<ept id="2">&lt;/a&gt;</ept> and <bpt id="3" ctype="link">[#$dp179]</bpt>qmail<ept id="3">&lt;/a&gt;</ept>, and it should be relatively easy to <bpt id="4" ctype="link">[#$dp180]</bpt>get it to work with others<ept id="4">&lt;/a&gt;</ept>, such as postfix or exim.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="requirements"&gt;</bpt> The sanitizer makes no assumptions about what mailer you are using - it has been configured to work well with <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp178]</bpt>sendmail<ept id="2">&lt;/a&gt;</ept> and <bpt id="3" ctype="link">[#$dp179]</bpt>qmail<ept id="3">&lt;/a&gt;</ept>, and it should be relatively easy to <bpt id="4" ctype="link">[#$dp180]</bpt>get it to work with others<ept id="4">&lt;/a&gt;</ept>, such as postfix or exim.</mrk></target>
</trans-unit>
<trans-unit id="tu83" restype="x-paragraph">
<source xml:lang="en">For testing purposes, it may be a good idea to invoke the sanitizer from within <bpt id="1" ctype="link">[#$dp183]</bpt>procmail<ept id="1">&lt;/a&gt;</ept>, since procmail does a very good job of recovering mail if the sanitizer panics (e.g. because of an invalid configuration file) and can easily be configured to keep backup copies of all processed messages.</source>
<seg-source><mrk mid="0" mtype="seg">For testing purposes, it may be a good idea to invoke the sanitizer from within <bpt id="1" ctype="link">[#$dp183]</bpt>procmail<ept id="1">&lt;/a&gt;</ept>, since procmail does a very good job of recovering mail if the sanitizer panics (e.g. because of an invalid configuration file) and can easily be configured to keep backup copies of all processed messages.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For testing purposes, it may be a good idea to invoke the sanitizer from within <bpt id="1" ctype="link">[#$dp183]</bpt>procmail<ept id="1">&lt;/a&gt;</ept>, since procmail does a very good job of recovering mail if the sanitizer panics (e.g. because of an invalid configuration file) and can easily be configured to keep backup copies of all processed messages.</mrk></target>
</trans-unit>
<trans-unit id="tu84" restype="x-paragraph">
<source xml:lang="en">If you want to scan attachments for viruses, you will need a third party virus scanner which can be invoked from the command line to scan a single file. The virus scanner must return an exit code describing whether the file is infected or not, and may optionally also use exit codes to indicate that the file was successfully disinfected.</source>
<seg-source><mrk mid="0" mtype="seg">If you want to scan attachments for viruses, you will need a third party virus scanner which can be invoked from the command line to scan a single file.</mrk><mrk mid="1" mtype="seg"> The virus scanner must return an exit code describing whether the file is infected or not, and may optionally also use exit codes to indicate that the file was successfully disinfected.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you want to scan attachments for viruses, you will need a third party virus scanner which can be invoked from the command line to scan a single file.</mrk><mrk mid="1" mtype="seg"> The virus scanner must return an exit code describing whether the file is infected or not, and may optionally also use exit codes to indicate that the file was successfully disinfected.</mrk></target>
</trans-unit>
<trans-unit id="tu85" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp188]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp188]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp188]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu86">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu87" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt> Installation, testing <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt> Installation, testing <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt> Installation, testing <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu88" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt> Download the most recent sanitizer from the web and install all the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp194]</bpt>prerequisites<ept id="2">&lt;/a&gt;</ept>. The sanitizer can be downloaded from it's home page, <bpt id="3" ctype="link">[#$dp195]</bpt>mailtools.anomy.net<ept id="3">&lt;/a&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt> Download the most recent sanitizer from the web and install all the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp194]</bpt>prerequisites<ept id="2">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> The sanitizer can be downloaded from it's home page, <bpt id="3" ctype="link">[#$dp195]</bpt>mailtools.anomy.net<ept id="3">&lt;/a&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="install"&gt;</bpt> Download the most recent sanitizer from the web and install all the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp194]</bpt>prerequisites<ept id="2">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> The sanitizer can be downloaded from it's home page, <bpt id="3" ctype="link">[#$dp195]</bpt>mailtools.anomy.net<ept id="3">&lt;/a&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu89" restype="x-paragraph">
<source xml:lang="en">Unpack the tarball somewhere on your system, e.g. in <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/<ept id="1">&lt;/tt&gt;</ept> or your home directory. It will create a directory named <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>anomy/<ept id="2">&lt;/tt&gt;</ept> which will contain this file and a directory named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>bin/<ept id="3">&lt;/tt&gt;</ept> containing the sanitizer itself and the MIME parsing module it depends on.</source>
<seg-source><mrk mid="0" mtype="seg">Unpack the tarball somewhere on your system, e.g. in <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/<ept id="1">&lt;/tt&gt;</ept> or your home directory.</mrk><mrk mid="1" mtype="seg"> It will create a directory named <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>anomy/<ept id="2">&lt;/tt&gt;</ept> which will contain this file and a directory named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>bin/<ept id="3">&lt;/tt&gt;</ept> containing the sanitizer itself and the MIME parsing module it depends on.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Unpack the tarball somewhere on your system, e.g. in <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/<ept id="1">&lt;/tt&gt;</ept> or your home directory.</mrk><mrk mid="1" mtype="seg"> It will create a directory named <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>anomy/<ept id="2">&lt;/tt&gt;</ept> which will contain this file and a directory named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>bin/<ept id="3">&lt;/tt&gt;</ept> containing the sanitizer itself and the MIME parsing module it depends on.</mrk></target>
</trans-unit>
<trans-unit id="tu90" restype="x-paragraph">
<source xml:lang="en">Next, you should run the included test cases to make sure that the sanitizer functions properly on your system. Enter the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>anomy/testcases<ept id="1">&lt;/tt&gt;</ept> directory, and give the command <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>./testall.sh<ept id="2">&lt;/tt&gt;</ept>. This will perform all included tests, and compare their results to files named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>test-name.ok<ept id="3">&lt;/tt&gt;</ept> in the subdirectory named results.def. You can examine these files to see how the sanitizer alters email. If a test fails, a <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>test-name.diff<ept id="4">&lt;/tt&gt;</ept> file is created which shows the difference between the expected value and the test result. Empty lines are usually harmless, but any other failures should be reported back to the author.</source>
<seg-source><mrk mid="0" mtype="seg">Next, you should run the included test cases to make sure that the sanitizer functions properly on your system.</mrk><mrk mid="1" mtype="seg"> Enter the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>anomy/testcases<ept id="1">&lt;/tt&gt;</ept> directory, and give the command <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>./testall.sh<ept id="2">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> This will perform all included tests, and compare their results to files named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>test-name.ok<ept id="3">&lt;/tt&gt;</ept> in the subdirectory named results.def.</mrk><mrk mid="3" mtype="seg"> You can examine these files to see how the sanitizer alters email.</mrk><mrk mid="4" mtype="seg"> If a test fails, a <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>test-name.diff<ept id="4">&lt;/tt&gt;</ept> file is created which shows the difference between the expected value and the test result.</mrk><mrk mid="5" mtype="seg"> Empty lines are usually harmless, but any other failures should be reported back to the author.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Next, you should run the included test cases to make sure that the sanitizer functions properly on your system.</mrk><mrk mid="1" mtype="seg"> Enter the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>anomy/testcases<ept id="1">&lt;/tt&gt;</ept> directory, and give the command <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>./testall.sh<ept id="2">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> This will perform all included tests, and compare their results to files named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>test-name.ok<ept id="3">&lt;/tt&gt;</ept> in the subdirectory named results.def.</mrk><mrk mid="3" mtype="seg"> You can examine these files to see how the sanitizer alters email.</mrk><mrk mid="4" mtype="seg"> If a test fails, a <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>test-name.diff<ept id="4">&lt;/tt&gt;</ept> file is created which shows the difference between the expected value and the test result.</mrk><mrk mid="5" mtype="seg"> Empty lines are usually harmless, but any other failures should be reported back to the author.</mrk></target>
</trans-unit>
<trans-unit id="tu91" restype="x-paragraph">
<source xml:lang="en">If you cannot figure out why a test failed and wish to submit a bug report, please include information about your operating system and a copy of the relevant <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>test-name.failed<ept id="1">&lt;/tt&gt;</ept> file. If all tests succeed, then the sanitizer is ready to be used.</source>
<seg-source><mrk mid="0" mtype="seg">If you cannot figure out why a test failed and wish to submit a bug report, please include information about your operating system and a copy of the relevant <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>test-name.failed<ept id="1">&lt;/tt&gt;</ept> file.</mrk><mrk mid="1" mtype="seg"> If all tests succeed, then the sanitizer is ready to be used.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you cannot figure out why a test failed and wish to submit a bug report, please include information about your operating system and a copy of the relevant <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>test-name.failed<ept id="1">&lt;/tt&gt;</ept> file.</mrk><mrk mid="1" mtype="seg"> If all tests succeed, then the sanitizer is ready to be used.</mrk></target>
</trans-unit>
<trans-unit id="tu92" restype="x-paragraph">
<source xml:lang="en">To test the sanitizer on one of your own messages, you can invoke the it from the command line, like this (bourne shell syntax):</source>
<seg-source><mrk mid="0" mtype="seg">To test the sanitizer on one of your own messages, you can invoke the it from the command line, like this (bourne shell syntax):</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To test the sanitizer on one of your own messages, you can invoke the it from the command line, like this (bourne shell syntax):</mrk></target>
</trans-unit>
<trans-unit id="tu93" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu94">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu95" restype="x-pre" xml:space="preserve">
<source xml:lang="en">    $ cd /path/to/anomy
    $ export ANOMY=/path/to/anomy
    $ ./bin/sanitizer.pl &lt; /path/to/message |more
</source>
<seg-source><mrk mid="0" mtype="seg">    $ cd /path/to/anomy</mrk>
<mrk mid="1" mtype="seg">    $ export ANOMY=/path/to/anomy</mrk>
<mrk mid="2" mtype="seg">    $ ./bin/sanitizer.pl &lt; /path/to/message |more</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">    $ cd /path/to/anomy</mrk>
<mrk mid="1" mtype="seg">    $ export ANOMY=/path/to/anomy</mrk>
<mrk mid="2" mtype="seg">    $ ./bin/sanitizer.pl &lt; /path/to/message |more</mrk>
</target>
</trans-unit>
<trans-unit id="tu96">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu97" restype="x-paragraph">
<source xml:lang="en">This is an excellent way to test your first configuration file, simply add the path to your configuration file to the command line invoking the sanitizer, as the first argument:</source>
<seg-source><mrk mid="0" mtype="seg">This is an excellent way to test your first configuration file, simply add the path to your configuration file to the command line invoking the sanitizer, as the first argument:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is an excellent way to test your first configuration file, simply add the path to your configuration file to the command line invoking the sanitizer, as the first argument:</mrk></target>
</trans-unit>
<trans-unit id="tu98" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu99">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu100" restype="x-pre" xml:space="preserve">
<source xml:lang="en">    $ ./bin/sanitizer.pl /etc/sanitizer.cfg &lt; /path/to/message |more
</source>
<seg-source><mrk mid="0" mtype="seg">    $ ./bin/sanitizer.pl /etc/sanitizer.cfg &lt; /path/to/message |more</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">    $ ./bin/sanitizer.pl /etc/sanitizer.cfg &lt; /path/to/message |more</mrk>
</target>
</trans-unit>
<trans-unit id="tu101">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu102" restype="x-paragraph">
<source xml:lang="en">For a more extended test, you may want to sanitize only a single user's mail until you are comfortable with the tool. How this is done depends on your mailer, but one common case (sendmail and procmail) is very simple. Just add the following lines to the user's <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="1">&lt;/tt&gt;</ept> file:</source>
<seg-source><mrk mid="0" mtype="seg">For a more extended test, you may want to sanitize only a single user's mail until you are comfortable with the tool.</mrk><mrk mid="1" mtype="seg"> How this is done depends on your mailer, but one common case (sendmail and procmail) is very simple.</mrk><mrk mid="2" mtype="seg"> Just add the following lines to the user's <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="1">&lt;/tt&gt;</ept> file:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">For a more extended test, you may want to sanitize only a single user's mail until you are comfortable with the tool.</mrk><mrk mid="1" mtype="seg"> How this is done depends on your mailer, but one common case (sendmail and procmail) is very simple.</mrk><mrk mid="2" mtype="seg"> Just add the following lines to the user's <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="1">&lt;/tt&gt;</ept> file:</mrk></target>
</trans-unit>
<trans-unit id="tu103" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu104">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu105" restype="x-pre" xml:space="preserve">
<source xml:lang="en">   :0 c
   backup-mailbox

   ANOMY=/path/to/anomy/
   :0 fw
   |/path/to/anomy/bin/sanitizer.pl
</source>
<seg-source><mrk mid="0" mtype="seg">   :0 c</mrk>
<mrk mid="1" mtype="seg">   backup-mailbox</mrk>

<mrk mid="2" mtype="seg">   ANOMY=/path/to/anomy/</mrk>
<mrk mid="3" mtype="seg">   :0 fw</mrk>
<mrk mid="4" mtype="seg">   |/path/to/anomy/bin/sanitizer.pl</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">   :0 c</mrk>
<mrk mid="1" mtype="seg">   backup-mailbox</mrk>

<mrk mid="2" mtype="seg">   ANOMY=/path/to/anomy/</mrk>
<mrk mid="3" mtype="seg">   :0 fw</mrk>
<mrk mid="4" mtype="seg">   |/path/to/anomy/bin/sanitizer.pl</mrk>
</target>
</trans-unit>
<trans-unit id="tu106">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu107" restype="x-paragraph">
<source xml:lang="en">The first rule creates a backup of all messages, in a mailbox named <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>backup-mailbox<ept id="1">&lt;/tt&gt;</ept>. Since you will probably make mistakes as you define your first policy, this is probably a good idea in case the sanitizer mistakenly destroys your mail. The second rule passes the messages through the sanitizer, using procmail's filter feature, possibly rewriting the message to deactivate virii, trojans, etc.</source>
<seg-source><mrk mid="0" mtype="seg">The first rule creates a backup of all messages, in a mailbox named <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>backup-mailbox<ept id="1">&lt;/tt&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Since you will probably make mistakes as you define your first policy, this is probably a good idea in case the sanitizer mistakenly destroys your mail.</mrk><mrk mid="2" mtype="seg"> The second rule passes the messages through the sanitizer, using procmail's filter feature, possibly rewriting the message to deactivate virii, trojans, etc.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The first rule creates a backup of all messages, in a mailbox named <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>backup-mailbox<ept id="1">&lt;/tt&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Since you will probably make mistakes as you define your first policy, this is probably a good idea in case the sanitizer mistakenly destroys your mail.</mrk><mrk mid="2" mtype="seg"> The second rule passes the messages through the sanitizer, using procmail's filter feature, possibly rewriting the message to deactivate virii, trojans, etc.</mrk></target>
</trans-unit>
<trans-unit id="tu108" restype="x-paragraph">
<source xml:lang="en">If you had created a configuration file named <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/sanitizer.cfg<ept id="1">&lt;/tt&gt;</ept>, then the sanitization rule would be modified to read as follows:</source>
<seg-source><mrk mid="0" mtype="seg">If you had created a configuration file named <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/sanitizer.cfg<ept id="1">&lt;/tt&gt;</ept>, then the sanitization rule would be modified to read as follows:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you had created a configuration file named <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/sanitizer.cfg<ept id="1">&lt;/tt&gt;</ept>, then the sanitization rule would be modified to read as follows:</mrk></target>
</trans-unit>
<trans-unit id="tu109" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu110">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu111" restype="x-pre" xml:space="preserve">
<source xml:lang="en">   :0 fw
   |/path/to/anomy/bin/sanitizer.pl /path/to/sanitizer.cfg
</source>
<seg-source><mrk mid="0" mtype="seg">   :0 fw</mrk>
<mrk mid="1" mtype="seg">   |/path/to/anomy/bin/sanitizer.pl /path/to/sanitizer.cfg</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">   :0 fw</mrk>
<mrk mid="1" mtype="seg">   |/path/to/anomy/bin/sanitizer.pl /path/to/sanitizer.cfg</mrk>
</target>
</trans-unit>
<trans-unit id="tu112">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu113" restype="x-paragraph">
<source xml:lang="en">Note that this is a completely valid way to invoke the sanitizer - if your system administrator won't install it globally, but you have access to your <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="1">&lt;/tt&gt;</ept> file, you can simply sanitizer your own mail in this fashion. Also, instead of putting those rules in a <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="2">&lt;/tt&gt;</ept> file, you can put them in <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>/etc/procmailrc<ept id="3">&lt;/tt&gt;</ept> instead and thus sanitize all mail delivered to local users.</source>
<seg-source><mrk mid="0" mtype="seg">Note that this is a completely valid way to invoke the sanitizer - if your system administrator won't install it globally, but you have access to your <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="1">&lt;/tt&gt;</ept> file, you can simply sanitizer your own mail in this fashion.</mrk><mrk mid="1" mtype="seg"> Also, instead of putting those rules in a <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="2">&lt;/tt&gt;</ept> file, you can put them in <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>/etc/procmailrc<ept id="3">&lt;/tt&gt;</ept> instead and thus sanitize all mail delivered to local users.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note that this is a completely valid way to invoke the sanitizer - if your system administrator won't install it globally, but you have access to your <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="1">&lt;/tt&gt;</ept> file, you can simply sanitizer your own mail in this fashion.</mrk><mrk mid="1" mtype="seg"> Also, instead of putting those rules in a <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="2">&lt;/tt&gt;</ept> file, you can put them in <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>/etc/procmailrc<ept id="3">&lt;/tt&gt;</ept> instead and thus sanitize all mail delivered to local users.</mrk></target>
</trans-unit>
<trans-unit id="tu114" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu115">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp223]</bpt>Procmail<ept id="1">&lt;/a&gt;</ept> is an excellent tool, and it can be configured to work with most popular MTAs, including <bpt id="2" ctype="link">[#$dp224]</bpt>sendmail<ept id="2">&lt;/a&gt;</ept>, <bpt id="3" ctype="link">[#$dp225]</bpt>postfix<ept id="3">&lt;/a&gt;</ept>, <bpt id="4" ctype="link">[#$dp226]</bpt>qmail<ept id="4">&lt;/a&gt;</ept> and <bpt id="5" ctype="link">[#$dp227]</bpt>exim<ept id="5">&lt;/a&gt;</ept>. Using procmail is probably the easiest way to take advantage of the sanitizer.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp223]</bpt>Procmail<ept id="1">&lt;/a&gt;</ept> is an excellent tool, and it can be configured to work with most popular MTAs, including <bpt id="2" ctype="link">[#$dp224]</bpt>sendmail<ept id="2">&lt;/a&gt;</ept>, <bpt id="3" ctype="link">[#$dp225]</bpt>postfix<ept id="3">&lt;/a&gt;</ept>, <bpt id="4" ctype="link">[#$dp226]</bpt>qmail<ept id="4">&lt;/a&gt;</ept> and <bpt id="5" ctype="link">[#$dp227]</bpt>exim<ept id="5">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Using procmail is probably the easiest way to take advantage of the sanitizer.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp223]</bpt>Procmail<ept id="1">&lt;/a&gt;</ept> is an excellent tool, and it can be configured to work with most popular MTAs, including <bpt id="2" ctype="link">[#$dp224]</bpt>sendmail<ept id="2">&lt;/a&gt;</ept>, <bpt id="3" ctype="link">[#$dp225]</bpt>postfix<ept id="3">&lt;/a&gt;</ept>, <bpt id="4" ctype="link">[#$dp226]</bpt>qmail<ept id="4">&lt;/a&gt;</ept> and <bpt id="5" ctype="link">[#$dp227]</bpt>exim<ept id="5">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Using procmail is probably the easiest way to take advantage of the sanitizer.</mrk></target>
</trans-unit>
<trans-unit id="tu116" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu117" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Note<ept id="1">&lt;/b&gt;</ept>: The above recipies may not be sufficient to get the sanitizer to work on your platform - if you have problems, please be sure to check the <bpt id="2" ctype="link">[#$dp230]</bpt>newest version<ept id="2">&lt;/a&gt;</ept> of this manual for platform specific instructions, as well as the <bpt id="3" ctype="bold">&lt;b&gt;</bpt>procmail(1)<ept id="3">&lt;/b&gt;</ept>, <bpt id="4" ctype="bold">&lt;b&gt;</bpt>procmailrc(1)<ept id="4">&lt;/b&gt;</ept> and <bpt id="5" ctype="bold">&lt;b&gt;</bpt>procmailex(1)<ept id="5">&lt;/b&gt;</ept> man pages. Of particular interest when debugging procmail related problems are the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>LOGFILE<ept id="6">&lt;/tt&gt;</ept> and <bpt id="7" ctype="x-tt">&lt;tt&gt;</bpt>VERBOSE<ept id="7">&lt;/tt&gt;</ept> directives. Also be sure to check the <bpt id="8" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="8">&lt;/tt&gt;</ept> directory of the distribution for user-contributed tips and tricks.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Note<ept id="1">&lt;/b&gt;</ept>: The above recipies may not be sufficient to get the sanitizer to work on your platform - if you have problems, please be sure to check the <bpt id="2" ctype="link">[#$dp230]</bpt>newest version<ept id="2">&lt;/a&gt;</ept> of this manual for platform specific instructions, as well as the <bpt id="3" ctype="bold">&lt;b&gt;</bpt>procmail(1)<ept id="3">&lt;/b&gt;</ept>, <bpt id="4" ctype="bold">&lt;b&gt;</bpt>procmailrc(1)<ept id="4">&lt;/b&gt;</ept> and <bpt id="5" ctype="bold">&lt;b&gt;</bpt>procmailex(1)<ept id="5">&lt;/b&gt;</ept> man pages.</mrk><mrk mid="1" mtype="seg"> Of particular interest when debugging procmail related problems are the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>LOGFILE<ept id="6">&lt;/tt&gt;</ept> and <bpt id="7" ctype="x-tt">&lt;tt&gt;</bpt>VERBOSE<ept id="7">&lt;/tt&gt;</ept> directives.</mrk><mrk mid="2" mtype="seg"> Also be sure to check the <bpt id="8" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="8">&lt;/tt&gt;</ept> directory of the distribution for user-contributed tips and tricks.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Note<ept id="1">&lt;/b&gt;</ept>: The above recipies may not be sufficient to get the sanitizer to work on your platform - if you have problems, please be sure to check the <bpt id="2" ctype="link">[#$dp230]</bpt>newest version<ept id="2">&lt;/a&gt;</ept> of this manual for platform specific instructions, as well as the <bpt id="3" ctype="bold">&lt;b&gt;</bpt>procmail(1)<ept id="3">&lt;/b&gt;</ept>, <bpt id="4" ctype="bold">&lt;b&gt;</bpt>procmailrc(1)<ept id="4">&lt;/b&gt;</ept> and <bpt id="5" ctype="bold">&lt;b&gt;</bpt>procmailex(1)<ept id="5">&lt;/b&gt;</ept> man pages.</mrk><mrk mid="1" mtype="seg"> Of particular interest when debugging procmail related problems are the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>LOGFILE<ept id="6">&lt;/tt&gt;</ept> and <bpt id="7" ctype="x-tt">&lt;tt&gt;</bpt>VERBOSE<ept id="7">&lt;/tt&gt;</ept> directives.</mrk><mrk mid="2" mtype="seg"> Also be sure to check the <bpt id="8" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="8">&lt;/tt&gt;</ept> directory of the distribution for user-contributed tips and tricks.</mrk></target>
</trans-unit>
<trans-unit id="tu118" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp233]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp233]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp233]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu119">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu120" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt>Configuration<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt>Configuration<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt>Configuration<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu121" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Most of the policies and messages generated by the sanitizer can be customized. The sanitizer understands a single configuration syntax, accepting configuration commands either on a line-by-line basis from one or more text files, or via command-line arguements (each arguement corrosponding to one line from a file). A simple configuration file might look like this: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Most of the policies and messages generated by the sanitizer can be customized.</mrk><mrk mid="1" mtype="seg"> The sanitizer understands a single configuration syntax, accepting configuration commands either on a line-by-line basis from one or more text files, or via command-line arguements (each arguement corrosponding to one line from a file).</mrk><mrk mid="2" mtype="seg"> A simple configuration file might look like this: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Most of the policies and messages generated by the sanitizer can be customized.</mrk><mrk mid="1" mtype="seg"> The sanitizer understands a single configuration syntax, accepting configuration commands either on a line-by-line basis from one or more text files, or via command-line arguements (each arguement corrosponding to one line from a file).</mrk><mrk mid="2" mtype="seg"> A simple configuration file might look like this: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu122" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu123">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu124" restype="x-pre" xml:space="preserve">
<source xml:lang="en">   # this is a comment, bla bla
   #
   feat_log_stderr = 1      # enable logging to stderr
   feat_log_inline = 0      # disable logging in the message itself
   feat_trust_pgp = 1       # trust signed or encrypted messages
   
   # Disable most of the advertisements the sanitizer would otherwise
   # put in the header, replace them with our own bogus ones.
   #
   header_info = X-Virus-Scanned: Secured by FooCorp RealSecure MailWall
   header_info += \nX-Garbage: \# this is not a comment # but this is
   header_url = 0
   header_rev = 0

   # Include more configuration...
   #
   /path/to/policy/configuration/file
   /path/to/another/configuration/file
</source>
<seg-source><mrk mid="0" mtype="seg">   # this is a comment, bla bla</mrk>
<mrk mid="1" mtype="seg">   #</mrk>
<mrk mid="2" mtype="seg">   feat_log_stderr = 1      # enable logging to stderr</mrk>
<mrk mid="3" mtype="seg">   feat_log_inline = 0      # disable logging in the message itself</mrk>
<mrk mid="4" mtype="seg">   feat_trust_pgp = 1       # trust signed or encrypted messages</mrk>
   
<mrk mid="5" mtype="seg">   # Disable most of the advertisements the sanitizer would otherwise</mrk>
<mrk mid="6" mtype="seg">   # put in the header, replace them with our own bogus ones.</mrk>
<mrk mid="7" mtype="seg">   #</mrk>
<mrk mid="8" mtype="seg">   header_info = X-Virus-Scanned: Secured by FooCorp RealSecure MailWall</mrk>
<mrk mid="9" mtype="seg">   header_info += \nX-Garbage: \# this is not a comment # but this is</mrk>
<mrk mid="10" mtype="seg">   header_url = 0</mrk>
<mrk mid="11" mtype="seg">   header_rev = 0</mrk>

<mrk mid="12" mtype="seg">   # Include more configuration...</mrk>
<mrk mid="13" mtype="seg">   #</mrk>
<mrk mid="14" mtype="seg">   /path/to/policy/configuration/file</mrk>
<mrk mid="15" mtype="seg">   /path/to/another/configuration/file</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">   # this is a comment, bla bla</mrk>
<mrk mid="1" mtype="seg">   #</mrk>
<mrk mid="2" mtype="seg">   feat_log_stderr = 1      # enable logging to stderr</mrk>
<mrk mid="3" mtype="seg">   feat_log_inline = 0      # disable logging in the message itself</mrk>
<mrk mid="4" mtype="seg">   feat_trust_pgp = 1       # trust signed or encrypted messages</mrk>
   
<mrk mid="5" mtype="seg">   # Disable most of the advertisements the sanitizer would otherwise</mrk>
<mrk mid="6" mtype="seg">   # put in the header, replace them with our own bogus ones.</mrk>
<mrk mid="7" mtype="seg">   #</mrk>
<mrk mid="8" mtype="seg">   header_info = X-Virus-Scanned: Secured by FooCorp RealSecure MailWall</mrk>
<mrk mid="9" mtype="seg">   header_info += \nX-Garbage: \# this is not a comment # but this is</mrk>
<mrk mid="10" mtype="seg">   header_url = 0</mrk>
<mrk mid="11" mtype="seg">   header_rev = 0</mrk>

<mrk mid="12" mtype="seg">   # Include more configuration...</mrk>
<mrk mid="13" mtype="seg">   #</mrk>
<mrk mid="14" mtype="seg">   /path/to/policy/configuration/file</mrk>
<mrk mid="15" mtype="seg">   /path/to/another/configuration/file</mrk>
</target>
</trans-unit>
<trans-unit id="tu125">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu126" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt> And could be activated like this: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt> And could be activated like this: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt> And could be activated like this: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu127" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu128">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu129" restype="x-pre" xml:space="preserve">
<source xml:lang="en">    $ sanitizer.pl /path/to/configuration/file
</source>
<seg-source><mrk mid="0" mtype="seg">    $ sanitizer.pl /path/to/configuration/file</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">    $ sanitizer.pl /path/to/configuration/file</mrk>
</target>
</trans-unit>
<trans-unit id="tu130">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu131" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt> The first setting (logging to standard error) could also have been activated with this command line: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt> The first setting (logging to standard error) could also have been activated with this command line: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt> The first setting (logging to standard error) could also have been activated with this command line: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu132" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu133">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu134" restype="x-pre" xml:space="preserve">
<source xml:lang="en">    $ sanitizer.pl "feat_log_stderr = 1"
</source>
<seg-source><mrk mid="0" mtype="seg">    $ sanitizer.pl "feat_log_stderr = 1"</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">    $ sanitizer.pl "feat_log_stderr = 1"</mrk>
</target>
</trans-unit>
<trans-unit id="tu135">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu136" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> The quotation marks are important, otherwise the shell would pass "feat_log_stderr", "=" and "1" to the sanitizer as seperate arguements, which wouldn't work. Please resist the urge to create configuration files with have '='-signs in their names. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> The quotation marks are important, otherwise the shell would pass "feat_log_stderr", "=" and "1" to the sanitizer as seperate arguements, which wouldn't work.</mrk><mrk mid="1" mtype="seg"> Please resist the urge to create configuration files with have '='-signs in their names.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> The quotation marks are important, otherwise the shell would pass "feat_log_stderr", "=" and "1" to the sanitizer as seperate arguements, which wouldn't work.</mrk><mrk mid="1" mtype="seg"> Please resist the urge to create configuration files with have '='-signs in their names.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu137" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Configuration files may be nested arbitrarily, but to prevent infinite loops the sanitizer will by default stop reading after 5 levels of nesting. This maximum recursion level may be altered by setting the "max_conf_recursion" variable. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Configuration files may be nested arbitrarily, but to prevent infinite loops the sanitizer will by default stop reading after 5 levels of nesting.</mrk><mrk mid="1" mtype="seg"> This maximum recursion level may be altered by setting the "max_conf_recursion" variable.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Configuration files may be nested arbitrarily, but to prevent infinite loops the sanitizer will by default stop reading after 5 levels of nesting.</mrk><mrk mid="1" mtype="seg"> This maximum recursion level may be altered by setting the "max_conf_recursion" variable.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu138" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Giving the sanitizer a bogus arguement will make it print an error message and the current configuration to standard error. Appending a nonsensical arguement to your normal command line will thus allow you to compare the sanitizer's actual configuration with what you had in mind. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Giving the sanitizer a bogus arguement will make it print an error message and the current configuration to standard error.</mrk><mrk mid="1" mtype="seg"> Appending a nonsensical arguement to your normal command line will thus allow you to compare the sanitizer's actual configuration with what you had in mind.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> Giving the sanitizer a bogus arguement will make it print an error message and the current configuration to standard error.</mrk><mrk mid="1" mtype="seg"> Appending a nonsensical arguement to your normal command line will thus allow you to compare the sanitizer's actual configuration with what you had in mind.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu139" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> The example in the next section displays the complete list of configuration variables. An effort will be made not to break compatibility in future releases, although new variables will certainly be introduced as the program evolves. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> The example in the next section displays the complete list of configuration variables.</mrk><mrk mid="1" mtype="seg"> An effort will be made not to break compatibility in future releases, although new variables will certainly be introduced as the program evolves.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="config"&gt;</it> The example in the next section displays the complete list of configuration variables.</mrk><mrk mid="1" mtype="seg"> An effort will be made not to break compatibility in future releases, although new variables will certainly be introduced as the program evolves.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu140" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp259]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp259]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="config"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp259]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu141">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu142" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt>Configuration - Policies and virus scanners<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt>Configuration - Policies and virus scanners<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt>Configuration - Policies and virus scanners<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu143" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> The Anomy sanitizer can process any attachments using a third party virus scanner. Whether a virus scanner is used, and how it's results are interpreted depends on the rules defined by the administrator. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> The Anomy sanitizer can process any attachments using a third party virus scanner.</mrk><mrk mid="1" mtype="seg"> Whether a virus scanner is used, and how it's results are interpreted depends on the rules defined by the administrator.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> The Anomy sanitizer can process any attachments using a third party virus scanner.</mrk><mrk mid="1" mtype="seg"> Whether a virus scanner is used, and how it's results are interpreted depends on the rules defined by the administrator.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu144" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Rules are defined by a set of policies. Each policy is assumed to apply to all attachments not matching any previous policy, and whose file name matches the policy's regulaur expression. The policies enforced can be "accept", "defang", "mangle", "save" and "drop" in order of increasing strictness. In addition, the "unknown" policy will tell the sanitizer to check the next rule. The panic policy has been depraciated and is (for backwards compatibility) equivalent to the "drop" policy. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Rules are defined by a set of policies.</mrk><mrk mid="1" mtype="seg"> Each policy is assumed to apply to all attachments not matching any previous policy, and whose file name matches the policy's regulaur expression.</mrk><mrk mid="2" mtype="seg"> The policies enforced can be "accept", "defang", "mangle", "save" and "drop" in order of increasing strictness.</mrk><mrk mid="3" mtype="seg"> In addition, the "unknown" policy will tell the sanitizer to check the next rule.</mrk><mrk mid="4" mtype="seg"> The panic policy has been depraciated and is (for backwards compatibility) equivalent to the "drop" policy.</mrk><mrk mid="5" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Rules are defined by a set of policies.</mrk><mrk mid="1" mtype="seg"> Each policy is assumed to apply to all attachments not matching any previous policy, and whose file name matches the policy's regulaur expression.</mrk><mrk mid="2" mtype="seg"> The policies enforced can be "accept", "defang", "mangle", "save" and "drop" in order of increasing strictness.</mrk><mrk mid="3" mtype="seg"> In addition, the "unknown" policy will tell the sanitizer to check the next rule.</mrk><mrk mid="4" mtype="seg"> The panic policy has been depraciated and is (for backwards compatibility) equivalent to the "drop" policy.</mrk><mrk mid="5" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu145" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Attachments which are accepted aren't altered at all. The defang and mangle policies effect the attachment's file name, with mangle destroying the original file name completely. The save and drop policies will remove the attachment from the message, replacing it with a text message. With drop the attachment will be deleted, with save it will be left on the sanitizer's host file system for examination by an administrator. If the policy is unknown, the attachment will be compared with other, lower-priority policies. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Attachments which are accepted aren't altered at all.</mrk><mrk mid="1" mtype="seg"> The defang and mangle policies effect the attachment's file name, with mangle destroying the original file name completely.</mrk><mrk mid="2" mtype="seg"> The save and drop policies will remove the attachment from the message, replacing it with a text message.</mrk><mrk mid="3" mtype="seg"> With drop the attachment will be deleted, with save it will be left on the sanitizer's host file system for examination by an administrator.</mrk><mrk mid="4" mtype="seg"> If the policy is unknown, the attachment will be compared with other, lower-priority policies.</mrk><mrk mid="5" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Attachments which are accepted aren't altered at all.</mrk><mrk mid="1" mtype="seg"> The defang and mangle policies effect the attachment's file name, with mangle destroying the original file name completely.</mrk><mrk mid="2" mtype="seg"> The save and drop policies will remove the attachment from the message, replacing it with a text message.</mrk><mrk mid="3" mtype="seg"> With drop the attachment will be deleted, with save it will be left on the sanitizer's host file system for examination by an administrator.</mrk><mrk mid="4" mtype="seg"> If the policy is unknown, the attachment will be compared with other, lower-priority policies.</mrk><mrk mid="5" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu146" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Appending an exclamation mark (!) to a policy will make it have the side-effect of increasing the internal "bug score" past the "score_bad" value, causing the program to return with a non-zero exit code. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Appending an exclamation mark (!) to a policy will make it have the side-effect of increasing the internal "bug score" past the "score_bad" value, causing the program to return with a non-zero exit code.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Appending an exclamation mark (!) to a policy will make it have the side-effect of increasing the internal "bug score" past the "score_bad" value, causing the program to return with a non-zero exit code.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu147" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> An example follows, illustrating most of the stuff involved in defining a policy. Please note that this isn't necessarily a /good/ policy, it's just an example. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> An example follows, illustrating most of the stuff involved in defining a policy.</mrk><mrk mid="1" mtype="seg"> Please note that this isn't necessarily a /good/ policy, it's just an example.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> An example follows, illustrating most of the stuff involved in defining a policy.</mrk><mrk mid="1" mtype="seg"> Please note that this isn't necessarily a /good/ policy, it's just an example.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu148" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu149">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu150" restype="x-pre" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it> #
 # These are the default values for all feature switches.
 #
 feat_verbose = 1    # Warn user about unscanned parts, etc.
 feat_log_inline = 1 # Inline logs: 0 = Off, 1 =  Maybe, 2 = Force
 feat_log_stderr = 1 # Print log to standard error
 feat_log_xml = 0    # Don't use XML format for logs.
 feat_log_trace = 0  # Omit trace info from logs.
 feat_log_after = 0  # Don't add any scratch space to part headers.
 feat_files = 1      # Enable filename-based policy decisions.
 feat_force_name = 0 # Force all parts (except text/plain and
                     # text/html parts) to have file names.
 feat_boundaries = 0 # Replace all boundary strings with our own
                     # NOTE:  Always breaks PGP/MIME messages!
 feat_lengths = 1    # Protect against buffer overflows and null
                     # values.
 feat_scripts = 1    # Defang incoming shell scripts.
 feat_html = 1       # Defang active HTML content.
 feat_webbugs = 0    # Web-bugs are allowed.
 feat_trust_pgp = 0  # Don't scan PGP signed message parts.
 feat_uuencoded = 1  # Sanitize inline uuencoded files.
 feat_forwards = 1   # Sanitize forwarded messages
 feat_testing = 0    # This isn't a test-case configuration.
 feat_fixmime = 1    # Fix invalid MIME, if possible.
 feat_paranoid = 0   # Don't be excessively paranoid about MIME headers etc. 
 #
 # Scoring
 #
 score_bad = 100     # Any message requring this many modifications
                     # will cause the sanitizer to return a non-zero
		     # exit code after processing the entire message.
 #
 # You may need to increase the following if you have a very
 # complex configuration split between multiple files.
 #
 max_conf_recursions = 5    # The default is 5.
 #
 # Create temporary or saved files using this template.
 # An attachment named "dude.txt" might be saved as 
 #
 #  /var/quarantine/att-dude-txt.A9Y
 #
 # Note:  The directory must exist and be writable by
 # the user running the sanitizer.
 #
 file_name_tpl = /var/quarantine/att-$F.$$$

 # We have three policies, in addition to the default which is
 # to defang file names.
 #
 file_list_rules = 3
 file_default_policy = defang
 file_default_filename = unnamed.file
   
 # Delete obviously executable attachments.  This list is VERY
 # incomplete!  This is a perl regular expression, see "man 
 # perlre" for info.  The (?i) prefix makes the regexp case 
 # insensitive.
 #
 # There is only one policy, since we aren't using an external
 # scanner.  The file list is split accross two lines, for fun.
 #
 file_list_1  = (?i)\.(exe|com
 file_list_1 += |cmd|bat)$
 file_list_1_policy = drop
 file_list_1_scanner = 0

 # Scan mp3 files for Evil Viruses, using the imaginary mp3virscan
 # utility.  Always define FOUR potential policies, which depend on the
 # exit code returned by the scanner.  Which code means what is 
 # defined in the scanner line, which must contain THREE entries.
 # The fourth policy is used for "anything else".
 #
 #   "accept" if the file is clean (exit status 0 or 1)
 #   "mangle" if the file was dirty, but is now clean (2 or 4)
 #   "drop"   if the file is still dirty (66)
 #   "save"   if the mp3virscan utility returns some other exit code
 #            or an error occurs.
 #
 file_list_2 = (?i)\.(mp3|mp2|mpg)$
 file_list_2_policy = accept:mangle:drop:save
 file_list_2_scanner = 0,1:2,4:66:/path/to/mp3virscan -opt -f %FILENAME

 # Scan WinWord and Excel attachments with built-in macro scanner.
 # We consider anything exceeding the score of 25 to be dangerous,
 # and save it in the quarantine.
 #
 file_list_3 = (?i)\.(doc|dot|xls|xlw)$
 file_list_3_policy = accept:accept:save:save
 file_list_3_scanner = 0:1:2:builtin/macro 25
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it> #</mrk>
<mrk mid="1" mtype="seg"> # These are the default values for all feature switches.</mrk>
<mrk mid="2" mtype="seg"> #</mrk>
<mrk mid="3" mtype="seg"> feat_verbose = 1    # Warn user about unscanned parts, etc.</mrk>
<mrk mid="4" mtype="seg"> feat_log_inline = 1 # Inline logs: 0 = Off, 1 =  Maybe, 2 = Force</mrk>
<mrk mid="5" mtype="seg"> feat_log_stderr = 1 # Print log to standard error</mrk>
<mrk mid="6" mtype="seg"> feat_log_xml = 0    # Don't use XML format for logs.</mrk>
<mrk mid="7" mtype="seg"> feat_log_trace = 0  # Omit trace info from logs.</mrk>
<mrk mid="8" mtype="seg"> feat_log_after = 0  # Don't add any scratch space to part headers.</mrk>
<mrk mid="9" mtype="seg"> feat_files = 1      # Enable filename-based policy decisions.</mrk>
<mrk mid="10" mtype="seg"> feat_force_name = 0 # Force all parts (except text/plain and</mrk>
<mrk mid="11" mtype="seg">                     # text/html parts) to have file names.</mrk>
<mrk mid="12" mtype="seg"> feat_boundaries = 0 # Replace all boundary strings with our own</mrk>
<mrk mid="13" mtype="seg">                     # NOTE:  Always breaks PGP/MIME messages!</mrk>
<mrk mid="14" mtype="seg"> feat_lengths = 1    # Protect against buffer overflows and null</mrk>
<mrk mid="15" mtype="seg">                     # values.</mrk>
<mrk mid="16" mtype="seg"> feat_scripts = 1    # Defang incoming shell scripts.</mrk>
<mrk mid="17" mtype="seg"> feat_html = 1       # Defang active HTML content.</mrk>
<mrk mid="18" mtype="seg"> feat_webbugs = 0    # Web-bugs are allowed.</mrk>
<mrk mid="19" mtype="seg"> feat_trust_pgp = 0  # Don't scan PGP signed message parts.</mrk>
<mrk mid="20" mtype="seg"> feat_uuencoded = 1  # Sanitize inline uuencoded files.</mrk>
<mrk mid="21" mtype="seg"> feat_forwards = 1   # Sanitize forwarded messages</mrk>
<mrk mid="22" mtype="seg"> feat_testing = 0    # This isn't a test-case configuration.</mrk>
<mrk mid="23" mtype="seg"> feat_fixmime = 1    # Fix invalid MIME, if possible.</mrk>
<mrk mid="24" mtype="seg"> feat_paranoid = 0   # Don't be excessively paranoid about MIME headers etc.</mrk> 
<mrk mid="25" mtype="seg"> #</mrk>
<mrk mid="26" mtype="seg"> # Scoring</mrk>
<mrk mid="27" mtype="seg"> #</mrk>
<mrk mid="28" mtype="seg"> score_bad = 100     # Any message requring this many modifications</mrk>
<mrk mid="29" mtype="seg">                     # will cause the sanitizer to return a non-zero</mrk>
<mrk mid="30" mtype="seg">		     # exit code after processing the entire message.</mrk>
<mrk mid="31" mtype="seg"> #</mrk>
<mrk mid="32" mtype="seg"> # You may need to increase the following if you have a very</mrk>
<mrk mid="33" mtype="seg"> # complex configuration split between multiple files.</mrk>
<mrk mid="34" mtype="seg"> #</mrk>
<mrk mid="35" mtype="seg"> max_conf_recursions = 5    # The default is 5.</mrk>
<mrk mid="36" mtype="seg"> #</mrk>
<mrk mid="37" mtype="seg"> # Create temporary or saved files using this template.</mrk>
<mrk mid="38" mtype="seg"> # An attachment named "dude.txt" might be saved as</mrk> 
<mrk mid="39" mtype="seg"> #</mrk>
<mrk mid="40" mtype="seg"> #  /var/quarantine/att-dude-txt.A9Y</mrk>
<mrk mid="41" mtype="seg"> #</mrk>
<mrk mid="42" mtype="seg"> # Note:  The directory must exist and be writable by</mrk>
<mrk mid="43" mtype="seg"> # the user running the sanitizer.</mrk>
<mrk mid="44" mtype="seg"> #</mrk>
<mrk mid="45" mtype="seg"> file_name_tpl = /var/quarantine/att-$F.$$$</mrk>

<mrk mid="46" mtype="seg"> # We have three policies, in addition to the default which is</mrk>
<mrk mid="47" mtype="seg"> # to defang file names.</mrk>
<mrk mid="48" mtype="seg"> #</mrk>
<mrk mid="49" mtype="seg"> file_list_rules = 3</mrk>
<mrk mid="50" mtype="seg"> file_default_policy = defang</mrk>
<mrk mid="51" mtype="seg"> file_default_filename = unnamed.file</mrk>
   
<mrk mid="52" mtype="seg"> # Delete obviously executable attachments.</mrk><mrk mid="53" mtype="seg">  This list is VERY</mrk>
<mrk mid="54" mtype="seg"> # incomplete!  This is a perl regular expression, see "man</mrk> 
<mrk mid="55" mtype="seg"> # perlre" for info.</mrk><mrk mid="56" mtype="seg">  The (?i) prefix makes the regexp case</mrk> 
<mrk mid="57" mtype="seg"> # insensitive.</mrk>
<mrk mid="58" mtype="seg"> #</mrk>
<mrk mid="59" mtype="seg"> # There is only one policy, since we aren't using an external</mrk>
<mrk mid="60" mtype="seg"> # scanner.</mrk><mrk mid="61" mtype="seg">  The file list is split accross two lines, for fun.</mrk>
<mrk mid="62" mtype="seg"> #</mrk>
<mrk mid="63" mtype="seg"> file_list_1  = (?i)\.(exe|com</mrk>
<mrk mid="64" mtype="seg"> file_list_1 += |cmd|bat)$</mrk>
<mrk mid="65" mtype="seg"> file_list_1_policy = drop</mrk>
<mrk mid="66" mtype="seg"> file_list_1_scanner = 0</mrk>

<mrk mid="67" mtype="seg"> # Scan mp3 files for Evil Viruses, using the imaginary mp3virscan</mrk>
<mrk mid="68" mtype="seg"> # utility.</mrk><mrk mid="69" mtype="seg">  Always define FOUR potential policies, which depend on the</mrk>
<mrk mid="70" mtype="seg"> # exit code returned by the scanner.</mrk><mrk mid="71" mtype="seg">  Which code means what is</mrk> 
<mrk mid="72" mtype="seg"> # defined in the scanner line, which must contain THREE entries.</mrk>
<mrk mid="73" mtype="seg"> # The fourth policy is used for "anything else".</mrk>
<mrk mid="74" mtype="seg"> #</mrk>
<mrk mid="75" mtype="seg"> #   "accept" if the file is clean (exit status 0 or 1)</mrk>
<mrk mid="76" mtype="seg"> #   "mangle" if the file was dirty, but is now clean (2 or 4)</mrk>
<mrk mid="77" mtype="seg"> #   "drop"   if the file is still dirty (66)</mrk>
<mrk mid="78" mtype="seg"> #   "save"   if the mp3virscan utility returns some other exit code</mrk>
<mrk mid="79" mtype="seg"> #            or an error occurs.</mrk>
<mrk mid="80" mtype="seg"> #</mrk>
<mrk mid="81" mtype="seg"> file_list_2 = (?i)\.(mp3|mp2|mpg)$</mrk>
<mrk mid="82" mtype="seg"> file_list_2_policy = accept:mangle:drop:save</mrk>
<mrk mid="83" mtype="seg"> file_list_2_scanner = 0,1:2,4:66:/path/to/mp3virscan -opt -f %FILENAME</mrk>

<mrk mid="84" mtype="seg"> # Scan WinWord and Excel attachments with built-in macro scanner.</mrk>
<mrk mid="85" mtype="seg"> # We consider anything exceeding the score of 25 to be dangerous,</mrk>
<mrk mid="86" mtype="seg"> # and save it in the quarantine.</mrk>
<mrk mid="87" mtype="seg"> #</mrk>
<mrk mid="88" mtype="seg"> file_list_3 = (?i)\.(doc|dot|xls|xlw)$</mrk>
<mrk mid="89" mtype="seg"> file_list_3_policy = accept:accept:save:save</mrk>
<mrk mid="90" mtype="seg"> file_list_3_scanner = 0:1:2:builtin/macro 25
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it> #</mrk>
<mrk mid="1" mtype="seg"> # These are the default values for all feature switches.</mrk>
<mrk mid="2" mtype="seg"> #</mrk>
<mrk mid="3" mtype="seg"> feat_verbose = 1    # Warn user about unscanned parts, etc.</mrk>
<mrk mid="4" mtype="seg"> feat_log_inline = 1 # Inline logs: 0 = Off, 1 =  Maybe, 2 = Force</mrk>
<mrk mid="5" mtype="seg"> feat_log_stderr = 1 # Print log to standard error</mrk>
<mrk mid="6" mtype="seg"> feat_log_xml = 0    # Don't use XML format for logs.</mrk>
<mrk mid="7" mtype="seg"> feat_log_trace = 0  # Omit trace info from logs.</mrk>
<mrk mid="8" mtype="seg"> feat_log_after = 0  # Don't add any scratch space to part headers.</mrk>
<mrk mid="9" mtype="seg"> feat_files = 1      # Enable filename-based policy decisions.</mrk>
<mrk mid="10" mtype="seg"> feat_force_name = 0 # Force all parts (except text/plain and</mrk>
<mrk mid="11" mtype="seg">                     # text/html parts) to have file names.</mrk>
<mrk mid="12" mtype="seg"> feat_boundaries = 0 # Replace all boundary strings with our own</mrk>
<mrk mid="13" mtype="seg">                     # NOTE:  Always breaks PGP/MIME messages!</mrk>
<mrk mid="14" mtype="seg"> feat_lengths = 1    # Protect against buffer overflows and null</mrk>
<mrk mid="15" mtype="seg">                     # values.</mrk>
<mrk mid="16" mtype="seg"> feat_scripts = 1    # Defang incoming shell scripts.</mrk>
<mrk mid="17" mtype="seg"> feat_html = 1       # Defang active HTML content.</mrk>
<mrk mid="18" mtype="seg"> feat_webbugs = 0    # Web-bugs are allowed.</mrk>
<mrk mid="19" mtype="seg"> feat_trust_pgp = 0  # Don't scan PGP signed message parts.</mrk>
<mrk mid="20" mtype="seg"> feat_uuencoded = 1  # Sanitize inline uuencoded files.</mrk>
<mrk mid="21" mtype="seg"> feat_forwards = 1   # Sanitize forwarded messages</mrk>
<mrk mid="22" mtype="seg"> feat_testing = 0    # This isn't a test-case configuration.</mrk>
<mrk mid="23" mtype="seg"> feat_fixmime = 1    # Fix invalid MIME, if possible.</mrk>
<mrk mid="24" mtype="seg"> feat_paranoid = 0   # Don't be excessively paranoid about MIME headers etc.</mrk> 
<mrk mid="25" mtype="seg"> #</mrk>
<mrk mid="26" mtype="seg"> # Scoring</mrk>
<mrk mid="27" mtype="seg"> #</mrk>
<mrk mid="28" mtype="seg"> score_bad = 100     # Any message requring this many modifications</mrk>
<mrk mid="29" mtype="seg">                     # will cause the sanitizer to return a non-zero</mrk>
<mrk mid="30" mtype="seg">		     # exit code after processing the entire message.</mrk>
<mrk mid="31" mtype="seg"> #</mrk>
<mrk mid="32" mtype="seg"> # You may need to increase the following if you have a very</mrk>
<mrk mid="33" mtype="seg"> # complex configuration split between multiple files.</mrk>
<mrk mid="34" mtype="seg"> #</mrk>
<mrk mid="35" mtype="seg"> max_conf_recursions = 5    # The default is 5.</mrk>
<mrk mid="36" mtype="seg"> #</mrk>
<mrk mid="37" mtype="seg"> # Create temporary or saved files using this template.</mrk>
<mrk mid="38" mtype="seg"> # An attachment named "dude.txt" might be saved as</mrk> 
<mrk mid="39" mtype="seg"> #</mrk>
<mrk mid="40" mtype="seg"> #  /var/quarantine/att-dude-txt.A9Y</mrk>
<mrk mid="41" mtype="seg"> #</mrk>
<mrk mid="42" mtype="seg"> # Note:  The directory must exist and be writable by</mrk>
<mrk mid="43" mtype="seg"> # the user running the sanitizer.</mrk>
<mrk mid="44" mtype="seg"> #</mrk>
<mrk mid="45" mtype="seg"> file_name_tpl = /var/quarantine/att-$F.$$$</mrk>

<mrk mid="46" mtype="seg"> # We have three policies, in addition to the default which is</mrk>
<mrk mid="47" mtype="seg"> # to defang file names.</mrk>
<mrk mid="48" mtype="seg"> #</mrk>
<mrk mid="49" mtype="seg"> file_list_rules = 3</mrk>
<mrk mid="50" mtype="seg"> file_default_policy = defang</mrk>
<mrk mid="51" mtype="seg"> file_default_filename = unnamed.file</mrk>
   
<mrk mid="52" mtype="seg"> # Delete obviously executable attachments.</mrk><mrk mid="53" mtype="seg">  This list is VERY</mrk>
<mrk mid="54" mtype="seg"> # incomplete!  This is a perl regular expression, see "man</mrk> 
<mrk mid="55" mtype="seg"> # perlre" for info.</mrk><mrk mid="56" mtype="seg">  The (?i) prefix makes the regexp case</mrk> 
<mrk mid="57" mtype="seg"> # insensitive.</mrk>
<mrk mid="58" mtype="seg"> #</mrk>
<mrk mid="59" mtype="seg"> # There is only one policy, since we aren't using an external</mrk>
<mrk mid="60" mtype="seg"> # scanner.</mrk><mrk mid="61" mtype="seg">  The file list is split accross two lines, for fun.</mrk>
<mrk mid="62" mtype="seg"> #</mrk>
<mrk mid="63" mtype="seg"> file_list_1  = (?i)\.(exe|com</mrk>
<mrk mid="64" mtype="seg"> file_list_1 += |cmd|bat)$</mrk>
<mrk mid="65" mtype="seg"> file_list_1_policy = drop</mrk>
<mrk mid="66" mtype="seg"> file_list_1_scanner = 0</mrk>

<mrk mid="67" mtype="seg"> # Scan mp3 files for Evil Viruses, using the imaginary mp3virscan</mrk>
<mrk mid="68" mtype="seg"> # utility.</mrk><mrk mid="69" mtype="seg">  Always define FOUR potential policies, which depend on the</mrk>
<mrk mid="70" mtype="seg"> # exit code returned by the scanner.</mrk><mrk mid="71" mtype="seg">  Which code means what is</mrk> 
<mrk mid="72" mtype="seg"> # defined in the scanner line, which must contain THREE entries.</mrk>
<mrk mid="73" mtype="seg"> # The fourth policy is used for "anything else".</mrk>
<mrk mid="74" mtype="seg"> #</mrk>
<mrk mid="75" mtype="seg"> #   "accept" if the file is clean (exit status 0 or 1)</mrk>
<mrk mid="76" mtype="seg"> #   "mangle" if the file was dirty, but is now clean (2 or 4)</mrk>
<mrk mid="77" mtype="seg"> #   "drop"   if the file is still dirty (66)</mrk>
<mrk mid="78" mtype="seg"> #   "save"   if the mp3virscan utility returns some other exit code</mrk>
<mrk mid="79" mtype="seg"> #            or an error occurs.</mrk>
<mrk mid="80" mtype="seg"> #</mrk>
<mrk mid="81" mtype="seg"> file_list_2 = (?i)\.(mp3|mp2|mpg)$</mrk>
<mrk mid="82" mtype="seg"> file_list_2_policy = accept:mangle:drop:save</mrk>
<mrk mid="83" mtype="seg"> file_list_2_scanner = 0,1:2,4:66:/path/to/mp3virscan -opt -f %FILENAME</mrk>

<mrk mid="84" mtype="seg"> # Scan WinWord and Excel attachments with built-in macro scanner.</mrk>
<mrk mid="85" mtype="seg"> # We consider anything exceeding the score of 25 to be dangerous,</mrk>
<mrk mid="86" mtype="seg"> # and save it in the quarantine.</mrk>
<mrk mid="87" mtype="seg"> #</mrk>
<mrk mid="88" mtype="seg"> file_list_3 = (?i)\.(doc|dot|xls|xlw)$</mrk>
<mrk mid="89" mtype="seg"> file_list_3_policy = accept:accept:save:save</mrk>
<mrk mid="90" mtype="seg"> file_list_3_scanner = 0:1:2:builtin/macro 25
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu151">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu152" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> This probably needs to be documented better - if you are brave, you can try reading the comments in <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>sanitizer.pl<ept id="2">&lt;/tt&gt;</ept> and/or <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>bin/Anomy/Sanitizer.pm<ept id="3">&lt;/tt&gt;</ept> to get a better idea of how this works. The text messages used to replace dropped or saved attachments can be customized by setting the msg_file_save and msg_file_drop variables. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> This probably needs to be documented better - if you are brave, you can try reading the comments in <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>sanitizer.pl<ept id="2">&lt;/tt&gt;</ept> and/or <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>bin/Anomy/Sanitizer.pm<ept id="3">&lt;/tt&gt;</ept> to get a better idea of how this works.</mrk><mrk mid="1" mtype="seg"> The text messages used to replace dropped or saved attachments can be customized by setting the msg_file_save and msg_file_drop variables.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> This probably needs to be documented better - if you are brave, you can try reading the comments in <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>sanitizer.pl<ept id="2">&lt;/tt&gt;</ept> and/or <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>bin/Anomy/Sanitizer.pm<ept id="3">&lt;/tt&gt;</ept> to get a better idea of how this works.</mrk><mrk mid="1" mtype="seg"> The text messages used to replace dropped or saved attachments can be customized by setting the msg_file_save and msg_file_drop variables.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu153" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Note that these rules don't apply to message parts without file names, such parts are either treated as plain text, HTML, or left alone. In the future policies based on MIME types or "magic" guessing might be added to the sanitizer. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Note that these rules don't apply to message parts without file names, such parts are either treated as plain text, HTML, or left alone.</mrk><mrk mid="1" mtype="seg"> In the future policies based on MIME types or "magic" guessing might be added to the sanitizer.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-polvir"&gt;</it> Note that these rules don't apply to message parts without file names, such parts are either treated as plain text, HTML, or left alone.</mrk><mrk mid="1" mtype="seg"> In the future policies based on MIME types or "magic" guessing might be added to the sanitizer.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu154" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt> Please send me information about how to configure different file_list_N_scanner lines for use with the commercial virus scanners out there! <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt> Please send me information about how to configure different file_list_N_scanner lines for use with the commercial virus scanners out there! <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt> Please send me information about how to configure different file_list_N_scanner lines for use with the commercial virus scanners out there! <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu155" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp283]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp283]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-polvir"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp283]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu156">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu157" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt>Configuration - Customizing messages<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt>Configuration - Customizing messages<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt>Configuration - Customizing messages<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu158" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> All messages, except for the sanitizer log file can be customized from within a sanitizer configuration file. An example: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> All messages, except for the sanitizer log file can be customized from within a sanitizer configuration file.</mrk><mrk mid="1" mtype="seg"> An example: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> All messages, except for the sanitizer log file can be customized from within a sanitizer configuration file.</mrk><mrk mid="1" mtype="seg"> An example: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu159" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu160">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu161" restype="x-pre" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it> #
 # Add two lines of informational headers to each message.
 #
 header_info  = X-Sanitizer: Gotcha!
 header_info += \nX-Gotcha: Sanitizer!
 #
 # Disable these builtin headers.
 #
 header_url = 0
 header_rev = 0
 #
 # Replace the "DEFANGED" string with "FIXED".  This 
 # string is used to mangle file names, HTML and other 
 # stuff within the message, so the user might see it.
 #
 msg_defanged = FIXED
 #
 # Also replace a couple of other similar strings.
 # These are only used by the filename mangling code.
 #
 msg_blacklisted = EVIL
 #
 # Replace the defaults with truly obnoxious messages.
 # These two replace attachments which are dropped or
 # saved.
 #
 msg_file_drop  = *****\n
 msg_file_drop += HA HA, I DROPPED YOUR ATTACHMENT!\n
 msg_file_drop += Now you'll never see %FILENAME again!
 msg_file_drop += *****\n
 #
 msg_file_save  = *****\n
 msg_file_save += Added %FILENAME as %SAVEDNAME to my\n
 msg_file_save += stolen email collection.\n
 msg_file_save += *****\n
 #
 # This is prepended to PGP signed/encrypted message
 # parts, to warn the user.
 #
 msg_pgp_warning = WARNING: Unsanitized content follows.\n
 #
 # Tell the user what's going on.  This prefixes the
 # sanitizer log, which is always in english.
 #
 msg_log_prefix  = This message has been sanitized.  Stuff\n
 msg_log_prefix += may have been altered - the following\n
 msg_log_prefix += log explains what was done and why.\n
 #
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it> #</mrk>
<mrk mid="1" mtype="seg"> # Add two lines of informational headers to each message.</mrk>
<mrk mid="2" mtype="seg"> #</mrk>
<mrk mid="3" mtype="seg"> header_info  = X-Sanitizer: Gotcha!</mrk>
<mrk mid="4" mtype="seg"> header_info += \nX-Gotcha: Sanitizer!</mrk>
<mrk mid="5" mtype="seg"> #</mrk>
<mrk mid="6" mtype="seg"> # Disable these builtin headers.</mrk>
<mrk mid="7" mtype="seg"> #</mrk>
<mrk mid="8" mtype="seg"> header_url = 0</mrk>
<mrk mid="9" mtype="seg"> header_rev = 0</mrk>
<mrk mid="10" mtype="seg"> #</mrk>
<mrk mid="11" mtype="seg"> # Replace the "DEFANGED" string with "FIXED".</mrk><mrk mid="12" mtype="seg">  This</mrk> 
<mrk mid="13" mtype="seg"> # string is used to mangle file names, HTML and other</mrk> 
<mrk mid="14" mtype="seg"> # stuff within the message, so the user might see it.</mrk>
<mrk mid="15" mtype="seg"> #</mrk>
<mrk mid="16" mtype="seg"> msg_defanged = FIXED</mrk>
<mrk mid="17" mtype="seg"> #</mrk>
<mrk mid="18" mtype="seg"> # Also replace a couple of other similar strings.</mrk>
<mrk mid="19" mtype="seg"> # These are only used by the filename mangling code.</mrk>
<mrk mid="20" mtype="seg"> #</mrk>
<mrk mid="21" mtype="seg"> msg_blacklisted = EVIL</mrk>
<mrk mid="22" mtype="seg"> #</mrk>
<mrk mid="23" mtype="seg"> # Replace the defaults with truly obnoxious messages.</mrk>
<mrk mid="24" mtype="seg"> # These two replace attachments which are dropped or</mrk>
<mrk mid="25" mtype="seg"> # saved.</mrk>
<mrk mid="26" mtype="seg"> #</mrk>
<mrk mid="27" mtype="seg"> msg_file_drop  = *****\n</mrk>
<mrk mid="28" mtype="seg"> msg_file_drop += HA HA, I DROPPED YOUR ATTACHMENT!\n</mrk>
<mrk mid="29" mtype="seg"> msg_file_drop += Now you'll never see %FILENAME again!</mrk>
<mrk mid="30" mtype="seg"> msg_file_drop += *****\n</mrk>
<mrk mid="31" mtype="seg"> #</mrk>
<mrk mid="32" mtype="seg"> msg_file_save  = *****\n</mrk>
<mrk mid="33" mtype="seg"> msg_file_save += Added %FILENAME as %SAVEDNAME to my\n</mrk>
<mrk mid="34" mtype="seg"> msg_file_save += stolen email collection.\n</mrk>
<mrk mid="35" mtype="seg"> msg_file_save += *****\n</mrk>
<mrk mid="36" mtype="seg"> #</mrk>
<mrk mid="37" mtype="seg"> # This is prepended to PGP signed/encrypted message</mrk>
<mrk mid="38" mtype="seg"> # parts, to warn the user.</mrk>
<mrk mid="39" mtype="seg"> #</mrk>
<mrk mid="40" mtype="seg"> msg_pgp_warning = WARNING: Unsanitized content follows.\n</mrk>
<mrk mid="41" mtype="seg"> #</mrk>
<mrk mid="42" mtype="seg"> # Tell the user what's going on.</mrk><mrk mid="43" mtype="seg">  This prefixes the</mrk>
<mrk mid="44" mtype="seg"> # sanitizer log, which is always in english.</mrk>
<mrk mid="45" mtype="seg"> #</mrk>
<mrk mid="46" mtype="seg"> msg_log_prefix  = This message has been sanitized.</mrk><mrk mid="47" mtype="seg">  Stuff\n</mrk>
<mrk mid="48" mtype="seg"> msg_log_prefix += may have been altered - the following\n</mrk>
<mrk mid="49" mtype="seg"> msg_log_prefix += log explains what was done and why.\n</mrk>
<mrk mid="50" mtype="seg"> #
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it> #</mrk>
<mrk mid="1" mtype="seg"> # Add two lines of informational headers to each message.</mrk>
<mrk mid="2" mtype="seg"> #</mrk>
<mrk mid="3" mtype="seg"> header_info  = X-Sanitizer: Gotcha!</mrk>
<mrk mid="4" mtype="seg"> header_info += \nX-Gotcha: Sanitizer!</mrk>
<mrk mid="5" mtype="seg"> #</mrk>
<mrk mid="6" mtype="seg"> # Disable these builtin headers.</mrk>
<mrk mid="7" mtype="seg"> #</mrk>
<mrk mid="8" mtype="seg"> header_url = 0</mrk>
<mrk mid="9" mtype="seg"> header_rev = 0</mrk>
<mrk mid="10" mtype="seg"> #</mrk>
<mrk mid="11" mtype="seg"> # Replace the "DEFANGED" string with "FIXED".</mrk><mrk mid="12" mtype="seg">  This</mrk> 
<mrk mid="13" mtype="seg"> # string is used to mangle file names, HTML and other</mrk> 
<mrk mid="14" mtype="seg"> # stuff within the message, so the user might see it.</mrk>
<mrk mid="15" mtype="seg"> #</mrk>
<mrk mid="16" mtype="seg"> msg_defanged = FIXED</mrk>
<mrk mid="17" mtype="seg"> #</mrk>
<mrk mid="18" mtype="seg"> # Also replace a couple of other similar strings.</mrk>
<mrk mid="19" mtype="seg"> # These are only used by the filename mangling code.</mrk>
<mrk mid="20" mtype="seg"> #</mrk>
<mrk mid="21" mtype="seg"> msg_blacklisted = EVIL</mrk>
<mrk mid="22" mtype="seg"> #</mrk>
<mrk mid="23" mtype="seg"> # Replace the defaults with truly obnoxious messages.</mrk>
<mrk mid="24" mtype="seg"> # These two replace attachments which are dropped or</mrk>
<mrk mid="25" mtype="seg"> # saved.</mrk>
<mrk mid="26" mtype="seg"> #</mrk>
<mrk mid="27" mtype="seg"> msg_file_drop  = *****\n</mrk>
<mrk mid="28" mtype="seg"> msg_file_drop += HA HA, I DROPPED YOUR ATTACHMENT!\n</mrk>
<mrk mid="29" mtype="seg"> msg_file_drop += Now you'll never see %FILENAME again!</mrk>
<mrk mid="30" mtype="seg"> msg_file_drop += *****\n</mrk>
<mrk mid="31" mtype="seg"> #</mrk>
<mrk mid="32" mtype="seg"> msg_file_save  = *****\n</mrk>
<mrk mid="33" mtype="seg"> msg_file_save += Added %FILENAME as %SAVEDNAME to my\n</mrk>
<mrk mid="34" mtype="seg"> msg_file_save += stolen email collection.\n</mrk>
<mrk mid="35" mtype="seg"> msg_file_save += *****\n</mrk>
<mrk mid="36" mtype="seg"> #</mrk>
<mrk mid="37" mtype="seg"> # This is prepended to PGP signed/encrypted message</mrk>
<mrk mid="38" mtype="seg"> # parts, to warn the user.</mrk>
<mrk mid="39" mtype="seg"> #</mrk>
<mrk mid="40" mtype="seg"> msg_pgp_warning = WARNING: Unsanitized content follows.\n</mrk>
<mrk mid="41" mtype="seg"> #</mrk>
<mrk mid="42" mtype="seg"> # Tell the user what's going on.</mrk><mrk mid="43" mtype="seg">  This prefixes the</mrk>
<mrk mid="44" mtype="seg"> # sanitizer log, which is always in english.</mrk>
<mrk mid="45" mtype="seg"> #</mrk>
<mrk mid="46" mtype="seg"> msg_log_prefix  = This message has been sanitized.</mrk><mrk mid="47" mtype="seg">  Stuff\n</mrk>
<mrk mid="48" mtype="seg"> msg_log_prefix += may have been altered - the following\n</mrk>
<mrk mid="49" mtype="seg"> msg_log_prefix += log explains what was done and why.\n</mrk>
<mrk mid="50" mtype="seg"> #
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu162">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu163" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> Although I can't imagine why you would want to, you can also redefine the messages "msg_usage" and "msg_current". These messages are only displayed when you invoke the sanitizer incorrectly at the command line. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> Although I can't imagine why you would want to, you can also redefine the messages "msg_usage" and "msg_current".</mrk><mrk mid="1" mtype="seg"> These messages are only displayed when you invoke the sanitizer incorrectly at the command line.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> Although I can't imagine why you would want to, you can also redefine the messages "msg_usage" and "msg_current".</mrk><mrk mid="1" mtype="seg"> These messages are only displayed when you invoke the sanitizer incorrectly at the command line.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu164" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> If you take advantage of this facility to translate the default messages to your language, please consider sharing your translation with me so I can include it in future releases of the sanitizer. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> If you take advantage of this facility to translate the default messages to your language, please consider sharing your translation with me so I can include it in future releases of the sanitizer.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-messages"&gt;</it> If you take advantage of this facility to translate the default messages to your language, please consider sharing your translation with me so I can include it in future releases of the sanitizer.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu165" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp297]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp297]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-messages"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp297]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu166">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu167" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt>Configuration - Recommendations<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt>Configuration - Recommendations<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt>Configuration - Recommendations<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu168" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> In general, I recommend using "defang" as a default policy since keeping track of which extensions are executable or scriptable in the windows world this week strikes me as a rather daunting task. Defanging (mangling the file names) allows the data to reach the user, but forces users to take an extra step and think about what they are doing before they can open and work with whatever they were sent. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> In general, I recommend using "defang" as a default policy since keeping track of which extensions are executable or scriptable in the windows world this week strikes me as a rather daunting task.</mrk><mrk mid="1" mtype="seg"> Defanging (mangling the file names) allows the data to reach the user, but forces users to take an extra step and think about what they are doing before they can open and work with whatever they were sent.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> In general, I recommend using "defang" as a default policy since keeping track of which extensions are executable or scriptable in the windows world this week strikes me as a rather daunting task.</mrk><mrk mid="1" mtype="seg"> Defanging (mangling the file names) allows the data to reach the user, but forces users to take an extra step and think about what they are doing before they can open and work with whatever they were sent.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu169" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> A policy to "accept" safe extensions such as .gif, .jpg etc can be added to make life easier for your users. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> A policy to "accept" safe extensions such as .gif, .jpg etc can be added to make life easier for your users.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> A policy to "accept" safe extensions such as .gif, .jpg etc can be added to make life easier for your users.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu170" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> Microsoft Office documents, the most common executables, and archives (zip etc.) should probably be scanned with a commercial virus scanner. If you don't absolutely need to receive executable content via. email, consider blocking it entirely. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> Microsoft Office documents, the most common executables, and archives (zip etc.) should probably be scanned with a commercial virus scanner.</mrk><mrk mid="1" mtype="seg"> If you don't absolutely need to receive executable content via.</mrk><mrk mid="2" mtype="seg"> email, consider blocking it entirely.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> Microsoft Office documents, the most common executables, and archives (zip etc.) should probably be scanned with a commercial virus scanner.</mrk><mrk mid="1" mtype="seg"> If you don't absolutely need to receive executable content via.</mrk><mrk mid="2" mtype="seg"> email, consider blocking it entirely.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu171" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> It is rather important to block Microsoft application/ms-tnef files, which are usually named "winmail.dat". The TNEF encoding is currently not understood by the sanitizer, which means it can easily be used to smuggle malicious attachments past the sanitizer unless it is blocked. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> It is rather important to block Microsoft application/ms-tnef files, which are usually named "winmail.dat".</mrk><mrk mid="1" mtype="seg"> The TNEF encoding is currently not understood by the sanitizer, which means it can easily be used to smuggle malicious attachments past the sanitizer unless it is blocked.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> It is rather important to block Microsoft application/ms-tnef files, which are usually named "winmail.dat".</mrk><mrk mid="1" mtype="seg"> The TNEF encoding is currently not understood by the sanitizer, which means it can easily be used to smuggle malicious attachments past the sanitizer unless it is blocked.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu172" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> The default policies coded into the sanitizer try to accept all sorts of plain text files, images, audio files, archives and movies. The most common Microsoft documents are scanned by the internal macro scanner, and if they exceed a threshold of 25 the attachments are removed and put in quarantine. Note that their names are not defanged by default, since that would probably get users up in arms. Anything else is defanged by the default policy. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> The default policies coded into the sanitizer try to accept all sorts of plain text files, images, audio files, archives and movies.</mrk><mrk mid="1" mtype="seg"> The most common Microsoft documents are scanned by the internal macro scanner, and if they exceed a threshold of 25 the attachments are removed and put in quarantine.</mrk><mrk mid="2" mtype="seg"> Note that their names are not defanged by default, since that would probably get users up in arms.</mrk><mrk mid="3" mtype="seg"> Anything else is defanged by the default policy.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> The default policies coded into the sanitizer try to accept all sorts of plain text files, images, audio files, archives and movies.</mrk><mrk mid="1" mtype="seg"> The most common Microsoft documents are scanned by the internal macro scanner, and if they exceed a threshold of 25 the attachments are removed and put in quarantine.</mrk><mrk mid="2" mtype="seg"> Note that their names are not defanged by default, since that would probably get users up in arms.</mrk><mrk mid="3" mtype="seg"> Anything else is defanged by the default policy.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu173" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt> If you are paranoid, don't use the default configuration! <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt> If you are paranoid, don't use the default configuration! <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt> If you are paranoid, don't use the default configuration! <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu174" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> Finally, no matter what your policy - at least <bpt id="2" ctype="italic">&lt;i&gt;</bpt>try<ept id="2">&lt;/i&gt;</ept> to educate your users. Do this both for security's sake, and to keep people from getting mad when their email gets rewritten. If people know what is going on and why, then they are much less likely to complain. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> Finally, no matter what your policy - at least <bpt id="2" ctype="italic">&lt;i&gt;</bpt>try<ept id="2">&lt;/i&gt;</ept> to educate your users.</mrk><mrk mid="1" mtype="seg"> Do this both for security's sake, and to keep people from getting mad when their email gets rewritten.</mrk><mrk mid="2" mtype="seg"> If people know what is going on and why, then they are much less likely to complain.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-recommendations"&gt;</it> Finally, no matter what your policy - at least <bpt id="2" ctype="italic">&lt;i&gt;</bpt>try<ept id="2">&lt;/i&gt;</ept> to educate your users.</mrk><mrk mid="1" mtype="seg"> Do this both for security's sake, and to keep people from getting mad when their email gets rewritten.</mrk><mrk mid="2" mtype="seg"> If people know what is going on and why, then they are much less likely to complain.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu175" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt> If you intend to use the program regularly, I recommend subscribing to the anomy-list mailing list (see the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp317]</bpt>Anomy home page<ept id="2">&lt;/a&gt;</ept> for more information). The traffic is currently very low, and is primarily used to announce new versions or warn users of email-related hazards.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt> If you intend to use the program regularly, I recommend subscribing to the anomy-list mailing list (see the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp317]</bpt>Anomy home page<ept id="2">&lt;/a&gt;</ept> for more information).</mrk><mrk mid="1" mtype="seg"> The traffic is currently very low, and is primarily used to announce new versions or warn users of email-related hazards.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-recommendations"&gt;</bpt> If you intend to use the program regularly, I recommend subscribing to the anomy-list mailing list (see the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp317]</bpt>Anomy home page<ept id="2">&lt;/a&gt;</ept> for more information).</mrk><mrk mid="1" mtype="seg"> The traffic is currently very low, and is primarily used to announce new versions or warn users of email-related hazards.</mrk></target>
</trans-unit>
<trans-unit id="tu176" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp320]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp320]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp320]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu177">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu178" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt>A real-world configuration<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt>A real-world configuration<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt>A real-world configuration<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu179" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-real"&gt;</it> The following instructions document a real-world configuration, very similar to one currently in use in a production environment, on a sendmail mail gateway. Instructions for configuring sendmail itself are omitted since they are identical to those covered elsewhere in this document. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-real"&gt;</it> The following instructions document a real-world configuration, very similar to one currently in use in a production environment, on a sendmail mail gateway.</mrk><mrk mid="1" mtype="seg"> Instructions for configuring sendmail itself are omitted since they are identical to those covered elsewhere in this document.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-real"&gt;</it> The following instructions document a real-world configuration, very similar to one currently in use in a production environment, on a sendmail mail gateway.</mrk><mrk mid="1" mtype="seg"> Instructions for configuring sendmail itself are omitted since they are identical to those covered elsewhere in this document.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu180" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt> The configuration itself is stored in <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/sanitizer.cfg<ept id="2">&lt;/tt&gt;</ept>, and looks about like this: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt> The configuration itself is stored in <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/sanitizer.cfg<ept id="2">&lt;/tt&gt;</ept>, and looks about like this: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt> The configuration itself is stored in <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/sanitizer.cfg<ept id="2">&lt;/tt&gt;</ept>, and looks about like this: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu181" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu182">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="conf-real"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-real"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="conf-real"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu183" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  # Active features.
  #
  feat_boundaries     = 0
  feat_files          = 1
  feat_forwards       = 1
  feat_html           = 1
  feat_lengths        = 1
  feat_log_inline     = 1
  feat_log_stderr     = 0
  feat_scripts        = 1
  feat_trust_pgp      = 0
  feat_uuencoded      = 1
  feat_verbose        = 1
  file_list_rules     = 4
  #
  # Note:  This directory must exist and be writable by
  # the user running the sanitizer.
  #
  file_name_tpl       = /var/quarantine/att-$F-$T.$$

  # Files we absolutely don't want (mostly executables).
  #
  file_list_1_scanner = 0
  file_list_1_policy  = save
  file_list_1         = (?i)(winmail\.dat
  file_list_1        += |\.(exe|vb[es]|c(om|hm)|bat|pif|s(ys|cr))
  file_list_1        += (\.g?z|\.bz\d?)*)$

  # Pure data, don't mangle this stuff (much).
  #
  file_list_2_scanner = 0
  file_list_2_policy  = accept
  file_list_2         = (?i)\.(gif|jpe?g|pn[mg]|x[pb]m|dvi|e?ps|p(df|cx)|bmp
  file_list_2        += |mp[32]|wav|au|ram?
  file_list_2        += |avi|mov|mpe?g
  file_list_2        += |t(xt|ex)|csv|l(og|yx)|sql|jtmpl
  file_list_2        += |[ch](pp|\+\+)?|s|inc|asm|pa(tch|s)|java|php\d?
  file_list_2        += |[ja]sp
  file_list_2        += |can|pos|ux|reg|kbf|xal|\d+)(\.g?z|\.bz\d?)*$

  file_list_3_scanner = 0
  file_list_3_policy  = accept
  file_list_3         = ^[^\.]+$

  # Archives and scriptable stuff - virus scan these.
  # NOTE:  There must be THREE groups of exit codes and FOUR policies,
  #      - the first three match the code groups, the fourth is default.
  #
  file_list_4_scanner = 0:5:3,4:/usr/local/bin/avp.sh %FILENAME
  file_list_4_policy  = accept:accept:save:save
  file_list_4         = (?i)\.(xls|d(at|oc)|p(pt|l)|rtf|[sp]?html?
  file_list_4        += |class|upd|wp\d?|m?db
  file_list_4        += |z(ip|oo)|ar[cj]|lha|[tr]ar|rpm|deb|slp|tgz
  file_list_4        += )(\.g?z|\.bz\d?)*$

  # Default policy: accept, but mangle file name.
  #
  file_default_policy = defang
</source>
<seg-source><mrk mid="0" mtype="seg">  # Active features.</mrk>
<mrk mid="1" mtype="seg">  #</mrk>
<mrk mid="2" mtype="seg">  feat_boundaries     = 0</mrk>
<mrk mid="3" mtype="seg">  feat_files          = 1</mrk>
<mrk mid="4" mtype="seg">  feat_forwards       = 1</mrk>
<mrk mid="5" mtype="seg">  feat_html           = 1</mrk>
<mrk mid="6" mtype="seg">  feat_lengths        = 1</mrk>
<mrk mid="7" mtype="seg">  feat_log_inline     = 1</mrk>
<mrk mid="8" mtype="seg">  feat_log_stderr     = 0</mrk>
<mrk mid="9" mtype="seg">  feat_scripts        = 1</mrk>
<mrk mid="10" mtype="seg">  feat_trust_pgp      = 0</mrk>
<mrk mid="11" mtype="seg">  feat_uuencoded      = 1</mrk>
<mrk mid="12" mtype="seg">  feat_verbose        = 1</mrk>
<mrk mid="13" mtype="seg">  file_list_rules     = 4</mrk>
<mrk mid="14" mtype="seg">  #</mrk>
<mrk mid="15" mtype="seg">  # Note:  This directory must exist and be writable by</mrk>
<mrk mid="16" mtype="seg">  # the user running the sanitizer.</mrk>
<mrk mid="17" mtype="seg">  #</mrk>
<mrk mid="18" mtype="seg">  file_name_tpl       = /var/quarantine/att-$F-$T.$$</mrk>

<mrk mid="19" mtype="seg">  # Files we absolutely don't want (mostly executables).</mrk>
<mrk mid="20" mtype="seg">  #</mrk>
<mrk mid="21" mtype="seg">  file_list_1_scanner = 0</mrk>
<mrk mid="22" mtype="seg">  file_list_1_policy  = save</mrk>
<mrk mid="23" mtype="seg">  file_list_1         = (?i)(winmail\.dat</mrk>
<mrk mid="24" mtype="seg">  file_list_1        += |\.(exe|vb[es]|c(om|hm)|bat|pif|s(ys|cr))</mrk>
<mrk mid="25" mtype="seg">  file_list_1        += (\.g?z|\.bz\d?)*)$</mrk>

<mrk mid="26" mtype="seg">  # Pure data, don't mangle this stuff (much).</mrk>
<mrk mid="27" mtype="seg">  #</mrk>
<mrk mid="28" mtype="seg">  file_list_2_scanner = 0</mrk>
<mrk mid="29" mtype="seg">  file_list_2_policy  = accept</mrk>
<mrk mid="30" mtype="seg">  file_list_2         = (?i)\.(gif|jpe?g|pn[mg]|x[pb]m|dvi|e?ps|p(df|cx)|bmp</mrk>
<mrk mid="31" mtype="seg">  file_list_2        += |mp[32]|wav|au|ram?</mrk>
<mrk mid="32" mtype="seg">  file_list_2        += |avi|mov|mpe?g</mrk>
<mrk mid="33" mtype="seg">  file_list_2        += |t(xt|ex)|csv|l(og|yx)|sql|jtmpl</mrk>
<mrk mid="34" mtype="seg">  file_list_2        += |[ch](pp|\+\+)?|s|inc|asm|pa(tch|s)|java|php\d?</mrk>
<mrk mid="35" mtype="seg">  file_list_2        += |[ja]sp</mrk>
<mrk mid="36" mtype="seg">  file_list_2        += |can|pos|ux|reg|kbf|xal|\d+)(\.g?z|\.bz\d?)*$</mrk>

<mrk mid="37" mtype="seg">  file_list_3_scanner = 0</mrk>
<mrk mid="38" mtype="seg">  file_list_3_policy  = accept</mrk>
<mrk mid="39" mtype="seg">  file_list_3         = ^[^\.]+$</mrk>

<mrk mid="40" mtype="seg">  # Archives and scriptable stuff - virus scan these.</mrk>
<mrk mid="41" mtype="seg">  # NOTE:  There must be THREE groups of exit codes and FOUR policies,</mrk>
<mrk mid="42" mtype="seg">  #      - the first three match the code groups, the fourth is default.</mrk>
<mrk mid="43" mtype="seg">  #</mrk>
<mrk mid="44" mtype="seg">  file_list_4_scanner = 0:5:3,4:/usr/local/bin/avp.sh %FILENAME</mrk>
<mrk mid="45" mtype="seg">  file_list_4_policy  = accept:accept:save:save</mrk>
<mrk mid="46" mtype="seg">  file_list_4         = (?i)\.(xls|d(at|oc)|p(pt|l)|rtf|[sp]?html?</mrk>
<mrk mid="47" mtype="seg">  file_list_4        += |class|upd|wp\d?|m?db</mrk>
<mrk mid="48" mtype="seg">  file_list_4        += |z(ip|oo)|ar[cj]|lha|[tr]ar|rpm|deb|slp|tgz</mrk>
<mrk mid="49" mtype="seg">  file_list_4        += )(\.g?z|\.bz\d?)*$</mrk>

<mrk mid="50" mtype="seg">  # Default policy: accept, but mangle file name.</mrk>
<mrk mid="51" mtype="seg">  #</mrk>
<mrk mid="52" mtype="seg">  file_default_policy = defang</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  # Active features.</mrk>
<mrk mid="1" mtype="seg">  #</mrk>
<mrk mid="2" mtype="seg">  feat_boundaries     = 0</mrk>
<mrk mid="3" mtype="seg">  feat_files          = 1</mrk>
<mrk mid="4" mtype="seg">  feat_forwards       = 1</mrk>
<mrk mid="5" mtype="seg">  feat_html           = 1</mrk>
<mrk mid="6" mtype="seg">  feat_lengths        = 1</mrk>
<mrk mid="7" mtype="seg">  feat_log_inline     = 1</mrk>
<mrk mid="8" mtype="seg">  feat_log_stderr     = 0</mrk>
<mrk mid="9" mtype="seg">  feat_scripts        = 1</mrk>
<mrk mid="10" mtype="seg">  feat_trust_pgp      = 0</mrk>
<mrk mid="11" mtype="seg">  feat_uuencoded      = 1</mrk>
<mrk mid="12" mtype="seg">  feat_verbose        = 1</mrk>
<mrk mid="13" mtype="seg">  file_list_rules     = 4</mrk>
<mrk mid="14" mtype="seg">  #</mrk>
<mrk mid="15" mtype="seg">  # Note:  This directory must exist and be writable by</mrk>
<mrk mid="16" mtype="seg">  # the user running the sanitizer.</mrk>
<mrk mid="17" mtype="seg">  #</mrk>
<mrk mid="18" mtype="seg">  file_name_tpl       = /var/quarantine/att-$F-$T.$$</mrk>

<mrk mid="19" mtype="seg">  # Files we absolutely don't want (mostly executables).</mrk>
<mrk mid="20" mtype="seg">  #</mrk>
<mrk mid="21" mtype="seg">  file_list_1_scanner = 0</mrk>
<mrk mid="22" mtype="seg">  file_list_1_policy  = save</mrk>
<mrk mid="23" mtype="seg">  file_list_1         = (?i)(winmail\.dat</mrk>
<mrk mid="24" mtype="seg">  file_list_1        += |\.(exe|vb[es]|c(om|hm)|bat|pif|s(ys|cr))</mrk>
<mrk mid="25" mtype="seg">  file_list_1        += (\.g?z|\.bz\d?)*)$</mrk>

<mrk mid="26" mtype="seg">  # Pure data, don't mangle this stuff (much).</mrk>
<mrk mid="27" mtype="seg">  #</mrk>
<mrk mid="28" mtype="seg">  file_list_2_scanner = 0</mrk>
<mrk mid="29" mtype="seg">  file_list_2_policy  = accept</mrk>
<mrk mid="30" mtype="seg">  file_list_2         = (?i)\.(gif|jpe?g|pn[mg]|x[pb]m|dvi|e?ps|p(df|cx)|bmp</mrk>
<mrk mid="31" mtype="seg">  file_list_2        += |mp[32]|wav|au|ram?</mrk>
<mrk mid="32" mtype="seg">  file_list_2        += |avi|mov|mpe?g</mrk>
<mrk mid="33" mtype="seg">  file_list_2        += |t(xt|ex)|csv|l(og|yx)|sql|jtmpl</mrk>
<mrk mid="34" mtype="seg">  file_list_2        += |[ch](pp|\+\+)?|s|inc|asm|pa(tch|s)|java|php\d?</mrk>
<mrk mid="35" mtype="seg">  file_list_2        += |[ja]sp</mrk>
<mrk mid="36" mtype="seg">  file_list_2        += |can|pos|ux|reg|kbf|xal|\d+)(\.g?z|\.bz\d?)*$</mrk>

<mrk mid="37" mtype="seg">  file_list_3_scanner = 0</mrk>
<mrk mid="38" mtype="seg">  file_list_3_policy  = accept</mrk>
<mrk mid="39" mtype="seg">  file_list_3         = ^[^\.]+$</mrk>

<mrk mid="40" mtype="seg">  # Archives and scriptable stuff - virus scan these.</mrk>
<mrk mid="41" mtype="seg">  # NOTE:  There must be THREE groups of exit codes and FOUR policies,</mrk>
<mrk mid="42" mtype="seg">  #      - the first three match the code groups, the fourth is default.</mrk>
<mrk mid="43" mtype="seg">  #</mrk>
<mrk mid="44" mtype="seg">  file_list_4_scanner = 0:5:3,4:/usr/local/bin/avp.sh %FILENAME</mrk>
<mrk mid="45" mtype="seg">  file_list_4_policy  = accept:accept:save:save</mrk>
<mrk mid="46" mtype="seg">  file_list_4         = (?i)\.(xls|d(at|oc)|p(pt|l)|rtf|[sp]?html?</mrk>
<mrk mid="47" mtype="seg">  file_list_4        += |class|upd|wp\d?|m?db</mrk>
<mrk mid="48" mtype="seg">  file_list_4        += |z(ip|oo)|ar[cj]|lha|[tr]ar|rpm|deb|slp|tgz</mrk>
<mrk mid="49" mtype="seg">  file_list_4        += )(\.g?z|\.bz\d?)*$</mrk>

<mrk mid="50" mtype="seg">  # Default policy: accept, but mangle file name.</mrk>
<mrk mid="51" mtype="seg">  #</mrk>
<mrk mid="52" mtype="seg">  file_default_policy = defang</mrk>
</target>
</trans-unit>
<trans-unit id="tu184">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu185" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt> This policy invokes the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp332]</bpt>AVP<ept id="2">&lt;/a&gt;</ept> virus scanner for common Microsoft document formats and compressed archives. The scanner (<bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>AvpLinux<ept id="3">&lt;/tt&gt;</ept>) is installed in <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/avp<ept id="4">&lt;/tt&gt;</ept>, and it's virus database is in the subdirectory <bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>avc<ept id="5">&lt;/tt&gt;</ept>. The scanner is invoked by calling the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/bin/avp.sh<ept id="6">&lt;/tt&gt;</ept> script, which looks like this:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt> This policy invokes the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp332]</bpt>AVP<ept id="2">&lt;/a&gt;</ept> virus scanner for common Microsoft document formats and compressed archives.</mrk><mrk mid="1" mtype="seg"> The scanner (<bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>AvpLinux<ept id="3">&lt;/tt&gt;</ept>) is installed in <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/avp<ept id="4">&lt;/tt&gt;</ept>, and it's virus database is in the subdirectory <bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>avc<ept id="5">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> The scanner is invoked by calling the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/bin/avp.sh<ept id="6">&lt;/tt&gt;</ept> script, which looks like this:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="conf-real"&gt;</bpt> This policy invokes the <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp332]</bpt>AVP<ept id="2">&lt;/a&gt;</ept> virus scanner for common Microsoft document formats and compressed archives.</mrk><mrk mid="1" mtype="seg"> The scanner (<bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>AvpLinux<ept id="3">&lt;/tt&gt;</ept>) is installed in <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/avp<ept id="4">&lt;/tt&gt;</ept>, and it's virus database is in the subdirectory <bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>avc<ept id="5">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> The scanner is invoked by calling the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/bin/avp.sh<ept id="6">&lt;/tt&gt;</ept> script, which looks like this:</mrk></target>
</trans-unit>
<trans-unit id="tu186">
<source xml:lang="en"><bpt id="1" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="1">&lt;/font&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="1">&lt;/font&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="1">&lt;/font&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu187" restype="x-pre" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it>  #!/bin/bash

  cd /usr/local/avp/avc
  [ "$1" = "" ] &amp;&amp; exit 21
  [ -f "$1" ] || exit 20
  exec ../AvpLinux -M -P -B -- $1 2&gt;/dev/null &gt;/dev/null
<it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it>  #!/bin/bash</mrk>

<mrk mid="1" mtype="seg">  cd /usr/local/avp/avc</mrk>
<mrk mid="2" mtype="seg">  [ "$1" = "" ] &amp;&amp; exit 21</mrk>
<mrk mid="3" mtype="seg">  [ -f "$1" ] || exit 20</mrk>
<mrk mid="4" mtype="seg">  exec ../AvpLinux -M -P -B -- $1 2&gt;/dev/null &gt;/dev/null
<it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it>  #!/bin/bash</mrk>

<mrk mid="1" mtype="seg">  cd /usr/local/avp/avc</mrk>
<mrk mid="2" mtype="seg">  [ "$1" = "" ] &amp;&amp; exit 21</mrk>
<mrk mid="3" mtype="seg">  [ -f "$1" ] || exit 20</mrk>
<mrk mid="4" mtype="seg">  exec ../AvpLinux -M -P -B -- $1 2&gt;/dev/null &gt;/dev/null
<it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu188">
<source xml:lang="en"><bpt id="1" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="1">&lt;/font&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="1">&lt;/font&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="1">&lt;/font&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu189" restype="x-paragraph">
<source xml:lang="en">Keeping the virus database in it's own special directory simplifies updating it automatically. Such updates can be accomplished by invoking a script once a week from cron. My script looks like this:</source>
<seg-source><mrk mid="0" mtype="seg">Keeping the virus database in it's own special directory simplifies updating it automatically.</mrk><mrk mid="1" mtype="seg"> Such updates can be accomplished by invoking a script once a week from cron.</mrk><mrk mid="2" mtype="seg"> My script looks like this:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Keeping the virus database in it's own special directory simplifies updating it automatically.</mrk><mrk mid="1" mtype="seg"> Such updates can be accomplished by invoking a script once a week from cron.</mrk><mrk mid="2" mtype="seg"> My script looks like this:</mrk></target>
</trans-unit>
<trans-unit id="tu190">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu191" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  #!/bin/bash
  #
  cd /usr/local/avp/
  rm -rf avc-old
  mkdir avc-update     || exit 1
  cd avc-update        || exit 1

  ncftpget -V -R ftp.avp.ru . '/updates/*' || (echo 'Failed!'; exit 2)

  ../AvpLinux ../infected.doc &gt;/dev/null 2&gt;/dev/null
  [ "$?" != "4" ] &amp;&amp; (echo 'Failed!'; exit 3)

  echo "OK, update complete, activating new files."
  cd ..
  mv avc avc-old &amp;&amp; mv avc-update avc
</source>
<seg-source><mrk mid="0" mtype="seg">  #!/bin/bash</mrk>
<mrk mid="1" mtype="seg">  #</mrk>
<mrk mid="2" mtype="seg">  cd /usr/local/avp/</mrk>
<mrk mid="3" mtype="seg">  rm -rf avc-old</mrk>
<mrk mid="4" mtype="seg">  mkdir avc-update     || exit 1</mrk>
<mrk mid="5" mtype="seg">  cd avc-update        || exit 1</mrk>

<mrk mid="6" mtype="seg">  ncftpget -V -R ftp.avp.ru .</mrk><mrk mid="7" mtype="seg"> '/updates/*' || (echo 'Failed!'; exit 2)</mrk>

<mrk mid="8" mtype="seg">  ../AvpLinux ../infected.doc &gt;/dev/null 2&gt;/dev/null</mrk>
<mrk mid="9" mtype="seg">  [ "$?" != "4" ] &amp;&amp; (echo 'Failed!'; exit 3)</mrk>

<mrk mid="10" mtype="seg">  echo "OK, update complete, activating new files."</mrk>
<mrk mid="11" mtype="seg">  cd ..</mrk>
<mrk mid="12" mtype="seg">  mv avc avc-old &amp;&amp; mv avc-update avc</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  #!/bin/bash</mrk>
<mrk mid="1" mtype="seg">  #</mrk>
<mrk mid="2" mtype="seg">  cd /usr/local/avp/</mrk>
<mrk mid="3" mtype="seg">  rm -rf avc-old</mrk>
<mrk mid="4" mtype="seg">  mkdir avc-update     || exit 1</mrk>
<mrk mid="5" mtype="seg">  cd avc-update        || exit 1</mrk>

<mrk mid="6" mtype="seg">  ncftpget -V -R ftp.avp.ru .</mrk><mrk mid="7" mtype="seg"> '/updates/*' || (echo 'Failed!'; exit 2)</mrk>

<mrk mid="8" mtype="seg">  ../AvpLinux ../infected.doc &gt;/dev/null 2&gt;/dev/null</mrk>
<mrk mid="9" mtype="seg">  [ "$?" != "4" ] &amp;&amp; (echo 'Failed!'; exit 3)</mrk>

<mrk mid="10" mtype="seg">  echo "OK, update complete, activating new files."</mrk>
<mrk mid="11" mtype="seg">  cd ..</mrk>
<mrk mid="12" mtype="seg">  mv avc avc-old &amp;&amp; mv avc-update avc</mrk>
</target>
</trans-unit>
<trans-unit id="tu192">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu193" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu194" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp339]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp339]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp339]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu195">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-sendmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-sendmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-sendmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu196" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-sendmail"&gt;</bpt>In-transit sanitizing - sendmail<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-sendmail"&gt;</bpt>In-transit sanitizing - sendmail<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-sendmail"&gt;</bpt>In-transit sanitizing - sendmail<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu197" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-sendmail"&gt;</it> The following instructions describe <bpt id="2" ctype="bold">&lt;b&gt;</bpt>two<ept id="2">&lt;/b&gt;</ept> different methods to sanitize in-transit email with sendmail. This works fine on a mail gateway, but if you are just sanitizing mail being delivered to local recipients (on the same machine as the sanitizer) then it is far simpler and safer to use procmail as your local delivery agent and invoke the sanitizer as described in the <it id="1" ctype="link" pos="close">&lt;/a&gt;</it><bpt id="3" ctype="link">[#$dp345]</bpt>installation chapter<ept id="3">&lt;/a&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-sendmail"&gt;</it> The following instructions describe <bpt id="2" ctype="bold">&lt;b&gt;</bpt>two<ept id="2">&lt;/b&gt;</ept> different methods to sanitize in-transit email with sendmail.</mrk><mrk mid="1" mtype="seg"> This works fine on a mail gateway, but if you are just sanitizing mail being delivered to local recipients (on the same machine as the sanitizer) then it is far simpler and safer to use procmail as your local delivery agent and invoke the sanitizer as described in the <it id="1" ctype="link" pos="close">&lt;/a&gt;</it><bpt id="3" ctype="link">[#$dp345]</bpt>installation chapter<ept id="3">&lt;/a&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-sendmail"&gt;</it> The following instructions describe <bpt id="2" ctype="bold">&lt;b&gt;</bpt>two<ept id="2">&lt;/b&gt;</ept> different methods to sanitize in-transit email with sendmail.</mrk><mrk mid="1" mtype="seg"> This works fine on a mail gateway, but if you are just sanitizing mail being delivered to local recipients (on the same machine as the sanitizer) then it is far simpler and safer to use procmail as your local delivery agent and invoke the sanitizer as described in the <it id="1" ctype="link" pos="close">&lt;/a&gt;</it><bpt id="3" ctype="link">[#$dp345]</bpt>installation chapter<ept id="3">&lt;/a&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu198" restype="x-paragraph">
<source xml:lang="en">One method involves using procmail as an intermediate layer between sendmail and the sanitizer, the other method invokes the sanitizer directly. The procmail method is recommended, since procmail provides simple and robust error handling and logging functions. On the other hand, the procmail method may be signifigantly slower, since it involves at least twice as many I/O operations and perhaps some disk accesses as well. On an already loaded system, this may not be acceptible overhead.</source>
<seg-source><mrk mid="0" mtype="seg">One method involves using procmail as an intermediate layer between sendmail and the sanitizer, the other method invokes the sanitizer directly.</mrk><mrk mid="1" mtype="seg"> The procmail method is recommended, since procmail provides simple and robust error handling and logging functions.</mrk><mrk mid="2" mtype="seg"> On the other hand, the procmail method may be signifigantly slower, since it involves at least twice as many I/O operations and perhaps some disk accesses as well.</mrk><mrk mid="3" mtype="seg"> On an already loaded system, this may not be acceptible overhead.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">One method involves using procmail as an intermediate layer between sendmail and the sanitizer, the other method invokes the sanitizer directly.</mrk><mrk mid="1" mtype="seg"> The procmail method is recommended, since procmail provides simple and robust error handling and logging functions.</mrk><mrk mid="2" mtype="seg"> On the other hand, the procmail method may be signifigantly slower, since it involves at least twice as many I/O operations and perhaps some disk accesses as well.</mrk><mrk mid="3" mtype="seg"> On an already loaded system, this may not be acceptible overhead.</mrk></target>
</trans-unit>
<trans-unit id="tu199" restype="x-paragraph">
<source xml:lang="en">The choice is yours - but whatever you do <bpt id="1" ctype="bold">&lt;b&gt;</bpt>be careful<ept id="1">&lt;/b&gt;</ept>, and be sure to test this carefully on a non-production machine before implementing it anywhere important! Keep in mind that sendmail is a tricky beast and this may not work on your system without lots of modifications. This works for <bpt id="2" ctype="italic">&lt;i&gt;</bpt>me<ept id="2">&lt;/i&gt;</ept>, but <bpt id="3" ctype="italic">&lt;i&gt;</bpt>your<ept id="3">&lt;/i&gt;</ept> mileage may vary.</source>
<seg-source><mrk mid="0" mtype="seg">The choice is yours - but whatever you do <bpt id="1" ctype="bold">&lt;b&gt;</bpt>be careful<ept id="1">&lt;/b&gt;</ept>, and be sure to test this carefully on a non-production machine before implementing it anywhere important! Keep in mind that sendmail is a tricky beast and this may not work on your system without lots of modifications.</mrk><mrk mid="1" mtype="seg"> This works for <bpt id="2" ctype="italic">&lt;i&gt;</bpt>me<ept id="2">&lt;/i&gt;</ept>, but <bpt id="3" ctype="italic">&lt;i&gt;</bpt>your<ept id="3">&lt;/i&gt;</ept> mileage may vary.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The choice is yours - but whatever you do <bpt id="1" ctype="bold">&lt;b&gt;</bpt>be careful<ept id="1">&lt;/b&gt;</ept>, and be sure to test this carefully on a non-production machine before implementing it anywhere important! Keep in mind that sendmail is a tricky beast and this may not work on your system without lots of modifications.</mrk><mrk mid="1" mtype="seg"> This works for <bpt id="2" ctype="italic">&lt;i&gt;</bpt>me<ept id="2">&lt;/i&gt;</ept>, but <bpt id="3" ctype="italic">&lt;i&gt;</bpt>your<ept id="3">&lt;/i&gt;</ept> mileage may vary.</mrk></target>
</trans-unit>
<trans-unit id="tu200" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu201" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu202" restype="x-paragraph">
<source xml:lang="en">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, skip steps 2. and 3.<ph id="2" ctype="x-br">&lt;br&gt;</ph> If you <bpt id="3" ctype="bold">&lt;b&gt;</bpt>are not<ept id="3">&lt;/b&gt;</ept> using procmail, skip steps 4. and 5.</source>
<seg-source><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, skip steps 2.</mrk><mrk mid="1" mtype="seg"> and 3.</mrk><mrk mid="2" mtype="seg"><ph id="2" ctype="x-br">&lt;br&gt;</ph> If you <bpt id="3" ctype="bold">&lt;b&gt;</bpt>are not<ept id="3">&lt;/b&gt;</ept> using procmail, skip steps 4.</mrk><mrk mid="3" mtype="seg"> and 5.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, skip steps 2.</mrk><mrk mid="1" mtype="seg"> and 3.</mrk><mrk mid="2" mtype="seg"><ph id="2" ctype="x-br">&lt;br&gt;</ph> If you <bpt id="3" ctype="bold">&lt;b&gt;</bpt>are not<ept id="3">&lt;/b&gt;</ept> using procmail, skip steps 4.</mrk><mrk mid="3" mtype="seg"> and 5.</mrk></target>
</trans-unit>
<trans-unit id="tu203" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu204" restype="x-paragraph">
<source xml:lang="en">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.<ph id="3" ctype="x-br">&lt;br&gt;</ph> Create the following shell script, e.g. in <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/bin/sanitize<ept id="4">&lt;/tt&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Create the following shell script, e.g. in <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/bin/sanitize<ept id="4">&lt;/tt&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Create the following shell script, e.g. in <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>/usr/local/bin/sanitize<ept id="4">&lt;/tt&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu205" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu206">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu207" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  #!/bin/sh
  #
  export ANOMY=/path/to/anomy
  export CFG=/path/to/sanitizer/configuration
  exec $ANOMY/bin/sanitizer.pl $CFG | /path/to/sendmail -oi -f ${@+"$@"}
</source>
<seg-source><mrk mid="0" mtype="seg">  #!/bin/sh</mrk>
<mrk mid="1" mtype="seg">  #</mrk>
<mrk mid="2" mtype="seg">  export ANOMY=/path/to/anomy</mrk>
<mrk mid="3" mtype="seg">  export CFG=/path/to/sanitizer/configuration</mrk>
<mrk mid="4" mtype="seg">  exec $ANOMY/bin/sanitizer.pl $CFG | /path/to/sendmail -oi -f ${@+"$@"}</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  #!/bin/sh</mrk>
<mrk mid="1" mtype="seg">  #</mrk>
<mrk mid="2" mtype="seg">  export ANOMY=/path/to/anomy</mrk>
<mrk mid="3" mtype="seg">  export CFG=/path/to/sanitizer/configuration</mrk>
<mrk mid="4" mtype="seg">  exec $ANOMY/bin/sanitizer.pl $CFG | /path/to/sendmail -oi -f ${@+"$@"}</mrk>
</target>
</trans-unit>
<trans-unit id="tu208">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu209" restype="x-paragraph">
<source xml:lang="en">Be sure to set all the paths to whatever makes sense on your system. Don't forget to make the script executable (<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>chmod +x /usr/local/bin/sanitize<ept id="1">&lt;/tt&gt;</ept>).</source>
<seg-source><mrk mid="0" mtype="seg">Be sure to set all the paths to whatever makes sense on your system.</mrk><mrk mid="1" mtype="seg"> Don't forget to make the script executable (<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>chmod +x /usr/local/bin/sanitize<ept id="1">&lt;/tt&gt;</ept>).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Be sure to set all the paths to whatever makes sense on your system.</mrk><mrk mid="1" mtype="seg"> Don't forget to make the script executable (<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>chmod +x /usr/local/bin/sanitize<ept id="1">&lt;/tt&gt;</ept>).</mrk></target>
</trans-unit>
<trans-unit id="tu210" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu211" restype="x-paragraph">
<source xml:lang="en">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.<ph id="3" ctype="x-br">&lt;br&gt;</ph> Add the following mailer specification to <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept>. It's a good idea to add this to the part of the file containing the <bpt id="5" ctype="italic">&lt;i&gt;</bpt>other<ept id="5">&lt;/i&gt;</ept> mailer definitions.</source>
<seg-source><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Add the following mailer specification to <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> It's a good idea to add this to the part of the file containing the <bpt id="5" ctype="italic">&lt;i&gt;</bpt>other<ept id="5">&lt;/i&gt;</ept> mailer definitions.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Add the following mailer specification to <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> It's a good idea to add this to the part of the file containing the <bpt id="5" ctype="italic">&lt;i&gt;</bpt>other<ept id="5">&lt;/i&gt;</ept> mailer definitions.</mrk></target>
</trans-unit>
<trans-unit id="tu212" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu213">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu214" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  Msanitize,
     P=/usr/local/bin/sanitize, F=DFMmhu, 
     S=11/31, R=21/31, T=DNS/RFC822/X-Unix, A=sanitize $f $u
</source>
<seg-source><mrk mid="0" mtype="seg">  Msanitize,</mrk>
<mrk mid="1" mtype="seg">     P=/usr/local/bin/sanitize, F=DFMmhu,</mrk> 
<mrk mid="2" mtype="seg">     S=11/31, R=21/31, T=DNS/RFC822/X-Unix, A=sanitize $f $u</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  Msanitize,</mrk>
<mrk mid="1" mtype="seg">     P=/usr/local/bin/sanitize, F=DFMmhu,</mrk> 
<mrk mid="2" mtype="seg">     S=11/31, R=21/31, T=DNS/RFC822/X-Unix, A=sanitize $f $u</mrk>
</target>
</trans-unit>
<trans-unit id="tu215">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu216" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu217" restype="x-paragraph">
<source xml:lang="en">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are not<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.<ph id="3" ctype="x-br">&lt;br&gt;</ph> Create a procmail configuration file named <bpt id="4" ctype="bold">&lt;b&gt;</bpt>/etc/sanitizer.rc<ept id="4">&lt;/b&gt;</ept> like this:</source>
<seg-source><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are not<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Create a procmail configuration file named <bpt id="4" ctype="bold">&lt;b&gt;</bpt>/etc/sanitizer.rc<ept id="4">&lt;/b&gt;</ept> like this:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are not<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Create a procmail configuration file named <bpt id="4" ctype="bold">&lt;b&gt;</bpt>/etc/sanitizer.rc<ept id="4">&lt;/b&gt;</ept> like this:</mrk></target>
</trans-unit>
<trans-unit id="tu218" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu219">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu220" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  # Procmail filter rules for sanitizing email and then resending it.
  # Uncomment the following lines to enable logging or verbose logging.
  # VERBOSE=yes 
  # LOGFILE=/var/log/procmail-sanitizer.log
  
  ANOMY=/path/to/anomy/
  :0 f
  | $ANOMY/bin/sanitizer.pl /path/to/sanitizer/configuration

  :0 
  ! -oi -f "$@"
</source>
<seg-source><mrk mid="0" mtype="seg">  # Procmail filter rules for sanitizing email and then resending it.</mrk>
<mrk mid="1" mtype="seg">  # Uncomment the following lines to enable logging or verbose logging.</mrk>
<mrk mid="2" mtype="seg">  # VERBOSE=yes</mrk> 
<mrk mid="3" mtype="seg">  # LOGFILE=/var/log/procmail-sanitizer.log</mrk>
  
<mrk mid="4" mtype="seg">  ANOMY=/path/to/anomy/</mrk>
<mrk mid="5" mtype="seg">  :0 f</mrk>
<mrk mid="6" mtype="seg">  | $ANOMY/bin/sanitizer.pl /path/to/sanitizer/configuration</mrk>

<mrk mid="7" mtype="seg">  :0</mrk> 
<mrk mid="8" mtype="seg">  ! -oi -f "$@"</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  # Procmail filter rules for sanitizing email and then resending it.</mrk>
<mrk mid="1" mtype="seg">  # Uncomment the following lines to enable logging or verbose logging.</mrk>
<mrk mid="2" mtype="seg">  # VERBOSE=yes</mrk> 
<mrk mid="3" mtype="seg">  # LOGFILE=/var/log/procmail-sanitizer.log</mrk>
  
<mrk mid="4" mtype="seg">  ANOMY=/path/to/anomy/</mrk>
<mrk mid="5" mtype="seg">  :0 f</mrk>
<mrk mid="6" mtype="seg">  | $ANOMY/bin/sanitizer.pl /path/to/sanitizer/configuration</mrk>

<mrk mid="7" mtype="seg">  :0</mrk> 
<mrk mid="8" mtype="seg">  ! -oi -f "$@"</mrk>
</target>
</trans-unit>
<trans-unit id="tu221">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu222" restype="x-paragraph">
<source xml:lang="en">Be sure to set all the paths to whatever makes sense on your system.</source>
<seg-source><mrk mid="0" mtype="seg">Be sure to set all the paths to whatever makes sense on your system.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Be sure to set all the paths to whatever makes sense on your system.</mrk></target>
</trans-unit>
<trans-unit id="tu223" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu224" restype="x-paragraph">
<source xml:lang="en">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are not<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.<ph id="3" ctype="x-br">&lt;br&gt;</ph> Add the following mailer specification to <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept>, if it doesn't exist already. It's a good idea to add this to the part of the file containing the <bpt id="5" ctype="italic">&lt;i&gt;</bpt>other<ept id="5">&lt;/i&gt;</ept> mailer definitions. Be sure to adjust the path to the procmail binary to match your system.</source>
<seg-source><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are not<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Add the following mailer specification to <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept>, if it doesn't exist already.</mrk><mrk mid="2" mtype="seg"> It's a good idea to add this to the part of the file containing the <bpt id="5" ctype="italic">&lt;i&gt;</bpt>other<ept id="5">&lt;/i&gt;</ept> mailer definitions.</mrk><mrk mid="3" mtype="seg"> Be sure to adjust the path to the procmail binary to match your system.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you <bpt id="1" ctype="bold">&lt;b&gt;</bpt>are not<ept id="1">&lt;/b&gt;</ept> using procmail, <bpt id="2" ctype="bold">&lt;b&gt;</bpt>skip<ept id="2">&lt;/b&gt;</ept> this step.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Add the following mailer specification to <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept>, if it doesn't exist already.</mrk><mrk mid="2" mtype="seg"> It's a good idea to add this to the part of the file containing the <bpt id="5" ctype="italic">&lt;i&gt;</bpt>other<ept id="5">&lt;/i&gt;</ept> mailer definitions.</mrk><mrk mid="3" mtype="seg"> Be sure to adjust the path to the procmail binary to match your system.</mrk></target>
</trans-unit>
<trans-unit id="tu225" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu226">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu227" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  Mprocmail,
     P=/usr/bin/procmail, F=DFMmShu, 
     S=11/31, R=21/31, T=DNS/RFC822/X-Unix, A=procmail -m $h $f $u
</source>
<seg-source><mrk mid="0" mtype="seg">  Mprocmail,</mrk>
<mrk mid="1" mtype="seg">     P=/usr/bin/procmail, F=DFMmShu,</mrk> 
<mrk mid="2" mtype="seg">     S=11/31, R=21/31, T=DNS/RFC822/X-Unix, A=procmail -m $h $f $u</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  Mprocmail,</mrk>
<mrk mid="1" mtype="seg">     P=/usr/bin/procmail, F=DFMmShu,</mrk> 
<mrk mid="2" mtype="seg">     S=11/31, R=21/31, T=DNS/RFC822/X-Unix, A=procmail -m $h $f $u</mrk>
</target>
</trans-unit>
<trans-unit id="tu228">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu229" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu230" restype="x-paragraph">
<source xml:lang="en">Add the following rules to sendmail.cf, either in ruleset 98 (local hacks, on RedHat systems) or right before the virtual user stuff in ruleset 0:</source>
<seg-source><mrk mid="0" mtype="seg">Add the following rules to sendmail.cf, either in ruleset 98 (local hacks, on RedHat systems) or right before the virtual user stuff in ruleset 0:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Add the following rules to sendmail.cf, either in ruleset 98 (local hacks, on RedHat systems) or right before the virtual user stuff in ruleset 0:</mrk></target>
</trans-unit>
<trans-unit id="tu231" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu232">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu233" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  # Sanitize with procmail:
  #R$* &lt; @test.com. &gt; $* $#procmail $@/etc/sanitizer.rc $:$1&lt;@test.com.CLEAN.&gt;$2
  # Sanitize without procmail:
  #R$* &lt; @test.com. &gt; $* $#sanitize $@anomy $:$1&lt;@test.com.CLEAN.&gt;$2
  R$* &lt; @ $+ .CLEAN. &gt; $*   $1&lt;@$2.&gt;$3
  R$* &lt; @ $+ .CLEAN &gt; $*    $1&lt;@$2.&gt;$3 
                          ^
                           use TABS here!
</source>
<seg-source><mrk mid="0" mtype="seg">  # Sanitize with procmail:</mrk>
<mrk mid="1" mtype="seg">  #R$* &lt; @test.com.</mrk><mrk mid="2" mtype="seg"> &gt; $* $#procmail $@/etc/sanitizer.rc $:$1&lt;@test.com.CLEAN.&gt;$2</mrk>
<mrk mid="3" mtype="seg">  # Sanitize without procmail:</mrk>
<mrk mid="4" mtype="seg">  #R$* &lt; @test.com.</mrk><mrk mid="5" mtype="seg"> &gt; $* $#sanitize $@anomy $:$1&lt;@test.com.CLEAN.&gt;$2</mrk>
<mrk mid="6" mtype="seg">  R$* &lt; @ $+ .CLEAN.</mrk><mrk mid="7" mtype="seg"> &gt; $*   $1&lt;@$2.&gt;$3</mrk>
<mrk mid="8" mtype="seg">  R$* &lt; @ $+ .CLEAN &gt; $*    $1&lt;@$2.&gt;$3</mrk> 
<mrk mid="9" mtype="seg">                          ^</mrk>
<mrk mid="10" mtype="seg">                           use TABS here!</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  # Sanitize with procmail:</mrk>
<mrk mid="1" mtype="seg">  #R$* &lt; @test.com.</mrk><mrk mid="2" mtype="seg"> &gt; $* $#procmail $@/etc/sanitizer.rc $:$1&lt;@test.com.CLEAN.&gt;$2</mrk>
<mrk mid="3" mtype="seg">  # Sanitize without procmail:</mrk>
<mrk mid="4" mtype="seg">  #R$* &lt; @test.com.</mrk><mrk mid="5" mtype="seg"> &gt; $* $#sanitize $@anomy $:$1&lt;@test.com.CLEAN.&gt;$2</mrk>
<mrk mid="6" mtype="seg">  R$* &lt; @ $+ .CLEAN.</mrk><mrk mid="7" mtype="seg"> &gt; $*   $1&lt;@$2.&gt;$3</mrk>
<mrk mid="8" mtype="seg">  R$* &lt; @ $+ .CLEAN &gt; $*    $1&lt;@$2.&gt;$3</mrk> 
<mrk mid="9" mtype="seg">                          ^</mrk>
<mrk mid="10" mtype="seg">                           use TABS here!</mrk>
</target>
</trans-unit>
<trans-unit id="tu234">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu235" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Notes:<ept id="1">&lt;/b&gt;</ept> Only one of the two .CLEAN rules are necessary - which one seems slightly system-dependant. Having both won't hurt. Be sure to replace "test.com" with the domain for which you want to sanitize mail - the example will sanitize all messages destined for someone@test.com. Multiple domains can be specified by repeating the first line, once for each domain or by specifying a class of domains, as described below.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Notes:<ept id="1">&lt;/b&gt;</ept> Only one of the two .CLEAN rules are necessary - which one seems slightly system-dependant.</mrk><mrk mid="1" mtype="seg"> Having both won't hurt.</mrk><mrk mid="2" mtype="seg"> Be sure to replace "test.com" with the domain for which you want to sanitize mail - the example will sanitize all messages destined for someone@test.com.</mrk><mrk mid="3" mtype="seg"> Multiple domains can be specified by repeating the first line, once for each domain or by specifying a class of domains, as described below.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Notes:<ept id="1">&lt;/b&gt;</ept> Only one of the two .CLEAN rules are necessary - which one seems slightly system-dependant.</mrk><mrk mid="1" mtype="seg"> Having both won't hurt.</mrk><mrk mid="2" mtype="seg"> Be sure to replace "test.com" with the domain for which you want to sanitize mail - the example will sanitize all messages destined for someone@test.com.</mrk><mrk mid="3" mtype="seg"> Multiple domains can be specified by repeating the first line, once for each domain or by specifying a class of domains, as described below.</mrk></target>
</trans-unit>
<trans-unit id="tu236" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu237" restype="x-paragraph">
<source xml:lang="en">Add the user sendmail runs as, on the mail port, to the list of trusted users (the "<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>t<ept id="1">&lt;/tt&gt;</ept>" class - search <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="2">&lt;/tt&gt;</ept> for the phrase "Trusted users"). This instructs sendmail not to generate a warning header when the shell script sets the From-address when it resends the sanitized mail. On RedHat 6.x systems this user is named "mail". This step may not be necessary on some systems, but again, it won't hurt.</source>
<seg-source><mrk mid="0" mtype="seg">Add the user sendmail runs as, on the mail port, to the list of trusted users (the "<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>t<ept id="1">&lt;/tt&gt;</ept>" class - search <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="2">&lt;/tt&gt;</ept> for the phrase "Trusted users").</mrk><mrk mid="1" mtype="seg"> This instructs sendmail not to generate a warning header when the shell script sets the From-address when it resends the sanitized mail.</mrk><mrk mid="2" mtype="seg"> On RedHat 6.x systems this user is named "mail".</mrk><mrk mid="3" mtype="seg"> This step may not be necessary on some systems, but again, it won't hurt.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Add the user sendmail runs as, on the mail port, to the list of trusted users (the "<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>t<ept id="1">&lt;/tt&gt;</ept>" class - search <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="2">&lt;/tt&gt;</ept> for the phrase "Trusted users").</mrk><mrk mid="1" mtype="seg"> This instructs sendmail not to generate a warning header when the shell script sets the From-address when it resends the sanitized mail.</mrk><mrk mid="2" mtype="seg"> On RedHat 6.x systems this user is named "mail".</mrk><mrk mid="3" mtype="seg"> This step may not be necessary on some systems, but again, it won't hurt.</mrk></target>
</trans-unit>
<trans-unit id="tu238" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu239" restype="x-paragraph">
<source xml:lang="en">Finally, activate the sanitizing method you prefer (with or without procmail) by uncommenting (removing the leading <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>#<ept id="1">&lt;/tt&gt;</ept>-sign) the relevant line added in step 6 and then restart sendmail.</source>
<seg-source><mrk mid="0" mtype="seg">Finally, activate the sanitizing method you prefer (with or without procmail) by uncommenting (removing the leading <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>#<ept id="1">&lt;/tt&gt;</ept>-sign) the relevant line added in step 6 and then restart sendmail.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Finally, activate the sanitizing method you prefer (with or without procmail) by uncommenting (removing the leading <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>#<ept id="1">&lt;/tt&gt;</ept>-sign) the relevant line added in step 6 and then restart sendmail.</mrk></target>
</trans-unit>
<trans-unit id="tu240" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu241" restype="x-paragraph">
<source xml:lang="en">Please be careful to use TABs where necessary in the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="1">&lt;/tt&gt;</ept> file. In the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>Msanitize<ept id="2">&lt;/tt&gt;</ept> and <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>Mprocmail<ept id="3">&lt;/tt&gt;</ept> definitions above, the lines have been split to improve readability - either copy the entire text into a single line in your <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept> or be sure that the continuations begin with TAB characters, <bpt id="5" ctype="bold">&lt;b&gt;</bpt>not<ept id="5">&lt;/b&gt;</ept> spaces.</source>
<seg-source><mrk mid="0" mtype="seg">Please be careful to use TABs where necessary in the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="1">&lt;/tt&gt;</ept> file.</mrk><mrk mid="1" mtype="seg"> In the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>Msanitize<ept id="2">&lt;/tt&gt;</ept> and <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>Mprocmail<ept id="3">&lt;/tt&gt;</ept> definitions above, the lines have been split to improve readability - either copy the entire text into a single line in your <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept> or be sure that the continuations begin with TAB characters, <bpt id="5" ctype="bold">&lt;b&gt;</bpt>not<ept id="5">&lt;/b&gt;</ept> spaces.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Please be careful to use TABs where necessary in the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="1">&lt;/tt&gt;</ept> file.</mrk><mrk mid="1" mtype="seg"> In the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>Msanitize<ept id="2">&lt;/tt&gt;</ept> and <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>Mprocmail<ept id="3">&lt;/tt&gt;</ept> definitions above, the lines have been split to improve readability - either copy the entire text into a single line in your <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="4">&lt;/tt&gt;</ept> or be sure that the continuations begin with TAB characters, <bpt id="5" ctype="bold">&lt;b&gt;</bpt>not<ept id="5">&lt;/b&gt;</ept> spaces.</mrk></target>
</trans-unit>
<trans-unit id="tu242" restype="x-paragraph">
<source xml:lang="en">Although the above instructions all assume you are editing your <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="1">&lt;/tt&gt;</ept> file directly, they can easily be adapted for people using the (recommended) m4 method to configure sendmail. Simply append the mailer definitions to your m4 file in a section named <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>MAILER_DEFINITIONS<ept id="2">&lt;/tt&gt;</ept>, and the local hacks stuff to a section named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>LOCAL_RULE_0<ept id="3">&lt;/tt&gt;</ept>. People interested in m4 configuration might also find the <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>anomy.m4<ept id="4">&lt;/tt&gt;</ept> and <bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>sendmail-m4.txt<ept id="5">&lt;/tt&gt;</ept> files in the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="6">&lt;/tt&gt;</ept> directory of the distribution helpful.</source>
<seg-source><mrk mid="0" mtype="seg">Although the above instructions all assume you are editing your <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="1">&lt;/tt&gt;</ept> file directly, they can easily be adapted for people using the (recommended) m4 method to configure sendmail.</mrk><mrk mid="1" mtype="seg"> Simply append the mailer definitions to your m4 file in a section named <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>MAILER_DEFINITIONS<ept id="2">&lt;/tt&gt;</ept>, and the local hacks stuff to a section named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>LOCAL_RULE_0<ept id="3">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> People interested in m4 configuration might also find the <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>anomy.m4<ept id="4">&lt;/tt&gt;</ept> and <bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>sendmail-m4.txt<ept id="5">&lt;/tt&gt;</ept> files in the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="6">&lt;/tt&gt;</ept> directory of the distribution helpful.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Although the above instructions all assume you are editing your <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>sendmail.cf<ept id="1">&lt;/tt&gt;</ept> file directly, they can easily be adapted for people using the (recommended) m4 method to configure sendmail.</mrk><mrk mid="1" mtype="seg"> Simply append the mailer definitions to your m4 file in a section named <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>MAILER_DEFINITIONS<ept id="2">&lt;/tt&gt;</ept>, and the local hacks stuff to a section named <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>LOCAL_RULE_0<ept id="3">&lt;/tt&gt;</ept>.</mrk><mrk mid="2" mtype="seg"> People interested in m4 configuration might also find the <bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>anomy.m4<ept id="4">&lt;/tt&gt;</ept> and <bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>sendmail-m4.txt<ept id="5">&lt;/tt&gt;</ept> files in the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="6">&lt;/tt&gt;</ept> directory of the distribution helpful.</mrk></target>
</trans-unit>
<trans-unit id="tu243" restype="x-paragraph">
<source xml:lang="en">To match a class of domains (instead of just test.com), you could replace the first R$* line(s) with something like this:</source>
<seg-source><mrk mid="0" mtype="seg">To match a class of domains (instead of just test.com), you could replace the first R$* line(s) with something like this:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">To match a class of domains (instead of just test.com), you could replace the first R$* line(s) with something like this:</mrk></target>
</trans-unit>
<trans-unit id="tu244" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu245">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu246" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  # Sanitize with procmail:
  #R$* &lt; @ $=w . &gt; $*    $#procmail $@/etc/sanitizer.rc $:$1&lt;@$2.CLEAN.&gt;$3
  # Sanitize without procmail:
  #R$* &lt; @ $=w . &gt; $*    $#sanitize $@anomy $:$1&lt;@$2.CLEAN.&gt;$3
</source>
<seg-source><mrk mid="0" mtype="seg">  # Sanitize with procmail:</mrk>
<mrk mid="1" mtype="seg">  #R$* &lt; @ $=w .</mrk><mrk mid="2" mtype="seg"> &gt; $*    $#procmail $@/etc/sanitizer.rc $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
<mrk mid="3" mtype="seg">  # Sanitize without procmail:</mrk>
<mrk mid="4" mtype="seg">  #R$* &lt; @ $=w .</mrk><mrk mid="5" mtype="seg"> &gt; $*    $#sanitize $@anomy $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  # Sanitize with procmail:</mrk>
<mrk mid="1" mtype="seg">  #R$* &lt; @ $=w .</mrk><mrk mid="2" mtype="seg"> &gt; $*    $#procmail $@/etc/sanitizer.rc $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
<mrk mid="3" mtype="seg">  # Sanitize without procmail:</mrk>
<mrk mid="4" mtype="seg">  #R$* &lt; @ $=w .</mrk><mrk mid="5" mtype="seg"> &gt; $*    $#sanitize $@anomy $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
</target>
</trans-unit>
<trans-unit id="tu247">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu248" restype="x-paragraph">
<source xml:lang="en">This matches any host names in the "<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>w<ept id="1">&lt;/tt&gt;</ept>" class (traditionally <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/sendmail.cw<ept id="2">&lt;/tt&gt;</ept>). An "<bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>X<ept id="3">&lt;/tt&gt;</ept>" class can be defined with "<bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>CX host<ept id="4">&lt;/tt&gt;</ept>" or "<bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>FX/path/to/file<ept id="5">&lt;/tt&gt;</ept>" lines near the beginning of the sendmail configuration file. People using m4 configuration can add such definitions after the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>LOCAL_CONFIG<ept id="6">&lt;/tt&gt;</ept> directive in their m4 files.</source>
<seg-source><mrk mid="0" mtype="seg">This matches any host names in the "<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>w<ept id="1">&lt;/tt&gt;</ept>" class (traditionally <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/sendmail.cw<ept id="2">&lt;/tt&gt;</ept>).</mrk><mrk mid="1" mtype="seg"> An "<bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>X<ept id="3">&lt;/tt&gt;</ept>" class can be defined with "<bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>CX host<ept id="4">&lt;/tt&gt;</ept>" or "<bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>FX/path/to/file<ept id="5">&lt;/tt&gt;</ept>" lines near the beginning of the sendmail configuration file.</mrk><mrk mid="2" mtype="seg"> People using m4 configuration can add such definitions after the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>LOCAL_CONFIG<ept id="6">&lt;/tt&gt;</ept> directive in their m4 files.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This matches any host names in the "<bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>w<ept id="1">&lt;/tt&gt;</ept>" class (traditionally <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/sendmail.cw<ept id="2">&lt;/tt&gt;</ept>).</mrk><mrk mid="1" mtype="seg"> An "<bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>X<ept id="3">&lt;/tt&gt;</ept>" class can be defined with "<bpt id="4" ctype="x-tt">&lt;tt&gt;</bpt>CX host<ept id="4">&lt;/tt&gt;</ept>" or "<bpt id="5" ctype="x-tt">&lt;tt&gt;</bpt>FX/path/to/file<ept id="5">&lt;/tt&gt;</ept>" lines near the beginning of the sendmail configuration file.</mrk><mrk mid="2" mtype="seg"> People using m4 configuration can add such definitions after the <bpt id="6" ctype="x-tt">&lt;tt&gt;</bpt>LOCAL_CONFIG<ept id="6">&lt;/tt&gt;</ept> directive in their m4 files.</mrk></target>
</trans-unit>
<trans-unit id="tu249" restype="x-paragraph">
<source xml:lang="en">If you are somewhat reckless (or are sure you know what you are doing), you can just sanitize everything, like this:</source>
<seg-source><mrk mid="0" mtype="seg">If you are somewhat reckless (or are sure you know what you are doing), you can just sanitize everything, like this:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you are somewhat reckless (or are sure you know what you are doing), you can just sanitize everything, like this:</mrk></target>
</trans-unit>
<trans-unit id="tu250" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu251">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu252" restype="x-pre" xml:space="preserve">
<source xml:lang="en">  # Sanitize with procmail:
  #R$* &lt; @ $+ . &gt; $*    $#procmail $@/etc/sanitizer.rc $:$1&lt;@$2.CLEAN.&gt;$3
  # Sanitize without procmail:
  #R$* &lt; @ $+ . &gt; $*    $#sanitize $@anomy $:$1&lt;@$2.CLEAN.&gt;$3
</source>
<seg-source><mrk mid="0" mtype="seg">  # Sanitize with procmail:</mrk>
<mrk mid="1" mtype="seg">  #R$* &lt; @ $+ .</mrk><mrk mid="2" mtype="seg"> &gt; $*    $#procmail $@/etc/sanitizer.rc $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
<mrk mid="3" mtype="seg">  # Sanitize without procmail:</mrk>
<mrk mid="4" mtype="seg">  #R$* &lt; @ $+ .</mrk><mrk mid="5" mtype="seg"> &gt; $*    $#sanitize $@anomy $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">  # Sanitize with procmail:</mrk>
<mrk mid="1" mtype="seg">  #R$* &lt; @ $+ .</mrk><mrk mid="2" mtype="seg"> &gt; $*    $#procmail $@/etc/sanitizer.rc $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
<mrk mid="3" mtype="seg">  # Sanitize without procmail:</mrk>
<mrk mid="4" mtype="seg">  #R$* &lt; @ $+ .</mrk><mrk mid="5" mtype="seg"> &gt; $*    $#sanitize $@anomy $:$1&lt;@$2.CLEAN.&gt;$3</mrk>
</target>
</trans-unit>
<trans-unit id="tu253">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu254" restype="x-paragraph">
<source xml:lang="en">Please note that sanitizing everything like this is <bpt id="1" ctype="bold">&lt;b&gt;</bpt>not recommended<ept id="1">&lt;/b&gt;</ept>, since it will sanitize both incoming and outgoing email.</source>
<seg-source><mrk mid="0" mtype="seg">Please note that sanitizing everything like this is <bpt id="1" ctype="bold">&lt;b&gt;</bpt>not recommended<ept id="1">&lt;/b&gt;</ept>, since it will sanitize both incoming and outgoing email.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Please note that sanitizing everything like this is <bpt id="1" ctype="bold">&lt;b&gt;</bpt>not recommended<ept id="1">&lt;/b&gt;</ept>, since it will sanitize both incoming and outgoing email.</mrk></target>
</trans-unit>
<trans-unit id="tu255" restype="x-paragraph">
<source xml:lang="en">It is the author's humble opinion, that incoming and outgoing email should be handled in fundamentally different ways; incoming email should always be delivered to the recipient, if at all possible (but it's a good idea to defang the dangerous bits first), but outgoing email should be bounced back to the sender if it contains a virus or security hazard. You don't want to send partial messages out of your organization - you want to notify the sender so they can fix the problem and re-send the content as quickly as possible. Future revisions of this document will describe how to use the Sanitizer to simply block risky outgoing mail.</source>
<seg-source><mrk mid="0" mtype="seg">It is the author's humble opinion, that incoming and outgoing email should be handled in fundamentally different ways; incoming email should always be delivered to the recipient, if at all possible (but it's a good idea to defang the dangerous bits first), but outgoing email should be bounced back to the sender if it contains a virus or security hazard.</mrk><mrk mid="1" mtype="seg"> You don't want to send partial messages out of your organization - you want to notify the sender so they can fix the problem and re-send the content as quickly as possible.</mrk><mrk mid="2" mtype="seg"> Future revisions of this document will describe how to use the Sanitizer to simply block risky outgoing mail.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">It is the author's humble opinion, that incoming and outgoing email should be handled in fundamentally different ways; incoming email should always be delivered to the recipient, if at all possible (but it's a good idea to defang the dangerous bits first), but outgoing email should be bounced back to the sender if it contains a virus or security hazard.</mrk><mrk mid="1" mtype="seg"> You don't want to send partial messages out of your organization - you want to notify the sender so they can fix the problem and re-send the content as quickly as possible.</mrk><mrk mid="2" mtype="seg"> Future revisions of this document will describe how to use the Sanitizer to simply block risky outgoing mail.</mrk></target>
</trans-unit>
<trans-unit id="tu256" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp415]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp415]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp415]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu257">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu258" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt>In-transit sanitizing - qmail<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt>In-transit sanitizing - qmail<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt>In-transit sanitizing - qmail<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu259" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-qmail"&gt;</it> The following instructions describe one way to use the Anomy sanitizer with qmail to filter in-transit email. This is not the simplest way to sanitize mail destined for local users, but is quite useful on a gateway machine. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-qmail"&gt;</it> The following instructions describe one way to use the Anomy sanitizer with qmail to filter in-transit email.</mrk><mrk mid="1" mtype="seg"> This is not the simplest way to sanitize mail destined for local users, but is quite useful on a gateway machine.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-qmail"&gt;</it> The following instructions describe one way to use the Anomy sanitizer with qmail to filter in-transit email.</mrk><mrk mid="1" mtype="seg"> This is not the simplest way to sanitize mail destined for local users, but is quite useful on a gateway machine.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu260" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu261" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu262" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-qmail"&gt;</it> Install qmail with the qmail-queue-patch and qmail-qfilter. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-qmail"&gt;</it> Install qmail with the qmail-queue-patch and qmail-qfilter.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-qmail"&gt;</it> Install qmail with the qmail-queue-patch and qmail-qfilter.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu263" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt> From <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp427]</bpt>qmail.org<ept id="2">&lt;/a&gt;</ept>: "Bruce Guenter has written a patch which causes any program that would run qmail-queue to look for an environment variable QMAILQUEUE. If it is present, it is used in place of the string "bin/qmail-queue" when running qmail-queue. This could be used, for example, to add a program into the qmail-smtpd-&gt;qmail-queue pipeline that could do filtering, rewrite broken headers, etc."</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt> From <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp427]</bpt>qmail.org<ept id="2">&lt;/a&gt;</ept>: "Bruce Guenter has written a patch which causes any program that would run qmail-queue to look for an environment variable QMAILQUEUE.</mrk><mrk mid="1" mtype="seg"> If it is present, it is used in place of the string "bin/qmail-queue" when running qmail-queue.</mrk><mrk mid="2" mtype="seg"> This could be used, for example, to add a program into the qmail-smtpd-&gt;qmail-queue pipeline that could do filtering, rewrite broken headers, etc."</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-qmail"&gt;</bpt> From <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp427]</bpt>qmail.org<ept id="2">&lt;/a&gt;</ept>: "Bruce Guenter has written a patch which causes any program that would run qmail-queue to look for an environment variable QMAILQUEUE.</mrk><mrk mid="1" mtype="seg"> If it is present, it is used in place of the string "bin/qmail-queue" when running qmail-queue.</mrk><mrk mid="2" mtype="seg"> This could be used, for example, to add a program into the qmail-smtpd-&gt;qmail-queue pipeline that could do filtering, rewrite broken headers, etc."</mrk></target>
</trans-unit>
<trans-unit id="tu264" restype="x-paragraph">
<source xml:lang="en">This is just what we are going to use. You will find the qmail-queue-patch here: <bpt id="1" ctype="link">[#$dp430]</bpt>http://www.math.ntnu.no/mirror/www.qmail.org/qmailqueue-patch<ept id="1">&lt;/a&gt;</ept> (and on every other qmail-mirrior site).</source>
<seg-source><mrk mid="0" mtype="seg">This is just what we are going to use.</mrk><mrk mid="1" mtype="seg"> You will find the qmail-queue-patch here: <bpt id="1" ctype="link">[#$dp430]</bpt>http://www.math.ntnu.no/mirror/www.qmail.org/qmailqueue-patch<ept id="1">&lt;/a&gt;</ept> (and on every other qmail-mirrior site).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is just what we are going to use.</mrk><mrk mid="1" mtype="seg"> You will find the qmail-queue-patch here: <bpt id="1" ctype="link">[#$dp430]</bpt>http://www.math.ntnu.no/mirror/www.qmail.org/qmailqueue-patch<ept id="1">&lt;/a&gt;</ept> (and on every other qmail-mirrior site).</mrk></target>
</trans-unit>
<trans-unit id="tu265" restype="x-paragraph">
<source xml:lang="en">qmail-qfilter is found here: <bpt id="1" ctype="link">[#$dp433]</bpt>http://em.ca/~bruceg/qmail-qfilter/<ept id="1">&lt;/a&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">qmail-qfilter is found here: <bpt id="1" ctype="link">[#$dp433]</bpt>http://em.ca/~bruceg/qmail-qfilter/<ept id="1">&lt;/a&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">qmail-qfilter is found here: <bpt id="1" ctype="link">[#$dp433]</bpt>http://em.ca/~bruceg/qmail-qfilter/<ept id="1">&lt;/a&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu266" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu267" restype="x-paragraph">
<source xml:lang="en">Install tcpserver (ucspi).</source>
<seg-source><mrk mid="0" mtype="seg">Install tcpserver (ucspi).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Install tcpserver (ucspi).</mrk></target>
</trans-unit>
<trans-unit id="tu268" restype="x-paragraph">
<source xml:lang="en">You can find this here: <bpt id="1" ctype="link">[#$dp439]</bpt>http://em.ca/~bruceg/rpms/ucspi-tcp/<ept id="1">&lt;/a&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">You can find this here: <bpt id="1" ctype="link">[#$dp439]</bpt>http://em.ca/~bruceg/rpms/ucspi-tcp/<ept id="1">&lt;/a&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You can find this here: <bpt id="1" ctype="link">[#$dp439]</bpt>http://em.ca/~bruceg/rpms/ucspi-tcp/<ept id="1">&lt;/a&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu269" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu270" restype="x-paragraph">
<source xml:lang="en">Make tcpserver set the qmail-queue-parameter/variable</source>
<seg-source><mrk mid="0" mtype="seg">Make tcpserver set the qmail-queue-parameter/variable</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Make tcpserver set the qmail-queue-parameter/variable</mrk></target>
</trans-unit>
<trans-unit id="tu271" restype="x-paragraph">
<source xml:lang="en">This is done by editing the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/etc/tcpcontrol/smtp.rules<ept id="1">&lt;/tt&gt;</ept> file. The file should look something like:</source>
<seg-source><mrk mid="0" mtype="seg">This is done by editing the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/etc/tcpcontrol/smtp.rules<ept id="1">&lt;/tt&gt;</ept> file.</mrk><mrk mid="1" mtype="seg"> The file should look something like:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is done by editing the <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/etc/tcpcontrol/smtp.rules<ept id="1">&lt;/tt&gt;</ept> file.</mrk><mrk mid="1" mtype="seg"> The file should look something like:</mrk></target>
</trans-unit>
<trans-unit id="tu272" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu273">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu274" restype="x-pre" xml:space="preserve">
<source xml:lang="en"> # Myself going through the filter
 127.0.0.1:allow,RELAYCLIENT="",QMAILQUEUE="/var/qmail/filters/smtpd-queue"
 # Server(s) allowed to relay, but not going through the filter
 xxx.xxx.xxx.xxx:allow,RELAYCLIENT=""
 # Default (everyone else must go through)
 :allow,RELAYCLIENT="",QMAILQUEUE="/var/qmail/filters/smtpd-queue"
</source>
<seg-source><mrk mid="0" mtype="seg"> # Myself going through the filter</mrk>
<mrk mid="1" mtype="seg"> 127.0.0.1:allow,RELAYCLIENT="",QMAILQUEUE="/var/qmail/filters/smtpd-queue"</mrk>
<mrk mid="2" mtype="seg"> # Server(s) allowed to relay, but not going through the filter</mrk>
<mrk mid="3" mtype="seg"> xxx.xxx.xxx.xxx:allow,RELAYCLIENT=""</mrk>
<mrk mid="4" mtype="seg"> # Default (everyone else must go through)</mrk>
<mrk mid="5" mtype="seg"> :allow,RELAYCLIENT="",QMAILQUEUE="/var/qmail/filters/smtpd-queue"</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"> # Myself going through the filter</mrk>
<mrk mid="1" mtype="seg"> 127.0.0.1:allow,RELAYCLIENT="",QMAILQUEUE="/var/qmail/filters/smtpd-queue"</mrk>
<mrk mid="2" mtype="seg"> # Server(s) allowed to relay, but not going through the filter</mrk>
<mrk mid="3" mtype="seg"> xxx.xxx.xxx.xxx:allow,RELAYCLIENT=""</mrk>
<mrk mid="4" mtype="seg"> # Default (everyone else must go through)</mrk>
<mrk mid="5" mtype="seg"> :allow,RELAYCLIENT="",QMAILQUEUE="/var/qmail/filters/smtpd-queue"</mrk>
</target>
</trans-unit>
<trans-unit id="tu275">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu276" restype="x-paragraph">
<source xml:lang="en">Compile the file (tcpserver uses a compiled version of this file with a .cdb-extension). If you also use qmail-qmqpd or any other qmail daemon that receives incoming mail, be sure to edit and recompile the corrosponding rule file (e.g. <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/etc/tcpcontrol/qmqp.rules<ept id="1">&lt;/tt&gt;</ept>) and use the same value for QMAILQUEUE in both (or all) places.</source>
<seg-source><mrk mid="0" mtype="seg">Compile the file (tcpserver uses a compiled version of this file with a .cdb-extension).</mrk><mrk mid="1" mtype="seg"> If you also use qmail-qmqpd or any other qmail daemon that receives incoming mail, be sure to edit and recompile the corrosponding rule file (e.g. <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/etc/tcpcontrol/qmqp.rules<ept id="1">&lt;/tt&gt;</ept>) and use the same value for QMAILQUEUE in both (or all) places.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Compile the file (tcpserver uses a compiled version of this file with a .cdb-extension).</mrk><mrk mid="1" mtype="seg"> If you also use qmail-qmqpd or any other qmail daemon that receives incoming mail, be sure to edit and recompile the corrosponding rule file (e.g. <bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>/etc/tcpcontrol/qmqp.rules<ept id="1">&lt;/tt&gt;</ept>) and use the same value for QMAILQUEUE in both (or all) places.</mrk></target>
</trans-unit>
<trans-unit id="tu277" restype="x-paragraph">
<source xml:lang="en">Now you have tcpserver accepting connections, sending the incoming email with the QMAILQUEUE-variable set to the script "smtpd-queue".</source>
<seg-source><mrk mid="0" mtype="seg">Now you have tcpserver accepting connections, sending the incoming email with the QMAILQUEUE-variable set to the script "smtpd-queue".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Now you have tcpserver accepting connections, sending the incoming email with the QMAILQUEUE-variable set to the script "smtpd-queue".</mrk></target>
</trans-unit>
<trans-unit id="tu278" restype="x-paragraph">
<source xml:lang="en">The script smtpd-queue (or whatever you choose to call it) should look something like:</source>
<seg-source><mrk mid="0" mtype="seg">The script smtpd-queue (or whatever you choose to call it) should look something like:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The script smtpd-queue (or whatever you choose to call it) should look something like:</mrk></target>
</trans-unit>
<trans-unit id="tu279" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu280">
<source xml:lang="en"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu281" restype="x-pre" xml:space="preserve">
<source xml:lang="en">#!/bin/sh
exec /usr/bin/qmail-qfilter
    /var/qmail/filters/sanitizer /var/qmail/filters/sanitizer.cfg
</source>
<seg-source><mrk mid="0" mtype="seg">#!/bin/sh</mrk>
<mrk mid="1" mtype="seg">exec /usr/bin/qmail-qfilter</mrk>
<mrk mid="2" mtype="seg">    /var/qmail/filters/sanitizer /var/qmail/filters/sanitizer.cfg</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">#!/bin/sh</mrk>
<mrk mid="1" mtype="seg">exec /usr/bin/qmail-qfilter</mrk>
<mrk mid="2" mtype="seg">    /var/qmail/filters/sanitizer /var/qmail/filters/sanitizer.cfg</mrk>
</target>
</trans-unit>
<trans-unit id="tu282">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu283" restype="x-paragraph">
<source xml:lang="en">Note: the exec command has been split between lines for readability. It should all be in one line.</source>
<seg-source><mrk mid="0" mtype="seg">Note: the exec command has been split between lines for readability.</mrk><mrk mid="1" mtype="seg"> It should all be in one line.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note: the exec command has been split between lines for readability.</mrk><mrk mid="1" mtype="seg"> It should all be in one line.</mrk></target>
</trans-unit>
<trans-unit id="tu284" restype="x-paragraph">
<source xml:lang="en">What happens here is that qmail-qfilter passes the email to sanitizer (which starts with a config-file in this example). When sanitizer is finished with it, it is passed back qmail so it can be sent the usual way.</source>
<seg-source><mrk mid="0" mtype="seg">What happens here is that qmail-qfilter passes the email to sanitizer (which starts with a config-file in this example).</mrk><mrk mid="1" mtype="seg"> When sanitizer is finished with it, it is passed back qmail so it can be sent the usual way.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">What happens here is that qmail-qfilter passes the email to sanitizer (which starts with a config-file in this example).</mrk><mrk mid="1" mtype="seg"> When sanitizer is finished with it, it is passed back qmail so it can be sent the usual way.</mrk></target>
</trans-unit>
<trans-unit id="tu285" restype="x-li">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu286" restype="x-paragraph">
<source xml:lang="en">Configure qmail to act as a relay server.</source>
<seg-source><mrk mid="0" mtype="seg">Configure qmail to act as a relay server.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Configure qmail to act as a relay server.</mrk></target>
</trans-unit>
<trans-unit id="tu287" restype="x-paragraph">
<source xml:lang="en">Read the FAQ if you don't know how to do this.</source>
<seg-source><mrk mid="0" mtype="seg">Read the FAQ if you don't know how to do this.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Read the FAQ if you don't know how to do this.</mrk></target>
</trans-unit>
<trans-unit id="tu288" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu289" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp470]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp470]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp470]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu290">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu291" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt>In-transit sanitizing - others<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt>In-transit sanitizing - others<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt>In-transit sanitizing - others<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu292" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-others"&gt;</it> In general, the sanitizer should be able to work with any mail transfer agent that runs on Unix (and with minor tweaks, the sanitizer should be able to run just fine on e.g. Windows). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-others"&gt;</it> In general, the sanitizer should be able to work with any mail transfer agent that runs on Unix (and with minor tweaks, the sanitizer should be able to run just fine on e.g.</mrk><mrk mid="1" mtype="seg"> Windows).</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-others"&gt;</it> In general, the sanitizer should be able to work with any mail transfer agent that runs on Unix (and with minor tweaks, the sanitizer should be able to run just fine on e.g.</mrk><mrk mid="1" mtype="seg"> Windows).</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu293" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-others"&gt;</it> The thing to look for, are filtering hooks in your MTA. If your MTA has a filtering API already defined, then try and get it to spit messages out to the sanitizer on standard input and recapture the sanitizer's standard output. If that doesn't work, then you can probably wrap your local delivery agent with a shell script that passes messages through the sanitizer first. Use your imagination! Let me know how it goes. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-others"&gt;</it> The thing to look for, are filtering hooks in your MTA.</mrk><mrk mid="1" mtype="seg"> If your MTA has a filtering API already defined, then try and get it to spit messages out to the sanitizer on standard input and recapture the sanitizer's standard output.</mrk><mrk mid="2" mtype="seg"> If that doesn't work, then you can probably wrap your local delivery agent with a shell script that passes messages through the sanitizer first.</mrk><mrk mid="3" mtype="seg"> Use your imagination! Let me know how it goes.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="in-transit-others"&gt;</it> The thing to look for, are filtering hooks in your MTA.</mrk><mrk mid="1" mtype="seg"> If your MTA has a filtering API already defined, then try and get it to spit messages out to the sanitizer on standard input and recapture the sanitizer's standard output.</mrk><mrk mid="2" mtype="seg"> If that doesn't work, then you can probably wrap your local delivery agent with a shell script that passes messages through the sanitizer first.</mrk><mrk mid="3" mtype="seg"> Use your imagination! Let me know how it goes.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu294" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp480]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp480]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="in-transit-others"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp480]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu295">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu296" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> Performance - CPU <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> Performance - CPU <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> Performance - CPU <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu297" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> Perl may not be a very fast language, but if speed isn't critical it is a good choice for a program like this, since it has good pattern matching facilities and there are no buffer overflows to worry about. Implementing the scanner in C or C++ would be somewhat more efficient, but would be much harder to make as secure and flexible. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> Perl may not be a very fast language, but if speed isn't critical it is a good choice for a program like this, since it has good pattern matching facilities and there are no buffer overflows to worry about.</mrk><mrk mid="1" mtype="seg"> Implementing the scanner in C or C++ would be somewhat more efficient, but would be much harder to make as secure and flexible.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> Perl may not be a very fast language, but if speed isn't critical it is a good choice for a program like this, since it has good pattern matching facilities and there are no buffer overflows to worry about.</mrk><mrk mid="1" mtype="seg"> Implementing the scanner in C or C++ would be somewhat more efficient, but would be much harder to make as secure and flexible.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu298" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> But I still want the script lean enough to be useable on a production mail server with lots and lots of traffic. To achieve this I will try to keep the script's CPU usage O(length-of-message) and consumption of other resources as close to a constant as possible, so the script will scale well. I won't create temporary files unless/until I add support for third party virus scanners (like AMaViS has). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> But I still want the script lean enough to be useable on a production mail server with lots and lots of traffic.</mrk><mrk mid="1" mtype="seg"> To achieve this I will try to keep the script's CPU usage O(length-of-message) and consumption of other resources as close to a constant as possible, so the script will scale well.</mrk><mrk mid="2" mtype="seg"> I won't create temporary files unless/until I add support for third party virus scanners (like AMaViS has).</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> But I still want the script lean enough to be useable on a production mail server with lots and lots of traffic.</mrk><mrk mid="1" mtype="seg"> To achieve this I will try to keep the script's CPU usage O(length-of-message) and consumption of other resources as close to a constant as possible, so the script will scale well.</mrk><mrk mid="2" mtype="seg"> I won't create temporary files unless/until I add support for third party virus scanners (like AMaViS has).</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu299" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> I ran a few tests on revision 1.10 to see if my choice of language would make these design constraints pointless (basically, I wanted to answer the question of whether Perl can do the job or not). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> I ran a few tests on revision 1.10 to see if my choice of language would make these design constraints pointless (basically, I wanted to answer the question of whether Perl can do the job or not).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> I ran a few tests on revision 1.10 to see if my choice of language would make these design constraints pointless (basically, I wanted to answer the question of whether Perl can do the job or not).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu300">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu301" restype="x-h3">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>Test data:<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>Test data:<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>Test data:<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu302" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The sanitizer was tested on my 525Mhz Celeron (bus OC'ed to 95Mhz), with the following messages. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The sanitizer was tested on my 525Mhz Celeron (bus OC'ed to 95Mhz), with the following messages.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The sanitizer was tested on my 525Mhz Celeron (bus OC'ed to 95Mhz), with the following messages.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu303" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu304">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu305" restype="x-pre" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it>file         size         description
---------    ---------    -----------    
Dev.test1         2206    a plain RFC822 message with no attachment
Dev.test2        26227    3 parts:
                            a text part with a UU-encoded evil HTML snippet
                            a html part with evil html
                            a harmless plain text part
Dev.test3         2342    a multipart/signed message containing clean text
Dev.test4        17139    3 parts:
                            a uu-encoded text part
                            a plain text part with an UU-encoded perl script
                            an unencoded perl script (8bit, text/plain)
Dev.test6      4984617    a multipart mixed message with a big base64-encoded
                          jpeg attachment.
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it>file         size         description</mrk>
<mrk mid="1" mtype="seg">---------    ---------    -----------</mrk>    
<mrk mid="2" mtype="seg">Dev.test1         2206    a plain RFC822 message with no attachment</mrk>
<mrk mid="3" mtype="seg">Dev.test2        26227    3 parts:</mrk>
<mrk mid="4" mtype="seg">                            a text part with a UU-encoded evil HTML snippet</mrk>
<mrk mid="5" mtype="seg">                            a html part with evil html</mrk>
<mrk mid="6" mtype="seg">                            a harmless plain text part</mrk>
<mrk mid="7" mtype="seg">Dev.test3         2342    a multipart/signed message containing clean text</mrk>
<mrk mid="8" mtype="seg">Dev.test4        17139    3 parts:</mrk>
<mrk mid="9" mtype="seg">                            a uu-encoded text part</mrk>
<mrk mid="10" mtype="seg">                            a plain text part with an UU-encoded perl script</mrk>
<mrk mid="11" mtype="seg">                            an unencoded perl script (8bit, text/plain)</mrk>
<mrk mid="12" mtype="seg">Dev.test6      4984617    a multipart mixed message with a big base64-encoded</mrk>
<mrk mid="13" mtype="seg">                          jpeg attachment.</mrk><mrk mid="14" mtype="seg">
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it>file         size         description</mrk>
<mrk mid="1" mtype="seg">---------    ---------    -----------</mrk>    
<mrk mid="2" mtype="seg">Dev.test1         2206    a plain RFC822 message with no attachment</mrk>
<mrk mid="3" mtype="seg">Dev.test2        26227    3 parts:</mrk>
<mrk mid="4" mtype="seg">                            a text part with a UU-encoded evil HTML snippet</mrk>
<mrk mid="5" mtype="seg">                            a html part with evil html</mrk>
<mrk mid="6" mtype="seg">                            a harmless plain text part</mrk>
<mrk mid="7" mtype="seg">Dev.test3         2342    a multipart/signed message containing clean text</mrk>
<mrk mid="8" mtype="seg">Dev.test4        17139    3 parts:</mrk>
<mrk mid="9" mtype="seg">                            a uu-encoded text part</mrk>
<mrk mid="10" mtype="seg">                            a plain text part with an UU-encoded perl script</mrk>
<mrk mid="11" mtype="seg">                            an unencoded perl script (8bit, text/plain)</mrk>
<mrk mid="12" mtype="seg">Dev.test6      4984617    a multipart mixed message with a big base64-encoded</mrk>
<mrk mid="13" mtype="seg">                          jpeg attachment.</mrk><mrk mid="14" mtype="seg">
<it id="2" ctype="x-font" pos="close">&lt;/font&gt;</it><it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu306">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt><bpt id="2" ctype="x-font">&lt;font color="#000000"&gt;</bpt><ept id="2">&lt;/font&gt;</ept> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu307" restype="x-h3">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>Results:<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>Results:<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>Results:<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu308">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu309" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu310">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu311" restype="x-pre" xml:space="preserve">
<source xml:lang="en">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;/dev/null
0.10user 0.01system 0:00.10elapsed 101%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+0outputs (282major+194minor)pagefaults 0swaps

[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test1 &gt;/dev/null
0.12user 0.00system 0:00.14elapsed 85%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+0outputs (287major+201minor)pagefaults 0swaps

[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test2 &gt;/dev/null
0.47user 0.00system 0:00.47elapsed 98%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+0outputs (289major+283minor)pagefaults 0swaps

[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test3 &gt;/dev/null
0.13user 0.00system 0:00.12elapsed 101%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+0outputs (287major+204minor)pagefaults 0swaps

[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test4 &gt;/dev/null
0.20user 0.03system 0:00.25elapsed 91%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+0outputs (288major+223minor)pagefaults 0swaps

[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test6 &gt;/dev/null
12.63user 0.05system 0:13.00elapsed 97%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+0outputs (970major+257minor)pagefaults 0swaps 
</source>
<seg-source><mrk mid="0" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;/dev/null</mrk>
<mrk mid="1" mtype="seg">0.10user 0.01system 0:00.10elapsed 101%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="2" mtype="seg">0inputs+0outputs (282major+194minor)pagefaults 0swaps</mrk>

<mrk mid="3" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test1 &gt;/dev/null</mrk>
<mrk mid="4" mtype="seg">0.12user 0.00system 0:00.14elapsed 85%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="5" mtype="seg">0inputs+0outputs (287major+201minor)pagefaults 0swaps</mrk>

<mrk mid="6" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test2 &gt;/dev/null</mrk>
<mrk mid="7" mtype="seg">0.47user 0.00system 0:00.47elapsed 98%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="8" mtype="seg">0inputs+0outputs (289major+283minor)pagefaults 0swaps</mrk>

<mrk mid="9" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test3 &gt;/dev/null</mrk>
<mrk mid="10" mtype="seg">0.13user 0.00system 0:00.12elapsed 101%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="11" mtype="seg">0inputs+0outputs (287major+204minor)pagefaults 0swaps</mrk>

<mrk mid="12" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test4 &gt;/dev/null</mrk>
<mrk mid="13" mtype="seg">0.20user 0.03system 0:00.25elapsed 91%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="14" mtype="seg">0inputs+0outputs (288major+223minor)pagefaults 0swaps</mrk>

<mrk mid="15" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test6 &gt;/dev/null</mrk>
<mrk mid="16" mtype="seg">12.63user 0.05system 0:13.00elapsed 97%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="17" mtype="seg">0inputs+0outputs (970major+257minor)pagefaults 0swaps</mrk> 
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;/dev/null</mrk>
<mrk mid="1" mtype="seg">0.10user 0.01system 0:00.10elapsed 101%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="2" mtype="seg">0inputs+0outputs (282major+194minor)pagefaults 0swaps</mrk>

<mrk mid="3" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test1 &gt;/dev/null</mrk>
<mrk mid="4" mtype="seg">0.12user 0.00system 0:00.14elapsed 85%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="5" mtype="seg">0inputs+0outputs (287major+201minor)pagefaults 0swaps</mrk>

<mrk mid="6" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test2 &gt;/dev/null</mrk>
<mrk mid="7" mtype="seg">0.47user 0.00system 0:00.47elapsed 98%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="8" mtype="seg">0inputs+0outputs (289major+283minor)pagefaults 0swaps</mrk>

<mrk mid="9" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test3 &gt;/dev/null</mrk>
<mrk mid="10" mtype="seg">0.13user 0.00system 0:00.12elapsed 101%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="11" mtype="seg">0inputs+0outputs (287major+204minor)pagefaults 0swaps</mrk>

<mrk mid="12" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test4 &gt;/dev/null</mrk>
<mrk mid="13" mtype="seg">0.20user 0.03system 0:00.25elapsed 91%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="14" mtype="seg">0inputs+0outputs (288major+223minor)pagefaults 0swaps</mrk>

<mrk mid="15" mtype="seg">[bre@diskordiah bin]$ time ./sanitizer.pl &lt;../Dev.test6 &gt;/dev/null</mrk>
<mrk mid="16" mtype="seg">12.63user 0.05system 0:13.00elapsed 97%CPU (0avgtext+0avgdata 0maxresident)k</mrk>
<mrk mid="17" mtype="seg">0inputs+0outputs (970major+257minor)pagefaults 0swaps</mrk> 
</target>
</trans-unit>
<trans-unit id="tu312">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu313" restype="x-h3">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>What it all means:<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>What it all means:<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt>What it all means:<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu314" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The worst case (bytes/sec) is the smallest message, due to the overhead of starting perl and compiling the parser (about 0.10 seconds). This case only gives us a throughput of 15Kb/sec (kilobytes/sec), which is actually rather appalling (just imagine the case if we were forking 10 processes, instead of one). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The worst case (bytes/sec) is the smallest message, due to the overhead of starting perl and compiling the parser (about 0.10 seconds).</mrk><mrk mid="1" mtype="seg"> This case only gives us a throughput of 15Kb/sec (kilobytes/sec), which is actually rather appalling (just imagine the case if we were forking 10 processes, instead of one).</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The worst case (bytes/sec) is the smallest message, due to the overhead of starting perl and compiling the parser (about 0.10 seconds).</mrk><mrk mid="1" mtype="seg"> This case only gives us a throughput of 15Kb/sec (kilobytes/sec), which is actually rather appalling (just imagine the case if we were forking 10 processes, instead of one).</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu315" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The best case, Dev.text6, has a througput of over 350Kb/sec. Most of the work done in this case is just decoding/copying/encoding the Base64 attachment, without even examining the contents (it's a jpeg). The decoding and encoding could easily be optimized away for attachments we don't intend to sanitize (such as graphics). So large attachments aren't a problem, CPU-wise - not compared to the small messages anyway. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The best case, Dev.text6, has a througput of over 350Kb/sec.</mrk><mrk mid="1" mtype="seg"> Most of the work done in this case is just decoding/copying/encoding the Base64 attachment, without even examining the contents (it's a jpeg).</mrk><mrk mid="2" mtype="seg"> The decoding and encoding could easily be optimized away for attachments we don't intend to sanitize (such as graphics).</mrk><mrk mid="3" mtype="seg"> So large attachments aren't a problem, CPU-wise - not compared to the small messages anyway.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> The best case, Dev.text6, has a througput of over 350Kb/sec.</mrk><mrk mid="1" mtype="seg"> Most of the work done in this case is just decoding/copying/encoding the Base64 attachment, without even examining the contents (it's a jpeg).</mrk><mrk mid="2" mtype="seg"> The decoding and encoding could easily be optimized away for attachments we don't intend to sanitize (such as graphics).</mrk><mrk mid="3" mtype="seg"> So large attachments aren't a problem, CPU-wise - not compared to the small messages anyway.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu316" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> Since someone told me that the average size of email these days is close to 20k, then either Dev.test2 (55Kb/sec) or Dev.test4 (68Kb/sec) might be representative of the average throughput of the sanitizer on my system. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> Since someone told me that the average size of email these days is close to 20k, then either Dev.test2 (55Kb/sec) or Dev.test4 (68Kb/sec) might be representative of the average throughput of the sanitizer on my system.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> Since someone told me that the average size of email these days is close to 20k, then either Dev.test2 (55Kb/sec) or Dev.test4 (68Kb/sec) might be representative of the average throughput of the sanitizer on my system.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu317" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> So for any network connection under 1MB/sec (1 megabit), a dual 500Mhz PIII should be able to sanitize all the incoming mail, without any noticable delays and with cycles to spare - even during peak hours. If you don't mind a slight delay (and aren't expecting any mail bombs...) you can probably get away with less hardware, more bandwidth or both. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> So for any network connection under 1MB/sec (1 megabit), a dual 500Mhz PIII should be able to sanitize all the incoming mail, without any noticable delays and with cycles to spare - even during peak hours.</mrk><mrk mid="1" mtype="seg"> If you don't mind a slight delay (and aren't expecting any mail bombs...) you can probably get away with less hardware, more bandwidth or both.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="perf-cpu"&gt;</it> So for any network connection under 1MB/sec (1 megabit), a dual 500Mhz PIII should be able to sanitize all the incoming mail, without any noticable delays and with cycles to spare - even during peak hours.</mrk><mrk mid="1" mtype="seg"> If you don't mind a slight delay (and aren't expecting any mail bombs...) you can probably get away with less hardware, more bandwidth or both.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu318" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> Is this good enough? Please <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp510]</bpt>let me know<ept id="2">&lt;/a&gt;</ept> what you think.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> Is this good enough? Please <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp510]</bpt>let me know<ept id="2">&lt;/a&gt;</ept> what you think.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-cpu"&gt;</bpt> Is this good enough? Please <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp510]</bpt>let me know<ept id="2">&lt;/a&gt;</ept> what you think.</mrk></target>
</trans-unit>
<trans-unit id="tu319" restype="x-paragraph">
<source xml:lang="en">Since the performance is almost entirely CPU bound, throughput could be increased linearly by simply adding more processing power, e.g. by adding more or faster CPUs to your mail server, or by creating a sanitizer farm.</source>
<seg-source><mrk mid="0" mtype="seg">Since the performance is almost entirely CPU bound, throughput could be increased linearly by simply adding more processing power, e.g. by adding more or faster CPUs to your mail server, or by creating a sanitizer farm.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Since the performance is almost entirely CPU bound, throughput could be increased linearly by simply adding more processing power, e.g. by adding more or faster CPUs to your mail server, or by creating a sanitizer farm.</mrk></target>
</trans-unit>
<trans-unit id="tu320" restype="x-paragraph">
<source xml:lang="en">Another method to speed things up would be to change the sanitizer into some sort of daemon, thus avoiding the startup- and compilation costs of perl entirely. Since initialization accounts for 25-45% of the time it takes to process the "average message", and over 75% of the time for the small messages (which are very common), this would make quite a difference.</source>
<seg-source><mrk mid="0" mtype="seg">Another method to speed things up would be to change the sanitizer into some sort of daemon, thus avoiding the startup- and compilation costs of perl entirely.</mrk><mrk mid="1" mtype="seg"> Since initialization accounts for 25-45% of the time it takes to process the "average message", and over 75% of the time for the small messages (which are very common), this would make quite a difference.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Another method to speed things up would be to change the sanitizer into some sort of daemon, thus avoiding the startup- and compilation costs of perl entirely.</mrk><mrk mid="1" mtype="seg"> Since initialization accounts for 25-45% of the time it takes to process the "average message", and over 75% of the time for the small messages (which are very common), this would make quite a difference.</mrk></target>
</trans-unit>
<trans-unit id="tu321" restype="x-paragraph">
<source xml:lang="en">OTOH, the performance is only going to get worse, once external virus scanners are added to the mix...</source>
<seg-source><mrk mid="0" mtype="seg">OTOH, the performance is only going to get worse, once external virus scanners are added to the mix...</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OTOH, the performance is only going to get worse, once external virus scanners are added to the mix...</mrk></target>
</trans-unit>
<trans-unit id="tu322" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp519]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp519]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp519]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu323">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu324" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt> Performance - Memory <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt> Performance - Memory <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt> Performance - Memory <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu325" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt> <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Note:<ept id="2">&lt;/b&gt;</ept> <ept id="1">&lt;/a&gt;</ept><bpt id="3" ctype="link">[#$dp525]</bpt>read this<ept id="3">&lt;/a&gt;</ept> if you are having problems with excessive memory consumption when sanitizing very large messages.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt> <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Note:<ept id="2">&lt;/b&gt;</ept> <ept id="1">&lt;/a&gt;</ept><bpt id="3" ctype="link">[#$dp525]</bpt>read this<ept id="3">&lt;/a&gt;</ept> if you are having problems with excessive memory consumption when sanitizing very large messages.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="perf-memory"&gt;</bpt> <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Note:<ept id="2">&lt;/b&gt;</ept> <ept id="1">&lt;/a&gt;</ept><bpt id="3" ctype="link">[#$dp525]</bpt>read this<ept id="3">&lt;/a&gt;</ept> if you are having problems with excessive memory consumption when sanitizing very large messages.</mrk></target>
</trans-unit>
<trans-unit id="tu326" restype="x-paragraph">
<source xml:lang="en">While scanning the big message (Dev.test6), top consistantly reported memory usage as (SIZE, RSS, SHARE) = (2084, 2084, 1052). For Dev.test4 the numbers were (1952, 1952, 1056) and for Dev.test1 they were (1860, 1860, 1052).</source>
<seg-source><mrk mid="0" mtype="seg">While scanning the big message (Dev.test6), top consistantly reported memory usage as (SIZE, RSS, SHARE) = (2084, 2084, 1052).</mrk><mrk mid="1" mtype="seg"> For Dev.test4 the numbers were (1952, 1952, 1056) and for Dev.test1 they were (1860, 1860, 1052).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">While scanning the big message (Dev.test6), top consistantly reported memory usage as (SIZE, RSS, SHARE) = (2084, 2084, 1052).</mrk><mrk mid="1" mtype="seg"> For Dev.test4 the numbers were (1952, 1952, 1056) and for Dev.test1 they were (1860, 1860, 1052).</mrk></target>
</trans-unit>
<trans-unit id="tu327" restype="x-paragraph">
<source xml:lang="en">The difference is probably due to Dev.test6 maxing out all the IO buffers it had available, which the other tests were too small to do. I verified this theory by tripling the size of Dev.test6 - the resulting numbers were almost identical (2088 instead of 2084). Cool!</source>
<seg-source><mrk mid="0" mtype="seg">The difference is probably due to Dev.test6 maxing out all the IO buffers it had available, which the other tests were too small to do.</mrk><mrk mid="1" mtype="seg"> I verified this theory by tripling the size of Dev.test6 - the resulting numbers were almost identical (2088 instead of 2084).</mrk><mrk mid="2" mtype="seg"> Cool!</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The difference is probably due to Dev.test6 maxing out all the IO buffers it had available, which the other tests were too small to do.</mrk><mrk mid="1" mtype="seg"> I verified this theory by tripling the size of Dev.test6 - the resulting numbers were almost identical (2088 instead of 2084).</mrk><mrk mid="2" mtype="seg"> Cool!</mrk></target>
</trans-unit>
<trans-unit id="tu328" restype="x-paragraph">
<source xml:lang="en">This doesn't mean that more memory usage is impossible - the sanitizer allocates a new set of buffers for each level of nesting within the message. A memory DoS attack could be launched by deeply nesting uuencoded parts within each other - this could at the moment raise the memory (and CPU) usage arbitraily. But this would be a deliberate attack, such messages are rarely, if at all, created by normal mailers.</source>
<seg-source><mrk mid="0" mtype="seg">This doesn't mean that more memory usage is impossible - the sanitizer allocates a new set of buffers for each level of nesting within the message.</mrk><mrk mid="1" mtype="seg"> A memory DoS attack could be launched by deeply nesting uuencoded parts within each other - this could at the moment raise the memory (and CPU) usage arbitraily.</mrk><mrk mid="2" mtype="seg"> But this would be a deliberate attack, such messages are rarely, if at all, created by normal mailers.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This doesn't mean that more memory usage is impossible - the sanitizer allocates a new set of buffers for each level of nesting within the message.</mrk><mrk mid="1" mtype="seg"> A memory DoS attack could be launched by deeply nesting uuencoded parts within each other - this could at the moment raise the memory (and CPU) usage arbitraily.</mrk><mrk mid="2" mtype="seg"> But this would be a deliberate attack, such messages are rarely, if at all, created by normal mailers.</mrk></target>
</trans-unit>
<trans-unit id="tu329" restype="x-paragraph">
<source xml:lang="en">This could be addressed by adding a maximum recursion limit to the sanitizer, but I haven't done so yet and am not sure it's necessary. Aren't there easier ways to attack a mail server?</source>
<seg-source><mrk mid="0" mtype="seg">This could be addressed by adding a maximum recursion limit to the sanitizer, but I haven't done so yet and am not sure it's necessary.</mrk><mrk mid="1" mtype="seg"> Aren't there easier ways to attack a mail server?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This could be addressed by adding a maximum recursion limit to the sanitizer, but I haven't done so yet and am not sure it's necessary.</mrk><mrk mid="1" mtype="seg"> Aren't there easier ways to attack a mail server?</mrk></target>
</trans-unit>
<trans-unit id="tu330" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp536]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp536]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp536]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu331">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu332" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt>Virus scanning doesn't work!<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt>Virus scanning doesn't work!<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt>Virus scanning doesn't work!<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu333" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> The most common reason people have a hard time getting external virus scanners to work, is they enter incorrect <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>file_list_N_scanner<ept id="2">&lt;/tt&gt;</ept> and/or <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>file_list_N_policy<ept id="3">&lt;/tt&gt;</ept> lines. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> The most common reason people have a hard time getting external virus scanners to work, is they enter incorrect <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>file_list_N_scanner<ept id="2">&lt;/tt&gt;</ept> and/or <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>file_list_N_policy<ept id="3">&lt;/tt&gt;</ept> lines.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> The most common reason people have a hard time getting external virus scanners to work, is they enter incorrect <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>file_list_N_scanner<ept id="2">&lt;/tt&gt;</ept> and/or <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>file_list_N_policy<ept id="3">&lt;/tt&gt;</ept> lines.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu334" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> There must be <bpt id="2" ctype="bold">&lt;b&gt;</bpt>four<ept id="2">&lt;/b&gt;</ept> policies, and <bpt id="3" ctype="bold">&lt;b&gt;</bpt>three<ept id="3">&lt;/b&gt;</ept> groups of exit codes, otherwise the scan won't work. The rationale for having three code groups and four policies is that virus scan results fall into the following categories: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> There must be <bpt id="2" ctype="bold">&lt;b&gt;</bpt>four<ept id="2">&lt;/b&gt;</ept> policies, and <bpt id="3" ctype="bold">&lt;b&gt;</bpt>three<ept id="3">&lt;/b&gt;</ept> groups of exit codes, otherwise the scan won't work.</mrk><mrk mid="1" mtype="seg"> The rationale for having three code groups and four policies is that virus scan results fall into the following categories: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> There must be <bpt id="2" ctype="bold">&lt;b&gt;</bpt>four<ept id="2">&lt;/b&gt;</ept> policies, and <bpt id="3" ctype="bold">&lt;b&gt;</bpt>three<ept id="3">&lt;/b&gt;</ept> groups of exit codes, otherwise the scan won't work.</mrk><mrk mid="1" mtype="seg"> The rationale for having three code groups and four policies is that virus scan results fall into the following categories: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu335" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu336" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Clean files - no infections found. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Clean files - no infections found.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Clean files - no infections found.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu337" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Cleaned files - infectiosn found but were successfully disinfected. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Cleaned files - infectiosn found but were successfully disinfected.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Cleaned files - infectiosn found but were successfully disinfected.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu338" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Infected files - unremovable infections were found. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Infected files - unremovable infections were found.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Infected files - unremovable infections were found.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu339" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Errors. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Errors.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-scanner-codes"&gt;</it> Errors.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu340" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu341" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt> The <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp555]</bpt>real world configuration<ept id="2">&lt;/a&gt;</ept> example illustrates this.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt> The <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp555]</bpt>real world configuration<ept id="2">&lt;/a&gt;</ept> example illustrates this.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-scanner-codes"&gt;</bpt> The <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp555]</bpt>real world configuration<ept id="2">&lt;/a&gt;</ept> example illustrates this.</mrk></target>
</trans-unit>
<trans-unit id="tu342" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp558]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp558]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp558]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu343">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu344" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt>The testcases succeed, but I can't run the sanitizer!<ph id="2" ctype="x-br">&lt;br&gt;</ph> What is the ANOMY environment variable for?<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt>The testcases succeed, but I can't run the sanitizer!<ph id="2" ctype="x-br">&lt;br&gt;</ph> What is the ANOMY environment variable for?<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt>The testcases succeed, but I can't run the sanitizer!<ph id="2" ctype="x-br">&lt;br&gt;</ph> What is the ANOMY environment variable for?<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu345" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it> The ANOMY environment tells the Sanitizer script where to look for it's modules, MIMEStream.pm and Sanitizer.pm. Unless it is set, the Sanitizer won't run. The test cases all set this variable properly, which is why they succeed even though you can't run it yourself. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it> The ANOMY environment tells the Sanitizer script where to look for it's modules, MIMEStream.pm and Sanitizer.pm.</mrk><mrk mid="1" mtype="seg"> Unless it is set, the Sanitizer won't run.</mrk><mrk mid="2" mtype="seg"> The test cases all set this variable properly, which is why they succeed even though you can't run it yourself.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it> The ANOMY environment tells the Sanitizer script where to look for it's modules, MIMEStream.pm and Sanitizer.pm.</mrk><mrk mid="1" mtype="seg"> Unless it is set, the Sanitizer won't run.</mrk><mrk mid="2" mtype="seg"> The test cases all set this variable properly, which is why they succeed even though you can't run it yourself.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu346" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt> Alternatives: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt> Alternatives: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt> Alternatives: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu347" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it>Add the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/anomy/bin/<ept id="2">&lt;/tt&gt;</ept> directory to your PERL5LIB environment variable in some global place such as <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>/etc/profile<ept id="3">&lt;/tt&gt;</ept>. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it>Add the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/anomy/bin/<ept id="2">&lt;/tt&gt;</ept> directory to your PERL5LIB environment variable in some global place such as <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>/etc/profile<ept id="3">&lt;/tt&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it>Add the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/anomy/bin/<ept id="2">&lt;/tt&gt;</ept> directory to your PERL5LIB environment variable in some global place such as <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>/etc/profile<ept id="3">&lt;/tt&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu348" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it>Add a symbolic link to some other directory normally searched by Perl for libraries. The symbolic link should be named "Anomy" and should link to <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/anomy/bin/Anomy/<ept id="2">&lt;/tt&gt;</ept> directory. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it>Add a symbolic link to some other directory normally searched by Perl for libraries.</mrk><mrk mid="1" mtype="seg"> The symbolic link should be named "Anomy" and should link to <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/anomy/bin/Anomy/<ept id="2">&lt;/tt&gt;</ept> directory.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it>Add a symbolic link to some other directory normally searched by Perl for libraries.</mrk><mrk mid="1" mtype="seg"> The symbolic link should be named "Anomy" and should link to <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/path/to/anomy/bin/Anomy/<ept id="2">&lt;/tt&gt;</ept> directory.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu349">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu350" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu351" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it> Which method is best is simply a matter of taste. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it> Which method is best is simply a matter of taste.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="mh-anomy-env"&gt;</it> Which method is best is simply a matter of taste.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu352" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp575]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp575]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-anomy-env"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp575]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu353">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu354" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt> Solaris and Procmail <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt> Solaris and Procmail <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt> Solaris and Procmail <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu355" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt> A few users have reported that to get the Sanitizer to work from within procmail on Solaris the following lines must be added either to <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/procmailrc<ept id="2">&lt;/tt&gt;</ept> or the <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="3">&lt;/tt&gt;</ept> file which invokes the sanitizer: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt> A few users have reported that to get the Sanitizer to work from within procmail on Solaris the following lines must be added either to <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/procmailrc<ept id="2">&lt;/tt&gt;</ept> or the <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="3">&lt;/tt&gt;</ept> file which invokes the sanitizer: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt> A few users have reported that to get the Sanitizer to work from within procmail on Solaris the following lines must be added either to <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>/etc/procmailrc<ept id="2">&lt;/tt&gt;</ept> or the <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>.procmailrc<ept id="3">&lt;/tt&gt;</ept> file which invokes the sanitizer: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu356" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu357">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="pf-solaris-procmail"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="pf-solaris-procmail"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="pf-solaris-procmail"&gt;</it><it id="2" ctype="x-font" pos="open">&lt;font color="#000000"&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu358" restype="x-pre" xml:space="preserve">
<source xml:lang="en"> PATH="/usr/bin:$PATH"
 SHELL=/bin/sh
</source>
<seg-source><mrk mid="0" mtype="seg"> PATH="/usr/bin:$PATH"</mrk>
<mrk mid="1" mtype="seg"> SHELL=/bin/sh</mrk>
</seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"> PATH="/usr/bin:$PATH"</mrk>
<mrk mid="1" mtype="seg"> SHELL=/bin/sh</mrk>
</target>
</trans-unit>
<trans-unit id="tu359">
<source xml:lang="en"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-font" pos="close">&lt;/font&gt;</it> <it id="2" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu360" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="pf-solaris-procmail"&gt;</it> Special thanks to <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Peter Burkholde<ept id="2">&lt;/b&gt;</ept> for his detailed feedback. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="pf-solaris-procmail"&gt;</it> Special thanks to <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Peter Burkholde<ept id="2">&lt;/b&gt;</ept> for his detailed feedback.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="pf-solaris-procmail"&gt;</it> Special thanks to <bpt id="2" ctype="bold">&lt;b&gt;</bpt>Peter Burkholde<ept id="2">&lt;/b&gt;</ept> for his detailed feedback.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu361" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp587]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp587]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-solaris-procmail"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp587]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu362">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu363" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt> Incoming mail and Postfix <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt> Incoming mail and Postfix <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt> Incoming mail and Postfix <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu364" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt>Patrick Duane Dunston &lt;<ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp593]</bpt>duane@duane.yi.org<ept id="2">&lt;/a&gt;</ept>&gt; and Bill Kenworthy contributed a short how-to on configuring Postfix to filter messages through the sanitizer before delivery. Their instructions may be found in the <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="3">&lt;/tt&gt;</ept> directory of the program distribution.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt>Patrick Duane Dunston &lt;<ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp593]</bpt>duane@duane.yi.org<ept id="2">&lt;/a&gt;</ept>&gt; and Bill Kenworthy contributed a short how-to on configuring Postfix to filter messages through the sanitizer before delivery.</mrk><mrk mid="1" mtype="seg"> Their instructions may be found in the <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="3">&lt;/tt&gt;</ept> directory of the program distribution.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="pf-postfix"&gt;</bpt>Patrick Duane Dunston &lt;<ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp593]</bpt>duane@duane.yi.org<ept id="2">&lt;/a&gt;</ept>&gt; and Bill Kenworthy contributed a short how-to on configuring Postfix to filter messages through the sanitizer before delivery.</mrk><mrk mid="1" mtype="seg"> Their instructions may be found in the <bpt id="3" ctype="x-tt">&lt;tt&gt;</bpt>contrib/<ept id="3">&lt;/tt&gt;</ept> directory of the program distribution.</mrk></target>
</trans-unit>
<trans-unit id="tu365" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp596]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp596]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp596]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu366">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-memory-hog"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-memory-hog"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-memory-hog"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu367" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-memory-hog"&gt;</bpt>Large messages and memory consumption<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-memory-hog"&gt;</bpt>Large messages and memory consumption<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-memory-hog"&gt;</bpt>Large messages and memory consumption<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu368" restype="x-paragraph">
<source xml:lang="en">Some people have reported problems with very large messages and excessive memory consumption when invoking the sanitizer from within procmail. These problem is caused by procmail, not the sanitizer. If you have this problem, consider limiting incoming message size to something that will fit in your mail server's memory or invoking the sanitizer directly (without procmail).</source>
<seg-source><mrk mid="0" mtype="seg">Some people have reported problems with very large messages and excessive memory consumption when invoking the sanitizer from within procmail.</mrk><mrk mid="1" mtype="seg"> These problem is caused by procmail, not the sanitizer.</mrk><mrk mid="2" mtype="seg"> If you have this problem, consider limiting incoming message size to something that will fit in your mail server's memory or invoking the sanitizer directly (without procmail).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some people have reported problems with very large messages and excessive memory consumption when invoking the sanitizer from within procmail.</mrk><mrk mid="1" mtype="seg"> These problem is caused by procmail, not the sanitizer.</mrk><mrk mid="2" mtype="seg"> If you have this problem, consider limiting incoming message size to something that will fit in your mail server's memory or invoking the sanitizer directly (without procmail).</mrk></target>
</trans-unit>
<trans-unit id="tu369" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp604]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp604]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp604]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu370">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-html-uuencode"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-html-uuencode"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-html-uuencode"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu371" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-html-uuencode"&gt;</bpt>Corrupt attachments from Outlook users<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-html-uuencode"&gt;</bpt>Corrupt attachments from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-html-uuencode"&gt;</bpt>Corrupt attachments from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu372" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Q:<ept id="1">&lt;/b&gt;</ept> <it id="2" ctype="italic" pos="open">&lt;i&gt;</it> My problem is that attachments from Exchange/Outlook users get corrupted. The end result is that the document is completely unreadable when detached. One of the symptoms is that it ends up with the word "DEFANGED" being inserted into the body of the attachment:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Q:<ept id="1">&lt;/b&gt;</ept> <it id="2" ctype="italic" pos="open">&lt;i&gt;</it> My problem is that attachments from Exchange/Outlook users get corrupted.</mrk><mrk mid="1" mtype="seg"> The end result is that the document is completely unreadable when detached.</mrk><mrk mid="2" mtype="seg"> One of the symptoms is that it ends up with the word "DEFANGED" being inserted into the body of the attachment:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Q:<ept id="1">&lt;/b&gt;</ept> <it id="2" ctype="italic" pos="open">&lt;i&gt;</it> My problem is that attachments from Exchange/Outlook users get corrupted.</mrk><mrk mid="1" mtype="seg"> The end result is that the document is completely unreadable when detached.</mrk><mrk mid="2" mtype="seg"> One of the symptoms is that it ends up with the word "DEFANGED" being inserted into the body of the attachment:</mrk></target>
</trans-unit>
<trans-unit id="tu373">
<source xml:lang="en"><bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>M````````````````&gt;&lt;DEFANGED.35 M`````````````````````````<ept id="1">&lt;/tt&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>M````````````````&gt;&lt;DEFANGED.35 M`````````````````````````<ept id="1">&lt;/tt&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-tt">&lt;tt&gt;</bpt>M````````````````&gt;&lt;DEFANGED.35 M`````````````````````````<ept id="1">&lt;/tt&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu374">
<source xml:lang="en"><it id="1" ctype="italic" pos="close">&lt;/i&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="italic" pos="close">&lt;/i&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="italic" pos="close">&lt;/i&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu375" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>A:<ept id="1">&lt;/b&gt;</ept> This is HTML defanging, defanging the contents of an UU-encoded attachment. This only happens when the following conditions are all met:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>A:<ept id="1">&lt;/b&gt;</ept> This is HTML defanging, defanging the contents of an UU-encoded attachment.</mrk><mrk mid="1" mtype="seg"> This only happens when the following conditions are all met:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>A:<ept id="1">&lt;/b&gt;</ept> This is HTML defanging, defanging the contents of an UU-encoded attachment.</mrk><mrk mid="1" mtype="seg"> This only happens when the following conditions are all met:</mrk></target>
</trans-unit>
<trans-unit id="tu376" restype="x-li">
<source xml:lang="en">Users send attachments UU-encoded, instead of using the standard MIME encoding.</source>
<seg-source><mrk mid="0" mtype="seg">Users send attachments UU-encoded, instead of using the standard MIME encoding.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Users send attachments UU-encoded, instead of using the standard MIME encoding.</mrk></target>
</trans-unit>
<trans-unit id="tu377" restype="x-li">
<source xml:lang="en">HTML defanging is on (feat_html=1).</source>
<seg-source><mrk mid="0" mtype="seg">HTML defanging is on (feat_html=1).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">HTML defanging is on (feat_html=1).</mrk></target>
</trans-unit>
<trans-unit id="tu378" restype="x-li">
<source xml:lang="en">UUencoded attachment support is off (feat_uuencoded=0).</source>
<seg-source><mrk mid="0" mtype="seg">UUencoded attachment support is off (feat_uuencoded=0).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UUencoded attachment support is off (feat_uuencoded=0).</mrk></target>
</trans-unit>
<trans-unit id="tu379" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu380" restype="x-paragraph">
<source xml:lang="en">The solution is to turn on uuencoded attachment support, or turn off HTML defanging. The latter is not recommended.</source>
<seg-source><mrk mid="0" mtype="seg">The solution is to turn on uuencoded attachment support, or turn off HTML defanging.</mrk><mrk mid="1" mtype="seg"> The latter is not recommended.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The solution is to turn on uuencoded attachment support, or turn off HTML defanging.</mrk><mrk mid="1" mtype="seg"> The latter is not recommended.</mrk></target>
</trans-unit>
<trans-unit id="tu381" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp624]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp624]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp624]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu382">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-style-tag"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-style-tag"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-style-tag"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu383" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="mh-style-tag"&gt;</bpt>Ugly HTML mail from Outlook users<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-style-tag"&gt;</bpt>Ugly HTML mail from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="mh-style-tag"&gt;</bpt>Ugly HTML mail from Outlook users<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu384" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Note:<ept id="1">&lt;/b&gt;</ept> This problem was hopefully solved when the HTML cleanup code was rewritten for revision 1.45 of the sanitizer.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Note:<ept id="1">&lt;/b&gt;</ept> This problem was hopefully solved when the HTML cleanup code was rewritten for revision 1.45 of the sanitizer.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Note:<ept id="1">&lt;/b&gt;</ept> This problem was hopefully solved when the HTML cleanup code was rewritten for revision 1.45 of the sanitizer.</mrk></target>
</trans-unit>
<trans-unit id="tu385" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Q:<ept id="1">&lt;/b&gt;</ept> <it id="2" ctype="italic" pos="open">&lt;i&gt;</it>I'm not sure if this is a bug per se, but mail received from Outlook XP using Word as the editor in HTML format looks very ugly. I've attached an example. I'm using anomy 1.35. I'd really appreciate any hints on how to configure or patch anomy to handle this!<it id="2" ctype="italic" pos="close">&lt;/i&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Q:<ept id="1">&lt;/b&gt;</ept> <it id="2" ctype="italic" pos="open">&lt;i&gt;</it>I'm not sure if this is a bug per se, but mail received from Outlook XP using Word as the editor in HTML format looks very ugly.</mrk><mrk mid="1" mtype="seg"> I've attached an example.</mrk><mrk mid="2" mtype="seg"> I'm using anomy 1.35.</mrk><mrk mid="3" mtype="seg"> I'd really appreciate any hints on how to configure or patch anomy to handle this!<it id="2" ctype="italic" pos="close">&lt;/i&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>Q:<ept id="1">&lt;/b&gt;</ept> <it id="2" ctype="italic" pos="open">&lt;i&gt;</it>I'm not sure if this is a bug per se, but mail received from Outlook XP using Word as the editor in HTML format looks very ugly.</mrk><mrk mid="1" mtype="seg"> I've attached an example.</mrk><mrk mid="2" mtype="seg"> I'm using anomy 1.35.</mrk><mrk mid="3" mtype="seg"> I'd really appreciate any hints on how to configure or patch anomy to handle this!<it id="2" ctype="italic" pos="close">&lt;/i&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu386" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>A:<ept id="1">&lt;/b&gt;</ept> This is a known issue with the sanitizer, inherited from John Hardin's procmail ruleset.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>A:<ept id="1">&lt;/b&gt;</ept> This is a known issue with the sanitizer, inherited from John Hardin's procmail ruleset.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="bold">&lt;b&gt;</bpt>A:<ept id="1">&lt;/b&gt;</ept> This is a known issue with the sanitizer, inherited from John Hardin's procmail ruleset.</mrk></target>
</trans-unit>
<trans-unit id="tu387" restype="x-paragraph">
<source xml:lang="en">It has to do with the defanging of &lt;STYLE&gt;...&lt;/STYLE&gt; blocks, which were invented by someone with no clue of HTML design philosopy. Instead of the style settings being attributes or "funny tags" they are simply written out as a CSS definition following the &lt;STYLE&gt; tag - when the &lt;STYLE&gt; tag gets defanged, the CSS info is revealed as text where it used to be invisible.</source>
<seg-source><mrk mid="0" mtype="seg">It has to do with the defanging of &lt;STYLE&gt;...&lt;/STYLE&gt; blocks, which were invented by someone with no clue of HTML design philosopy.</mrk><mrk mid="1" mtype="seg"> Instead of the style settings being attributes or "funny tags" they are simply written out as a CSS definition following the &lt;STYLE&gt; tag - when the &lt;STYLE&gt; tag gets defanged, the CSS info is revealed as text where it used to be invisible.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">It has to do with the defanging of &lt;STYLE&gt;...&lt;/STYLE&gt; blocks, which were invented by someone with no clue of HTML design philosopy.</mrk><mrk mid="1" mtype="seg"> Instead of the style settings being attributes or "funny tags" they are simply written out as a CSS definition following the &lt;STYLE&gt; tag - when the &lt;STYLE&gt; tag gets defanged, the CSS info is revealed as text where it used to be invisible.</mrk></target>
</trans-unit>
<trans-unit id="tu388" restype="x-paragraph">
<source xml:lang="en">The reason this is all so stupid is <bpt id="1" ctype="italic">&lt;i&gt;</bpt>the exact same thing happens<ept id="1">&lt;/i&gt;</ept> if the un-defanged HTML is viewed in a browser that doesn't know about STYLE tags.</source>
<seg-source><mrk mid="0" mtype="seg">The reason this is all so stupid is <bpt id="1" ctype="italic">&lt;i&gt;</bpt>the exact same thing happens<ept id="1">&lt;/i&gt;</ept> if the un-defanged HTML is viewed in a browser that doesn't know about STYLE tags.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The reason this is all so stupid is <bpt id="1" ctype="italic">&lt;i&gt;</bpt>the exact same thing happens<ept id="1">&lt;/i&gt;</ept> if the un-defanged HTML is viewed in a browser that doesn't know about STYLE tags.</mrk></target>
</trans-unit>
<trans-unit id="tu389" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp640]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp640]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp640]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu390">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu391" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt>Hacking the Anomy sanitizer<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt>Hacking the Anomy sanitizer<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt>Hacking the Anomy sanitizer<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu392" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hacking"&gt;</it> These are short introductory chapters, for those interested in hacking on the Anomy sanitizer. The source code is somewhat commented, but it's probably pretty hard to grasp the overall organization of the code by jumping right in. So start here. :-) <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hacking"&gt;</it> These are short introductory chapters, for those interested in hacking on the Anomy sanitizer.</mrk><mrk mid="1" mtype="seg"> The source code is somewhat commented, but it's probably pretty hard to grasp the overall organization of the code by jumping right in.</mrk><mrk mid="2" mtype="seg"> So start here.</mrk><mrk mid="3" mtype="seg"> :-) <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hacking"&gt;</it> These are short introductory chapters, for those interested in hacking on the Anomy sanitizer.</mrk><mrk mid="1" mtype="seg"> The source code is somewhat commented, but it's probably pretty hard to grasp the overall organization of the code by jumping right in.</mrk><mrk mid="2" mtype="seg"> So start here.</mrk><mrk mid="3" mtype="seg"> :-) <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu393" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu394" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp650]</bpt>Basic design<ept id="2">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp650]</bpt>Basic design<ept id="2">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hacking"&gt;</bpt> <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp650]</bpt>Basic design<ept id="2">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu395" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp652]</bpt>Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp652]</bpt>Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp652]</bpt>Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu396" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp654]</bpt>Rough edges<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp654]</bpt>Rough edges<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp654]</bpt>Rough edges<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu397" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">[#$dp656]</bpt>Standards<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp656]</bpt>Standards<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">[#$dp656]</bpt>Standards<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu398" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu399" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp661]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp661]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp661]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu400">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu401" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt>Hacking - Basic design<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt>Hacking - Basic design<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt>Hacking - Basic design<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu402" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The sanitizer is built around my MIMEStream (Anomy::MIMEStream) module, which lives in the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>anomy/bin/Anomy/<ept id="2">&lt;/tt&gt;</ept> directory. This module was designed to allow parsing and editing of arbitrarily complex MIME streams. It contains facilities for decoding MIME streams, as well as routines for rebuilding or creating such streams from scratch. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The sanitizer is built around my MIMEStream (Anomy::MIMEStream) module, which lives in the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>anomy/bin/Anomy/<ept id="2">&lt;/tt&gt;</ept> directory.</mrk><mrk mid="1" mtype="seg"> This module was designed to allow parsing and editing of arbitrarily complex MIME streams.</mrk><mrk mid="2" mtype="seg"> It contains facilities for decoding MIME streams, as well as routines for rebuilding or creating such streams from scratch.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The sanitizer is built around my MIMEStream (Anomy::MIMEStream) module, which lives in the <bpt id="2" ctype="x-tt">&lt;tt&gt;</bpt>anomy/bin/Anomy/<ept id="2">&lt;/tt&gt;</ept> directory.</mrk><mrk mid="1" mtype="seg"> This module was designed to allow parsing and editing of arbitrarily complex MIME streams.</mrk><mrk mid="2" mtype="seg"> It contains facilities for decoding MIME streams, as well as routines for rebuilding or creating such streams from scratch.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu403" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The MIMEStream module contains a MIME parsing engine which interprets the basic RFC822/MIME structure of the message and hands each part to a handler provided by the application using it (in this case the sanitizer). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The MIMEStream module contains a MIME parsing engine which interprets the basic RFC822/MIME structure of the message and hands each part to a handler provided by the application using it (in this case the sanitizer).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The MIMEStream module contains a MIME parsing engine which interprets the basic RFC822/MIME structure of the message and hands each part to a handler provided by the application using it (in this case the sanitizer).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu404" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> Handlers are selected based on the MIME-type of the given part. At initialization, the sanitizer registers it's handlers with the parsing engine, and then essentially says "Go forth and parse" - and that's that. The actual flow of the program is controlled by MIMEStream, but most of the work takes place within the part handlers. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> Handlers are selected based on the MIME-type of the given part.</mrk><mrk mid="1" mtype="seg"> At initialization, the sanitizer registers it's handlers with the parsing engine, and then essentially says "Go forth and parse" - and that's that.</mrk><mrk mid="2" mtype="seg"> The actual flow of the program is controlled by MIMEStream, but most of the work takes place within the part handlers.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> Handlers are selected based on the MIME-type of the given part.</mrk><mrk mid="1" mtype="seg"> At initialization, the sanitizer registers it's handlers with the parsing engine, and then essentially says "Go forth and parse" - and that's that.</mrk><mrk mid="2" mtype="seg"> The actual flow of the program is controlled by MIMEStream, but most of the work takes place within the part handlers.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu405" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> Each handler makes use of Read() and Write() functions provided by the parser engine, to read the decoded message part, possibly modify it, and send the results back to the parser. The parser re-encodes the data and ultimately sends the results to the output stream. The Read() and Write() functions hide all buffering, decoding and encoding involved in "stream editing" a typical MIME message. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> Each handler makes use of Read() and Write() functions provided by the parser engine, to read the decoded message part, possibly modify it, and send the results back to the parser.</mrk><mrk mid="1" mtype="seg"> The parser re-encodes the data and ultimately sends the results to the output stream.</mrk><mrk mid="2" mtype="seg"> The Read() and Write() functions hide all buffering, decoding and encoding involved in "stream editing" a typical MIME message.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> Each handler makes use of Read() and Write() functions provided by the parser engine, to read the decoded message part, possibly modify it, and send the results back to the parser.</mrk><mrk mid="1" mtype="seg"> The parser re-encodes the data and ultimately sends the results to the output stream.</mrk><mrk mid="2" mtype="seg"> The Read() and Write() functions hide all buffering, decoding and encoding involved in "stream editing" a typical MIME message.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu406" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The decoding and encoding mechanism is designed to handle nested encodings, even though such messages would violate the MIME standard (you aren't allowed to e.g. Base64-encode a multipart/ part). The need for this becomes apparent when you consider that non-MIME attachments (uuencoded files, forwarded messages) should be scanned as well. For example, a well formed MIME message may have a Base64 encoded text/plain part, which itself contains a uuencoded file. If that uuencoded file happens to contain a RFC822 message with multipart-MIME attachments, then it can be argued that the message hasn't been scanned completely unless the parser nests it's decoding/encoding all the way down and scans the contents of the uuencoded message. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The decoding and encoding mechanism is designed to handle nested encodings, even though such messages would violate the MIME standard (you aren't allowed to e.g.</mrk><mrk mid="1" mtype="seg"> Base64-encode a multipart/ part).</mrk><mrk mid="2" mtype="seg"> The need for this becomes apparent when you consider that non-MIME attachments (uuencoded files, forwarded messages) should be scanned as well.</mrk><mrk mid="3" mtype="seg"> For example, a well formed MIME message may have a Base64 encoded text/plain part, which itself contains a uuencoded file.</mrk><mrk mid="4" mtype="seg"> If that uuencoded file happens to contain a RFC822 message with multipart-MIME attachments, then it can be argued that the message hasn't been scanned completely unless the parser nests it's decoding/encoding all the way down and scans the contents of the uuencoded message.</mrk><mrk mid="5" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-design"&gt;</it> The decoding and encoding mechanism is designed to handle nested encodings, even though such messages would violate the MIME standard (you aren't allowed to e.g.</mrk><mrk mid="1" mtype="seg"> Base64-encode a multipart/ part).</mrk><mrk mid="2" mtype="seg"> The need for this becomes apparent when you consider that non-MIME attachments (uuencoded files, forwarded messages) should be scanned as well.</mrk><mrk mid="3" mtype="seg"> For example, a well formed MIME message may have a Base64 encoded text/plain part, which itself contains a uuencoded file.</mrk><mrk mid="4" mtype="seg"> If that uuencoded file happens to contain a RFC822 message with multipart-MIME attachments, then it can be argued that the message hasn't been scanned completely unless the parser nests it's decoding/encoding all the way down and scans the contents of the uuencoded message.</mrk><mrk mid="5" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu407" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp677]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp677]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-design"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp677]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu408">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu409" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt>Hacking - Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt>Hacking - Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt>Hacking - Why treat the mail as a stream?<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu410" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> The reason I'm focusing on streams of data instead of messages on disk, is because in my opinion streams more accurately reflect the real world the sanitizer must work in. The mail system has no control over the length of the messages that are sent through it, so preferably resource usage should be influenced as little as possible by the size of those messages. This is not merely a performance issue, but also one of security - the sanitizer is supposed to be a tool for <bpt id="2" ctype="italic">&lt;i&gt;</bpt>enhancing<ept id="2">&lt;/i&gt;</ept> security, so I want to ensure that installing it opens up as few new attack routes as possible. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> The reason I'm focusing on streams of data instead of messages on disk, is because in my opinion streams more accurately reflect the real world the sanitizer must work in.</mrk><mrk mid="1" mtype="seg"> The mail system has no control over the length of the messages that are sent through it, so preferably resource usage should be influenced as little as possible by the size of those messages.</mrk><mrk mid="2" mtype="seg"> This is not merely a performance issue, but also one of security - the sanitizer is supposed to be a tool for <bpt id="2" ctype="italic">&lt;i&gt;</bpt>enhancing<ept id="2">&lt;/i&gt;</ept> security, so I want to ensure that installing it opens up as few new attack routes as possible.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> The reason I'm focusing on streams of data instead of messages on disk, is because in my opinion streams more accurately reflect the real world the sanitizer must work in.</mrk><mrk mid="1" mtype="seg"> The mail system has no control over the length of the messages that are sent through it, so preferably resource usage should be influenced as little as possible by the size of those messages.</mrk><mrk mid="2" mtype="seg"> This is not merely a performance issue, but also one of security - the sanitizer is supposed to be a tool for <bpt id="2" ctype="italic">&lt;i&gt;</bpt>enhancing<ept id="2">&lt;/i&gt;</ept> security, so I want to ensure that installing it opens up as few new attack routes as possible.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu411" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt> The pros of using a stream-based model: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt> The pros of using a stream-based model: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt> The pros of using a stream-based model: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu412" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Memory and disk space usage is not proportional to the size of the message being processed, instead it is proportional to the complexity of the message (MIME nesting depth etc.) and the nature of the security policy (third party virus scanners generally hog both memory and disk space). This makes the sanitizer much more scalable that it would be otherwise. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Memory and disk space usage is not proportional to the size of the message being processed, instead it is proportional to the complexity of the message (MIME nesting depth etc.) and the nature of the security policy (third party virus scanners generally hog both memory and disk space).</mrk><mrk mid="1" mtype="seg"> This makes the sanitizer much more scalable that it would be otherwise.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Memory and disk space usage is not proportional to the size of the message being processed, instead it is proportional to the complexity of the message (MIME nesting depth etc.) and the nature of the security policy (third party virus scanners generally hog both memory and disk space).</mrk><mrk mid="1" mtype="seg"> This makes the sanitizer much more scalable that it would be otherwise.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu413" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Solving the basic problem of a MIME-stream decoder/encoder almost automatically involved solving the deeply nested encoding problem described above. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Solving the basic problem of a MIME-stream decoder/encoder almost automatically involved solving the deeply nested encoding problem described above.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Solving the basic problem of a MIME-stream decoder/encoder almost automatically involved solving the deeply nested encoding problem described above.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu414" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu415" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt> The cons: <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt> The cons: <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt> The cons: <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu416" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> There are tight constraints on what the sanitizer can do. Once it has moved forward in it's input stream, it must eventually flush some of it's buffers and commit their contents to the output stream - and once it has done so, there is no turning back. So in general, aside from very limited "look ahead" tests, all output must be based the corrosponding input data or data that came before it. For example, message headers cannot be altered based on a signature at the end of the message body - by the time we reach the end of the message, the headers will have been committed to the output stream long ago. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> There are tight constraints on what the sanitizer can do.</mrk><mrk mid="1" mtype="seg"> Once it has moved forward in it's input stream, it must eventually flush some of it's buffers and commit their contents to the output stream - and once it has done so, there is no turning back.</mrk><mrk mid="2" mtype="seg"> So in general, aside from very limited "look ahead" tests, all output must be based the corrosponding input data or data that came before it.</mrk><mrk mid="3" mtype="seg"> For example, message headers cannot be altered based on a signature at the end of the message body - by the time we reach the end of the message, the headers will have been committed to the output stream long ago.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> There are tight constraints on what the sanitizer can do.</mrk><mrk mid="1" mtype="seg"> Once it has moved forward in it's input stream, it must eventually flush some of it's buffers and commit their contents to the output stream - and once it has done so, there is no turning back.</mrk><mrk mid="2" mtype="seg"> So in general, aside from very limited "look ahead" tests, all output must be based the corrosponding input data or data that came before it.</mrk><mrk mid="3" mtype="seg"> For example, message headers cannot be altered based on a signature at the end of the message body - by the time we reach the end of the message, the headers will have been committed to the output stream long ago.</mrk><mrk mid="4" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu417" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> The constraints imposed by streaming can lead to hairy code, especially where two unrelated scans are forced to run simultaniously (e.g. in the text scanner, which must check simultaniously for uuencoded attachments and HTML content - two fundamentally different things). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> The constraints imposed by streaming can lead to hairy code, especially where two unrelated scans are forced to run simultaniously (e.g. in the text scanner, which must check simultaniously for uuencoded attachments and HTML content - two fundamentally different things).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> The constraints imposed by streaming can lead to hairy code, especially where two unrelated scans are forced to run simultaniously (e.g. in the text scanner, which must check simultaniously for uuencoded attachments and HTML content - two fundamentally different things).</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu418" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Sometimes, the stream model just doesn't work and I have to resort to dumping part of the message to disk anyway and working with it from there. External virus scanners all (AFAIK) require this sort of compromise. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Sometimes, the stream model just doesn't work and I have to resort to dumping part of the message to disk anyway and working with it from there.</mrk><mrk mid="1" mtype="seg"> External virus scanners all (AFAIK) require this sort of compromise.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it> Sometimes, the stream model just doesn't work and I have to resort to dumping part of the message to disk anyway and working with it from there.</mrk><mrk mid="1" mtype="seg"> External virus scanners all (AFAIK) require this sort of compromise.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu419" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu420" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it>Obviously, I think the benefits of streaming (scalability) are more valuable than making my life as a programmer easier. Besides, writing it the hard way is much more fun! <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it>Obviously, I think the benefits of streaming (scalability) are more valuable than making my life as a programmer easier.</mrk><mrk mid="1" mtype="seg"> Besides, writing it the hard way is much more fun! <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-streams"&gt;</it>Obviously, I think the benefits of streaming (scalability) are more valuable than making my life as a programmer easier.</mrk><mrk mid="1" mtype="seg"> Besides, writing it the hard way is much more fun! <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu421" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp702]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp702]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-streams"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp702]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu422">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu423" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt>Hacking - Rough edges<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt>Hacking - Rough edges<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt>Hacking - Rough edges<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu424" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-cruft"&gt;</it> There are quite a few things which need fixing and cleaning up in the sanitizer's code. To name a few: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-cruft"&gt;</it> There are quite a few things which need fixing and cleaning up in the sanitizer's code.</mrk><mrk mid="1" mtype="seg"> To name a few: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-cruft"&gt;</it> There are quite a few things which need fixing and cleaning up in the sanitizer's code.</mrk><mrk mid="1" mtype="seg"> To name a few: <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu425" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu426" restype="x-li">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-cruft"&gt;</it> The sanitizer and MIMEStream are too tightly coupled - there is no well defined, clear interface between them. The sanitizer's handlers shamelessly assume things about how MIMEStream works and mess directly with MIMEStream objects' internal variables. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-cruft"&gt;</it> The sanitizer and MIMEStream are too tightly coupled - there is no well defined, clear interface between them.</mrk><mrk mid="1" mtype="seg"> The sanitizer's handlers shamelessly assume things about how MIMEStream works and mess directly with MIMEStream objects' internal variables.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-cruft"&gt;</it> The sanitizer and MIMEStream are too tightly coupled - there is no well defined, clear interface between them.</mrk><mrk mid="1" mtype="seg"> The sanitizer's handlers shamelessly assume things about how MIMEStream works and mess directly with MIMEStream objects' internal variables.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu427" restype="x-li">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt> There's so much work to be done on standards compliance, that I've devoted a <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp713]</bpt>whole section<ept id="2">&lt;/a&gt;</ept> to the topic.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt> There's so much work to be done on standards compliance, that I've devoted a <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp713]</bpt>whole section<ept id="2">&lt;/a&gt;</ept> to the topic.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-cruft"&gt;</bpt> There's so much work to be done on standards compliance, that I've devoted a <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp713]</bpt>whole section<ept id="2">&lt;/a&gt;</ept> to the topic.</mrk></target>
</trans-unit>
<trans-unit id="tu428" restype="x-li">
<source xml:lang="en">The documentation needs lots of work. Specifically, the sanitizer should be able to work with any MTA out there, but unless I document it then people won't do it.</source>
<seg-source><mrk mid="0" mtype="seg">The documentation needs lots of work.</mrk><mrk mid="1" mtype="seg"> Specifically, the sanitizer should be able to work with any MTA out there, but unless I document it then people won't do it.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The documentation needs lots of work.</mrk><mrk mid="1" mtype="seg"> Specifically, the sanitizer should be able to work with any MTA out there, but unless I document it then people won't do it.</mrk></target>
</trans-unit>
<trans-unit id="tu429" restype="x-li">
<source xml:lang="en">I really need to allow people to define policies based on MIME types or "magic" in addition to the current filename policies.</source>
<seg-source><mrk mid="0" mtype="seg">I really need to allow people to define policies based on MIME types or "magic" in addition to the current filename policies.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">I really need to allow people to define policies based on MIME types or "magic" in addition to the current filename policies.</mrk></target>
</trans-unit>
<trans-unit id="tu430" restype="x-li">
<source xml:lang="en">The sanitizer could really use a virus-scanner front end tool which could do all the neat unpacking things that <bpt id="1" ctype="link">[#$dp717]</bpt>AMaViS<ept id="1">&lt;/a&gt;</ept> does. It should be easy enough to remove the email-related stuff from AMaViS...</source>
<seg-source><mrk mid="0" mtype="seg">The sanitizer could really use a virus-scanner front end tool which could do all the neat unpacking things that <bpt id="1" ctype="link">[#$dp717]</bpt>AMaViS<ept id="1">&lt;/a&gt;</ept> does.</mrk><mrk mid="1" mtype="seg"> It should be easy enough to remove the email-related stuff from AMaViS...</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The sanitizer could really use a virus-scanner front end tool which could do all the neat unpacking things that <bpt id="1" ctype="link">[#$dp717]</bpt>AMaViS<ept id="1">&lt;/a&gt;</ept> does.</mrk><mrk mid="1" mtype="seg"> It should be easy enough to remove the email-related stuff from AMaViS...</mrk></target>
</trans-unit>
<trans-unit id="tu431" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp720]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp720]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp720]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu432">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu433" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt>Hacking - Standards<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt>Hacking - Standards<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt>Hacking - Standards<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu434" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> There are a relatively large number of MIME standards which the MIME stream editor and the sanitizer need to take into account. In general security has been favored over strict compliance, especially when the standards mandate "ignoring" certain message parts, such as signed parts or message/rfc822 headers. We sanitize those parts anyway, unless expressly told not to. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> There are a relatively large number of MIME standards which the MIME stream editor and the sanitizer need to take into account.</mrk><mrk mid="1" mtype="seg"> In general security has been favored over strict compliance, especially when the standards mandate "ignoring" certain message parts, such as signed parts or message/rfc822 headers.</mrk><mrk mid="2" mtype="seg"> We sanitize those parts anyway, unless expressly told not to.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> There are a relatively large number of MIME standards which the MIME stream editor and the sanitizer need to take into account.</mrk><mrk mid="1" mtype="seg"> In general security has been favored over strict compliance, especially when the standards mandate "ignoring" certain message parts, such as signed parts or message/rfc822 headers.</mrk><mrk mid="2" mtype="seg"> We sanitize those parts anyway, unless expressly told not to.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu435" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Most features which are known to violate the MIME standards are optional and efforts will be made to make the rest of them optional as well. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Most features which are known to violate the MIME standards are optional and efforts will be made to make the rest of them optional as well.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Most features which are known to violate the MIME standards are optional and efforts will be made to make the rest of them optional as well.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu436" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Currently, if given non MIME-compliant input, the sanitizer will probably generate non MIME-compliant output. One such example is an illegally encoded multipart type (neither 7bit or 8bit) or an illegal value for the Content-Transfer-Encoding headers. The scanner will accept and scan messages with some illegal encoding combinations, but won't correct the error. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Currently, if given non MIME-compliant input, the sanitizer will probably generate non MIME-compliant output.</mrk><mrk mid="1" mtype="seg"> One such example is an illegally encoded multipart type (neither 7bit or 8bit) or an illegal value for the Content-Transfer-Encoding headers.</mrk><mrk mid="2" mtype="seg"> The scanner will accept and scan messages with some illegal encoding combinations, but won't correct the error.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Currently, if given non MIME-compliant input, the sanitizer will probably generate non MIME-compliant output.</mrk><mrk mid="1" mtype="seg"> One such example is an illegally encoded multipart type (neither 7bit or 8bit) or an illegal value for the Content-Transfer-Encoding headers.</mrk><mrk mid="2" mtype="seg"> The scanner will accept and scan messages with some illegal encoding combinations, but won't correct the error.</mrk><mrk mid="3" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu437" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC822:<ept id="2">&lt;/b&gt;</ept><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC822:<ept id="2">&lt;/b&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC822:<ept id="2">&lt;/b&gt;</ept><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu438" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer and MIMEStream module conforms to this RFC - almost. Currently there are probably bugs to do with header comments and end-of-line markers (CRLF). <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer and MIMEStream module conforms to this RFC - almost.</mrk><mrk mid="1" mtype="seg"> Currently there are probably bugs to do with header comments and end-of-line markers (CRLF).</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer and MIMEStream module conforms to this RFC - almost.</mrk><mrk mid="1" mtype="seg"> Currently there are probably bugs to do with header comments and end-of-line markers (CRLF).</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu439" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> These problems will be fixed Real Soon Now. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> These problems will be fixed Real Soon Now.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> These problems will be fixed Real Soon Now.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu440" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2045-9<ept id="2">&lt;/b&gt;</ept>: Multipurpose Internet Mail Extensions (MIME)<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2424<ept id="4">&lt;/b&gt;</ept>: Content Duration MIME Header Definition<ph id="5" ctype="x-br">&lt;br&gt;</ph> <bpt id="6" ctype="bold">&lt;b&gt;</bpt>RFC2387<ept id="6">&lt;/b&gt;</ept>: The MIME Multipart/Related Content-type <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2045-9<ept id="2">&lt;/b&gt;</ept>: Multipurpose Internet Mail Extensions (MIME)<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2424<ept id="4">&lt;/b&gt;</ept>: Content Duration MIME Header Definition<ph id="5" ctype="x-br">&lt;br&gt;</ph> <bpt id="6" ctype="bold">&lt;b&gt;</bpt>RFC2387<ept id="6">&lt;/b&gt;</ept>: The MIME Multipart/Related Content-type <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2045-9<ept id="2">&lt;/b&gt;</ept>: Multipurpose Internet Mail Extensions (MIME)<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2424<ept id="4">&lt;/b&gt;</ept>: Content Duration MIME Header Definition<ph id="5" ctype="x-br">&lt;br&gt;</ph> <bpt id="6" ctype="bold">&lt;b&gt;</bpt>RFC2387<ept id="6">&lt;/b&gt;</ept>: The MIME Multipart/Related Content-type <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu441" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer appears to conform to these RFCs, as long as all scanned data is completely "clean" and no defanging or rewriting is necessary to enforce the selected policy. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer appears to conform to these RFCs, as long as all scanned data is completely "clean" and no defanging or rewriting is necessary to enforce the selected policy.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer appears to conform to these RFCs, as long as all scanned data is completely "clean" and no defanging or rewriting is necessary to enforce the selected policy.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu442" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> All exceptions involve possibly rewriting parts which the RFC mandates that MTAs treat as opaque, such as message/rfc822. In the future a list of such deviations will be created, and switches added to the code to make such devations optional, where possible. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> All exceptions involve possibly rewriting parts which the RFC mandates that MTAs treat as opaque, such as message/rfc822.</mrk><mrk mid="1" mtype="seg"> In the future a list of such deviations will be created, and switches added to the code to make such devations optional, where possible.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> All exceptions involve possibly rewriting parts which the RFC mandates that MTAs treat as opaque, such as message/rfc822.</mrk><mrk mid="1" mtype="seg"> In the future a list of such deviations will be created, and switches added to the code to make such devations optional, where possible.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu443" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Support for message/partial parts is currently incomplete, and may never be supported since reassembling messages is beyond the scope of this program and would have serious performance implications. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Support for message/partial parts is currently incomplete, and may never be supported since reassembling messages is beyond the scope of this program and would have serious performance implications.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Support for message/partial parts is currently incomplete, and may never be supported since reassembling messages is beyond the scope of this program and would have serious performance implications.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu444" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2231<ept id="2">&lt;/b&gt;</ept>: MIME Parameter Value and Encoded Word Extensions. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2231<ept id="2">&lt;/b&gt;</ept>: MIME Parameter Value and Encoded Word Extensions.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2231<ept id="2">&lt;/b&gt;</ept>: MIME Parameter Value and Encoded Word Extensions.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu445" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Partially compliant, as of 1.45. This on my TODO list. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Partially compliant, as of 1.45.</mrk><mrk mid="1" mtype="seg"> This on my TODO list.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Partially compliant, as of 1.45.</mrk><mrk mid="1" mtype="seg"> This on my TODO list.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu446" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC1847<ept id="2">&lt;/b&gt;</ept>: Security Multiparts for MIME<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2015<ept id="4">&lt;/b&gt;</ept>: MIME Security with Pretty Good Privacy (PGP)<ph id="5" ctype="x-br">&lt;br&gt;</ph> <bpt id="6" ctype="bold">&lt;b&gt;</bpt>RFC2480<ept id="6">&lt;/b&gt;</ept>: Gateways and MIME Security Multiparts <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC1847<ept id="2">&lt;/b&gt;</ept>: Security Multiparts for MIME<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2015<ept id="4">&lt;/b&gt;</ept>: MIME Security with Pretty Good Privacy (PGP)<ph id="5" ctype="x-br">&lt;br&gt;</ph> <bpt id="6" ctype="bold">&lt;b&gt;</bpt>RFC2480<ept id="6">&lt;/b&gt;</ept>: Gateways and MIME Security Multiparts <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC1847<ept id="2">&lt;/b&gt;</ept>: Security Multiparts for MIME<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2015<ept id="4">&lt;/b&gt;</ept>: MIME Security with Pretty Good Privacy (PGP)<ph id="5" ctype="x-br">&lt;br&gt;</ph> <bpt id="6" ctype="bold">&lt;b&gt;</bpt>RFC2480<ept id="6">&lt;/b&gt;</ept>: Gateways and MIME Security Multiparts <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu447" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer and MIMEStream module conform to these RFCs, with the exception of optionally sanitizing and modifying the contents of signed parts. Encrypted parts probably won't be be understood by the sanitizer anyway, so they shouldn't be effected. But don't be surprised if the sanitizer breaks PGP signatures! <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer and MIMEStream module conform to these RFCs, with the exception of optionally sanitizing and modifying the contents of signed parts.</mrk><mrk mid="1" mtype="seg"> Encrypted parts probably won't be be understood by the sanitizer anyway, so they shouldn't be effected.</mrk><mrk mid="2" mtype="seg"> But don't be surprised if the sanitizer breaks PGP signatures! <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> The sanitizer and MIMEStream module conform to these RFCs, with the exception of optionally sanitizing and modifying the contents of signed parts.</mrk><mrk mid="1" mtype="seg"> Encrypted parts probably won't be be understood by the sanitizer anyway, so they shouldn't be effected.</mrk><mrk mid="2" mtype="seg"> But don't be surprised if the sanitizer breaks PGP signatures! <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu448" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> It's a matter of opinion whether I conform to RFC2480, which discusses exactly these problems. At the moment there is plenty of room for improvments within the sanitizer, and conformance with this RFC is one of my goals. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> It's a matter of opinion whether I conform to RFC2480, which discusses exactly these problems.</mrk><mrk mid="1" mtype="seg"> At the moment there is plenty of room for improvments within the sanitizer, and conformance with this RFC is one of my goals.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> It's a matter of opinion whether I conform to RFC2480, which discusses exactly these problems.</mrk><mrk mid="1" mtype="seg"> At the moment there is plenty of room for improvments within the sanitizer, and conformance with this RFC is one of my goals.</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu449" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2311<ept id="2">&lt;/b&gt;</ept>: S/MIME Version 2 Message Specification<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2312<ept id="4">&lt;/b&gt;</ept>: S/MIME Version 2 Certificate Handling <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2311<ept id="2">&lt;/b&gt;</ept>: S/MIME Version 2 Message Specification<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2312<ept id="4">&lt;/b&gt;</ept>: S/MIME Version 2 Certificate Handling <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt><bpt id="2" ctype="bold">&lt;b&gt;</bpt>RFC2311<ept id="2">&lt;/b&gt;</ept>: S/MIME Version 2 Message Specification<ph id="3" ctype="x-br">&lt;br&gt;</ph> <bpt id="4" ctype="bold">&lt;b&gt;</bpt>RFC2312<ept id="4">&lt;/b&gt;</ept>: S/MIME Version 2 Certificate Handling <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu450" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Compliant, subject to the caveats above about rewriting signed parts, but support is very incomplete since the contents of S/MIME messages may not be sanitized by the scanner since it doesn't currently recognize them. <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Compliant, subject to the caveats above about rewriting signed parts, but support is very incomplete since the contents of S/MIME messages may not be sanitized by the scanner since it doesn't currently recognize them.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="hack-standards"&gt;</it> Compliant, subject to the caveats above about rewriting signed parts, but support is very incomplete since the contents of S/MIME messages may not be sanitized by the scanner since it doesn't currently recognize them.</mrk><mrk mid="1" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu451" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp760]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp760]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="hack-standards"&gt;</bpt>[ <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp760]</bpt>contents<ept id="2">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu452">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu453" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> Feedback <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> Feedback <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> Feedback <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu454" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> Please let me know if you use this program! <ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> Please let me know if you use this program! <ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> Please let me know if you use this program! <ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu455" restype="x-paragraph">
<source xml:lang="en"><it id="1" ctype="link" pos="open">&lt;a name="feedback"&gt;</it> Without feedback I might get discouraged and start playing video games or work on my juggling - writing this is alot of work and at the moment I'm not getting paid at all to do it. IMHO the least you can do is send me email... <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="feedback"&gt;</it> Without feedback I might get discouraged and start playing video games or work on my juggling - writing this is alot of work and at the moment I'm not getting paid at all to do it.</mrk><mrk mid="1" mtype="seg"> IMHO the least you can do is send me email...</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="link" pos="open">&lt;a name="feedback"&gt;</it> Without feedback I might get discouraged and start playing video games or work on my juggling - writing this is alot of work and at the moment I'm not getting paid at all to do it.</mrk><mrk mid="1" mtype="seg"> IMHO the least you can do is send me email...</mrk><mrk mid="2" mtype="seg"> <it id="1" ctype="link" pos="close">&lt;/a&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="tu456" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> My email address is <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp770]</bpt>bre@netverjar.is<ept id="2">&lt;/a&gt;</ept>, please put "sanitizer" somewhere in the subject line.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> My email address is <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp770]</bpt>bre@netverjar.is<ept id="2">&lt;/a&gt;</ept>, please put "sanitizer" somewhere in the subject line.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="feedback"&gt;</bpt> My email address is <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp770]</bpt>bre@netverjar.is<ept id="2">&lt;/a&gt;</ept>, please put "sanitizer" somewhere in the subject line.</mrk></target>
</trans-unit>
<trans-unit id="tu457" restype="x-paragraph">
<source xml:lang="en">Some questions:</source>
<seg-source><mrk mid="0" mtype="seg">Some questions:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some questions:</mrk></target>
</trans-unit>
<trans-unit id="tu458" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu459" restype="x-li">
<source xml:lang="en">Are you, or do you intend to use the program? If not, why not?</source>
<seg-source><mrk mid="0" mtype="seg">Are you, or do you intend to use the program? If not, why not?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Are you, or do you intend to use the program? If not, why not?</mrk></target>
</trans-unit>
<trans-unit id="tu460" restype="x-li">
<source xml:lang="en">At what sort of site(s) are you using the sanitizer?</source>
<seg-source><mrk mid="0" mtype="seg">At what sort of site(s) are you using the sanitizer?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">At what sort of site(s) are you using the sanitizer?</mrk></target>
</trans-unit>
<trans-unit id="tu461" restype="x-li">
<source xml:lang="en">What sort of email are you sanitizing? Incoming? Outgoing? Commercial? Private? Mailing lists?</source>
<seg-source><mrk mid="0" mtype="seg">What sort of email are you sanitizing? Incoming? Outgoing? Commercial? Private? Mailing lists?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">What sort of email are you sanitizing? Incoming? Outgoing? Commercial? Private? Mailing lists?</mrk></target>
</trans-unit>
<trans-unit id="tu462" restype="x-li">
<source xml:lang="en">Would you mind sharing your policies with other users of the program?</source>
<seg-source><mrk mid="0" mtype="seg">Would you mind sharing your policies with other users of the program?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Would you mind sharing your policies with other users of the program?</mrk></target>
</trans-unit>
<trans-unit id="tu463" restype="x-li">
<source xml:lang="en">What do you think is the biggest problem with the sanitizer?</source>
<seg-source><mrk mid="0" mtype="seg">What do you think is the biggest problem with the sanitizer?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">What do you think is the biggest problem with the sanitizer?</mrk></target>
</trans-unit>
<trans-unit id="tu464" restype="x-li">
<source xml:lang="en">What do you think is it's best feature?</source>
<seg-source><mrk mid="0" mtype="seg">What do you think is it's best feature?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">What do you think is it's best feature?</mrk></target>
</trans-unit>
<trans-unit id="tu465" restype="x-li">
<source xml:lang="en">Is the sanitizer fast enough for you? Approximately how much mail does it process for you every day? For how many users?</source>
<seg-source><mrk mid="0" mtype="seg">Is the sanitizer fast enough for you? Approximately how much mail does it process for you every day? For how many users?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Is the sanitizer fast enough for you? Approximately how much mail does it process for you every day? For how many users?</mrk></target>
</trans-unit>
<trans-unit id="tu466" restype="x-li">
<source xml:lang="en">Would you be willing to pay for future enhancements or support? How much? What kind of enhancements or support? Would you be willing to donate money as a token of gratitude for what I've already done?</source>
<seg-source><mrk mid="0" mtype="seg">Would you be willing to pay for future enhancements or support? How much? What kind of enhancements or support? Would you be willing to donate money as a token of gratitude for what I've already done?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Would you be willing to pay for future enhancements or support? How much? What kind of enhancements or support? Would you be willing to donate money as a token of gratitude for what I've already done?</mrk></target>
</trans-unit>
<trans-unit id="tu467" restype="x-li">
<source xml:lang="en">Have you purchased any third party virus scanners, to use with the sanitizer? Which one(s)?</source>
<seg-source><mrk mid="0" mtype="seg">Have you purchased any third party virus scanners, to use with the sanitizer? Which one(s)?</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Have you purchased any third party virus scanners, to use with the sanitizer? Which one(s)?</mrk></target>
</trans-unit>
<trans-unit id="tu468" restype="x-paragraph">
<source xml:lang="en"></source>
<target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="tu469" restype="x-paragraph">
<source xml:lang="en">Finally, if the program proves useful to you and you haven't time to contribute code, documentation or bug reports - then please consider <bpt id="1" ctype="link">[#$dp789]</bpt>supporting the project with a cash donation<ept id="1">&lt;/a&gt;</ept>. I'm doing this in my spare time, and all encouragement helps.</source>
<seg-source><mrk mid="0" mtype="seg">Finally, if the program proves useful to you and you haven't time to contribute code, documentation or bug reports - then please consider <bpt id="1" ctype="link">[#$dp789]</bpt>supporting the project with a cash donation<ept id="1">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> I'm doing this in my spare time, and all encouragement helps.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Finally, if the program proves useful to you and you haven't time to contribute code, documentation or bug reports - then please consider <bpt id="1" ctype="link">[#$dp789]</bpt>supporting the project with a cash donation<ept id="1">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> I'm doing this in my spare time, and all encouragement helps.</mrk></target>
</trans-unit>
<trans-unit id="tu470" restype="x-paragraph">
<source xml:lang="en">Thanks!</source>
<seg-source><mrk mid="0" mtype="seg">Thanks!</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Thanks!</mrk></target>
</trans-unit>
<trans-unit id="tu471" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp794]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp794]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp794]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu472">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu473" restype="x-h2">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt>Credits &amp; GPL<ept id="1">&lt;/a&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt>Credits &amp; GPL<ept id="1">&lt;/a&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt>Credits &amp; GPL<ept id="1">&lt;/a&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="tu474" restype="x-paragraph">
<source xml:lang="en"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt> Copyright (C) 2000 <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp800]</bpt>Bjarni R. Einarsson<ept id="2">&lt;/a&gt;</ept> &lt;<bpt id="3" ctype="link">[#$dp801]</bpt>bre@netverjar.is<ept id="3">&lt;/a&gt;</ept>&gt;.<ph id="4" ctype="x-br">&lt;br&gt;</ph> All rights reserved.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt> Copyright (C) 2000 <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp800]</bpt>Bjarni R. Einarsson<ept id="2">&lt;/a&gt;</ept> &lt;<bpt id="3" ctype="link">[#$dp801]</bpt>bre@netverjar.is<ept id="3">&lt;/a&gt;</ept>&gt;.</mrk><mrk mid="1" mtype="seg"><ph id="4" ctype="x-br">&lt;br&gt;</ph> All rights reserved.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="link">&lt;a name="credits"&gt;</bpt> Copyright (C) 2000 <ept id="1">&lt;/a&gt;</ept><bpt id="2" ctype="link">[#$dp800]</bpt>Bjarni R. Einarsson<ept id="2">&lt;/a&gt;</ept> &lt;<bpt id="3" ctype="link">[#$dp801]</bpt>bre@netverjar.is<ept id="3">&lt;/a&gt;</ept>&gt;.</mrk><mrk mid="1" mtype="seg"><ph id="4" ctype="x-br">&lt;br&gt;</ph> All rights reserved.</mrk></target>
</trans-unit>
<trans-unit id="tu475" restype="x-paragraph">
<source xml:lang="en">Development of the Anomy Sanitizer, from versions 1.35 onwards, has been primarily sponsored by <bpt id="1" ctype="link">[#$dp804]</bpt>FRISK Software International<ept id="1">&lt;/a&gt;</ept>. Please consider buying their anti-virus products to show your appreciation.</source>
<seg-source><mrk mid="0" mtype="seg">Development of the Anomy Sanitizer, from versions 1.35 onwards, has been primarily sponsored by <bpt id="1" ctype="link">[#$dp804]</bpt>FRISK Software International<ept id="1">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Please consider buying their anti-virus products to show your appreciation.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Development of the Anomy Sanitizer, from versions 1.35 onwards, has been primarily sponsored by <bpt id="1" ctype="link">[#$dp804]</bpt>FRISK Software International<ept id="1">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"> Please consider buying their anti-virus products to show your appreciation.</mrk></target>
</trans-unit>
<trans-unit id="tu476" restype="x-paragraph">
<source xml:lang="en">The sanitizer contains code and implements ideas by John D. Hardin &lt;<bpt id="1" ctype="link">[#$dp807]</bpt>jhardin@wolfenet.com<ept id="1">&lt;/a&gt;</ept>&gt;.</source>
<seg-source><mrk mid="0" mtype="seg">The sanitizer contains code and implements ideas by John D. Hardin &lt;<bpt id="1" ctype="link">[#$dp807]</bpt>jhardin@wolfenet.com<ept id="1">&lt;/a&gt;</ept>&gt;.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The sanitizer contains code and implements ideas by John D. Hardin &lt;<bpt id="1" ctype="link">[#$dp807]</bpt>jhardin@wolfenet.com<ept id="1">&lt;/a&gt;</ept>&gt;.</mrk></target>
</trans-unit>
<trans-unit id="tu477" restype="x-paragraph">
<source xml:lang="en">Kim Johnny Mathisen &lt;<bpt id="1" ctype="link">[#$dp810]</bpt>Kim.Mathisen@haukeland.no<ept id="1">&lt;/a&gt;</ept>&gt; contributed the instructions for <bpt id="2" ctype="link">[#$dp811]</bpt>in-transit sanitizing with qmail<ept id="2">&lt;/a&gt;</ept>.<ph id="3" ctype="x-br">&lt;br&gt;</ph> Mark Salazar &lt;<bpt id="4" ctype="link">[#$dp812]</bpt>msalazar@schaferdc.com<ept id="4">&lt;/a&gt;</ept>&gt; submitted improvements to the qmail chapter as well.<ph id="5" ctype="x-br">&lt;br&gt;</ph> Sterling Hanenkamp &lt;<bpt id="6" ctype="link">[#$dp813]</bpt>Sterling@nrg-inc.com<ept id="6">&lt;/a&gt;</ept>&gt; contributed pointers on in-transit configuration of sendmail, using the recommended m4 method.<ph id="7" ctype="x-br">&lt;br&gt;</ph></source>
<seg-source><mrk mid="0" mtype="seg">Kim Johnny Mathisen &lt;<bpt id="1" ctype="link">[#$dp810]</bpt>Kim.Mathisen@haukeland.no<ept id="1">&lt;/a&gt;</ept>&gt; contributed the instructions for <bpt id="2" ctype="link">[#$dp811]</bpt>in-transit sanitizing with qmail<ept id="2">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Mark Salazar &lt;<bpt id="4" ctype="link">[#$dp812]</bpt>msalazar@schaferdc.com<ept id="4">&lt;/a&gt;</ept>&gt; submitted improvements to the qmail chapter as well.</mrk><mrk mid="2" mtype="seg"><ph id="5" ctype="x-br">&lt;br&gt;</ph> Sterling Hanenkamp &lt;<bpt id="6" ctype="link">[#$dp813]</bpt>Sterling@nrg-inc.com<ept id="6">&lt;/a&gt;</ept>&gt; contributed pointers on in-transit configuration of sendmail, using the recommended m4 method.<ph id="7" ctype="x-br">&lt;br&gt;</ph></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Kim Johnny Mathisen &lt;<bpt id="1" ctype="link">[#$dp810]</bpt>Kim.Mathisen@haukeland.no<ept id="1">&lt;/a&gt;</ept>&gt; contributed the instructions for <bpt id="2" ctype="link">[#$dp811]</bpt>in-transit sanitizing with qmail<ept id="2">&lt;/a&gt;</ept>.</mrk><mrk mid="1" mtype="seg"><ph id="3" ctype="x-br">&lt;br&gt;</ph> Mark Salazar &lt;<bpt id="4" ctype="link">[#$dp812]</bpt>msalazar@schaferdc.com<ept id="4">&lt;/a&gt;</ept>&gt; submitted improvements to the qmail chapter as well.</mrk><mrk mid="2" mtype="seg"><ph id="5" ctype="x-br">&lt;br&gt;</ph> Sterling Hanenkamp &lt;<bpt id="6" ctype="link">[#$dp813]</bpt>Sterling@nrg-inc.com<ept id="6">&lt;/a&gt;</ept>&gt; contributed pointers on in-transit configuration of sendmail, using the recommended m4 method.<ph id="7" ctype="x-br">&lt;br&gt;</ph></mrk></target>
</trans-unit>
<trans-unit id="tu478" restype="x-paragraph">
<source xml:lang="en">Ideas were also borrowed from <bpt id="1" ctype="link">[#$dp816]</bpt>AMaViS<ept id="1">&lt;/a&gt;</ept> and <bpt id="2" ctype="link">[#$dp817]</bpt>Inflex<ept id="2">&lt;/a&gt;</ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Ideas were also borrowed from <bpt id="1" ctype="link">[#$dp816]</bpt>AMaViS<ept id="1">&lt;/a&gt;</ept> and <bpt id="2" ctype="link">[#$dp817]</bpt>Inflex<ept id="2">&lt;/a&gt;</ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Ideas were also borrowed from <bpt id="1" ctype="link">[#$dp816]</bpt>AMaViS<ept id="1">&lt;/a&gt;</ept> and <bpt id="2" ctype="link">[#$dp817]</bpt>Inflex<ept id="2">&lt;/a&gt;</ept>.</mrk></target>
</trans-unit>
<trans-unit id="tu479" restype="x-paragraph">
<source xml:lang="en">This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</source>
<seg-source><mrk mid="0" mtype="seg">This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</mrk></target>
</trans-unit>
<trans-unit id="tu480" restype="x-paragraph">
<source xml:lang="en">This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</source>
<seg-source><mrk mid="0" mtype="seg">This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</mrk><mrk mid="1" mtype="seg"> See the GNU General Public License for more details.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</mrk><mrk mid="1" mtype="seg"> See the GNU General Public License for more details.</mrk></target>
</trans-unit>
<trans-unit id="tu481" restype="x-paragraph">
<source xml:lang="en">[ <bpt id="1" ctype="link">[#$dp824]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</source>
<seg-source><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp824]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">[ <bpt id="1" ctype="link">[#$dp824]</bpt>contents<ept id="1">&lt;/a&gt;</ept> ]</mrk></target>
</trans-unit>
<trans-unit id="tu482" restype="x-paragraph">
<source xml:lang="en">$Id: sanitizer.html,v 1.20 2003/04/30 01:45:24 bre Exp $</source>
<seg-source><mrk mid="0" mtype="seg">$Id: sanitizer.html,v 1.20 2003/04/30 01:45:24 bre Exp $</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$Id: sanitizer.html,v 1.20 2003/04/30 01:45:24 bre Exp $</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
