<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="TestDocument03.odt/content.xml" source-language="en" target-language="fr" datatype="x-undefined" okp:inputEncoding="UTF-8" okp:configId="/Users/chase/src/okapi-integration-tests/target/test-classes/openoffice/odt/okf_openoffice@default.fprm">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<trans-unit id="1" restype="x-text:p">
<source xml:lang="en">OmegaT developer's guide</source>
<seg-source><mrk mid="0" mtype="seg">OmegaT developer's guide</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OmegaT developer's guide</mrk></target>
</trans-unit>
<trans-unit id="2" restype="x-text:index-title-template">
<source xml:lang="en">Content</source>
<seg-source><mrk mid="0" mtype="seg">Content</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Content</mrk></target>
</trans-unit>
<trans-unit id="3" restype="x-text:p">
<source xml:lang="en">Content</source>
<seg-source><mrk mid="0" mtype="seg">Content</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Content</mrk></target>
</trans-unit>
<trans-unit id="4" restype="x-text:p">
<source xml:lang="en">OmegaT architecture	3</source>
<seg-source><mrk mid="0" mtype="seg">OmegaT architecture	3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OmegaT architecture	3</mrk></target>
</trans-unit>
<trans-unit id="5" restype="x-text:p">
<source xml:lang="en">Threads usage	3</source>
<seg-source><mrk mid="0" mtype="seg">Threads usage	3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Threads usage	3</mrk></target>
</trans-unit>
<trans-unit id="6" restype="x-text:p">
<source xml:lang="en">Components	3</source>
<seg-source><mrk mid="0" mtype="seg">Components	3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Components	3</mrk></target>
</trans-unit>
<trans-unit id="7" restype="x-text:p">
<source xml:lang="en">IMainWindow	3</source>
<seg-source><mrk mid="0" mtype="seg">IMainWindow	3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IMainWindow	3</mrk></target>
</trans-unit>
<trans-unit id="8" restype="x-text:p">
<source xml:lang="en">IEditor	3</source>
<seg-source><mrk mid="0" mtype="seg">IEditor	3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IEditor	3</mrk></target>
</trans-unit>
<trans-unit id="9" restype="x-text:p">
<source xml:lang="en">IProject	3</source>
<seg-source><mrk mid="0" mtype="seg">IProject	3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IProject	3</mrk></target>
</trans-unit>
<trans-unit id="10" restype="x-text:p">
<source xml:lang="en">IMatcher	4</source>
<seg-source><mrk mid="0" mtype="seg">IMatcher	4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IMatcher	4</mrk></target>
</trans-unit>
<trans-unit id="11" restype="x-text:p">
<source xml:lang="en">ITagValidation	4</source>
<seg-source><mrk mid="0" mtype="seg">ITagValidation	4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ITagValidation	4</mrk></target>
</trans-unit>
<trans-unit id="12" restype="x-text:p">
<source xml:lang="en">ITokenizer	4</source>
<seg-source><mrk mid="0" mtype="seg">ITokenizer	4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ITokenizer	4</mrk></target>
</trans-unit>
<trans-unit id="13" restype="x-text:p">
<source xml:lang="en">ISpellChecker	4</source>
<seg-source><mrk mid="0" mtype="seg">ISpellChecker	4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ISpellChecker	4</mrk></target>
</trans-unit>
<trans-unit id="14" restype="x-text:p">
<source xml:lang="en">Events	4</source>
<seg-source><mrk mid="0" mtype="seg">Events	4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Events	4</mrk></target>
</trans-unit>
<trans-unit id="15" restype="x-text:p">
<source xml:lang="en">Filters	4</source>
<seg-source><mrk mid="0" mtype="seg">Filters	4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Filters	4</mrk></target>
</trans-unit>
<trans-unit id="16" restype="x-text:p">
<source xml:lang="en">Details on patterns	5</source>
<seg-source><mrk mid="0" mtype="seg">Details on patterns	5</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Details on patterns	5</mrk></target>
</trans-unit>
<trans-unit id="17" restype="x-text:p">
<source xml:lang="en">Project details	5</source>
<seg-source><mrk mid="0" mtype="seg">Project details	5</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Project details	5</mrk></target>
</trans-unit>
<trans-unit id="18" restype="x-text:p">
<source xml:lang="en">OmegaT - Computer Assisted Translation (CAT) tool </source>
<seg-source><mrk mid="0" mtype="seg">OmegaT - Computer Assisted Translation (CAT) tool</mrk> </seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OmegaT - Computer Assisted Translation (CAT) tool</mrk> </target>
</trans-unit>
<trans-unit id="19" restype="x-text:p">
<source xml:lang="en">with fuzzy matching, translation memory, keyword search, </source>
<seg-source><mrk mid="0" mtype="seg">with fuzzy matching, translation memory, keyword search,</mrk> </seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">with fuzzy matching, translation memory, keyword search,</mrk> </target>
</trans-unit>
<trans-unit id="20" restype="x-text:p">
<source xml:lang="en">glossaries, and translation leveraging into updated projects.</source>
<seg-source><mrk mid="0" mtype="seg">glossaries, and translation leveraging into updated projects.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">glossaries, and translation leveraging into updated projects.</mrk></target>
</trans-unit>
<trans-unit id="21" restype="x-text:p">
<source xml:lang="en">Copyright (C) 2005-2008 Maxym Mykhalchuk and Alex Buloichik</source>
<seg-source><mrk mid="0" mtype="seg">Copyright (C) 2005-2008 Maxym Mykhalchuk and Alex Buloichik</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Copyright (C) 2005-2008 Maxym Mykhalchuk and Alex Buloichik</mrk></target>
</trans-unit>
<trans-unit id="22" restype="x-text:p">
<source xml:lang="en">               Home page: http://www.omegat.org/</source>
<seg-source><mrk mid="0" mtype="seg">               Home page: http://www.omegat.org/</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">               Home page: http://www.omegat.org/</mrk></target>
</trans-unit>
<trans-unit id="23" restype="x-text:p">
<source xml:lang="en">               Support center: http://groups.yahoo.com/group/OmegaT/</source>
<seg-source><mrk mid="0" mtype="seg">               Support center: http://groups.yahoo.com/group/OmegaT/</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">               Support center: http://groups.yahoo.com/group/OmegaT/</mrk></target>
</trans-unit>
<trans-unit id="24" restype="x-text:p">
<source xml:lang="en">This program is free software; you can redistribute it and/or modify</source>
<seg-source><mrk mid="0" mtype="seg">This program is free software; you can redistribute it and/or modify</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This program is free software; you can redistribute it and/or modify</mrk></target>
</trans-unit>
<trans-unit id="25" restype="x-text:p">
<source xml:lang="en">it under the terms of the GNU General Public License as published by</source>
<seg-source><mrk mid="0" mtype="seg">it under the terms of the GNU General Public License as published by</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">it under the terms of the GNU General Public License as published by</mrk></target>
</trans-unit>
<trans-unit id="26" restype="x-text:p">
<source xml:lang="en">the Free Software Foundation; either version 2 of the License, or</source>
<seg-source><mrk mid="0" mtype="seg">the Free Software Foundation; either version 2 of the License, or</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">the Free Software Foundation; either version 2 of the License, or</mrk></target>
</trans-unit>
<trans-unit id="27" restype="x-text:p">
<source xml:lang="en">(at your option) any later version.</source>
<seg-source><mrk mid="0" mtype="seg">(at your option) any later version.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">(at your option) any later version.</mrk></target>
</trans-unit>
<trans-unit id="28" restype="x-text:p">
<source xml:lang="en"> This program is distributed in the hope that it will be useful,</source>
<seg-source><mrk mid="0" mtype="seg"> This program is distributed in the hope that it will be useful,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"> This program is distributed in the hope that it will be useful,</mrk></target>
</trans-unit>
<trans-unit id="29" restype="x-text:p">
<source xml:lang="en">but WITHOUT ANY WARRANTY; without even the implied warranty of</source>
<seg-source><mrk mid="0" mtype="seg">but WITHOUT ANY WARRANTY; without even the implied warranty of</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">but WITHOUT ANY WARRANTY; without even the implied warranty of</mrk></target>
</trans-unit>
<trans-unit id="30" restype="x-text:p">
<source xml:lang="en">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</source>
<seg-source><mrk mid="0" mtype="seg">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</mrk><mrk mid="1" mtype="seg">  See the</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</mrk><mrk mid="1" mtype="seg">  See the</mrk></target>
</trans-unit>
<trans-unit id="31" restype="x-text:p">
<source xml:lang="en">GNU General Public License for more details.</source>
<seg-source><mrk mid="0" mtype="seg">GNU General Public License for more details.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">GNU General Public License for more details.</mrk></target>
</trans-unit>
<trans-unit id="32" restype="x-text:p">
<source xml:lang="en">You should have received a copy of the GNU General Public License</source>
<seg-source><mrk mid="0" mtype="seg">You should have received a copy of the GNU General Public License</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You should have received a copy of the GNU General Public License</mrk></target>
</trans-unit>
<trans-unit id="33" restype="x-text:p">
<source xml:lang="en">along with this program; if not, write to the Free Software</source>
<seg-source><mrk mid="0" mtype="seg">along with this program; if not, write to the Free Software</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">along with this program; if not, write to the Free Software</mrk></target>
</trans-unit>
<trans-unit id="34" restype="x-text:p">
<source xml:lang="en">Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</source>
<seg-source><mrk mid="0" mtype="seg">Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</mrk></target>
</trans-unit>
<trans-unit id="35" restype="x-text:p">
<source xml:lang="en">In the specific context of this document (“OmegaT's developer's guide”), “source code” is to be understood as the text of this document itself (independently of the document format used), as well as the images, either in the binary version contained inside this document, or as the .<bpt id="1" ctype="x-text:span">&lt;text:span text:style-name="T1"&gt;</bpt>vpp files used to create these images.<ept id="1">&lt;/text:span&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg">In the specific context of this document (“OmegaT's developer's guide”), “source code” is to be understood as the text of this document itself (independently of the document format used), as well as the images, either in the binary version contained inside this document, or as the .<bpt id="1" ctype="x-text:span">&lt;text:span text:style-name="T1"&gt;</bpt>vpp files used to create these images.<ept id="1">&lt;/text:span&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">In the specific context of this document (“OmegaT's developer's guide”), “source code” is to be understood as the text of this document itself (independently of the document format used), as well as the images, either in the binary version contained inside this document, or as the .<bpt id="1" ctype="x-text:span">&lt;text:span text:style-name="T1"&gt;</bpt>vpp files used to create these images.<ept id="1">&lt;/text:span&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="36" restype="x-text:h">
<source xml:lang="en">OmegaT architecture</source>
<seg-source><mrk mid="0" mtype="seg">OmegaT architecture</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OmegaT architecture</mrk></target>
</trans-unit>
<trans-unit id="37" restype="x-text:p">
<source xml:lang="en">Components in OmegaT:</source>
<seg-source><mrk mid="0" mtype="seg">Components in OmegaT:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Components in OmegaT:</mrk></target>
</trans-unit>
<trans-unit id="38" restype="x-text:p">
<source xml:lang="en"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr1" draw:name="відарысы1" text:anchor-type="paragraph" svg:y="0.083cm" svg:width="16.999cm" svg:height="9.671cm" draw:z-index="2"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/10000201000004FC000002D698C2D04F.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept>Each component must implement a specific interface, and only this interface should be used to call this component from other components. </source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr1" draw:name="відарысы1" text:anchor-type="paragraph" svg:y="0.083cm" svg:width="16.999cm" svg:height="9.671cm" draw:z-index="2"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/10000201000004FC000002D698C2D04F.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept>Each component must implement a specific interface, and only this interface should be used to call this component from other components.</mrk> </seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr1" draw:name="відарысы1" text:anchor-type="paragraph" svg:y="0.083cm" svg:width="16.999cm" svg:height="9.671cm" draw:z-index="2"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/10000201000004FC000002D698C2D04F.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept>Each component must implement a specific interface, and only this interface should be used to call this component from other components.</mrk> </target>
</trans-unit>
<trans-unit id="39" restype="x-text:h">
<source xml:lang="en">Threads usage</source>
<seg-source><mrk mid="0" mtype="seg">Threads usage</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Threads usage</mrk></target>
</trans-unit>
<trans-unit id="40" restype="x-text:p">
<source xml:lang="en">OmegaT uses standard thread behavior, i.e., short term (i.e., most of them) operations should be executed in the UI thread (event dispatcher thread). Only long-term tasks should create a new thread using SwingWorker. All these (long-term) tasks lock the OmegaT UI to prevent the user to change anything in application.</source>
<seg-source><mrk mid="0" mtype="seg">OmegaT uses standard thread behavior, i.e., short term (i.e., most of them) operations should be executed in the UI thread (event dispatcher thread).</mrk><mrk mid="1" mtype="seg"> Only long-term tasks should create a new thread using SwingWorker.</mrk><mrk mid="2" mtype="seg"> All these (long-term) tasks lock the OmegaT UI to prevent the user to change anything in application.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OmegaT uses standard thread behavior, i.e., short term (i.e., most of them) operations should be executed in the UI thread (event dispatcher thread).</mrk><mrk mid="1" mtype="seg"> Only long-term tasks should create a new thread using SwingWorker.</mrk><mrk mid="2" mtype="seg"> All these (long-term) tasks lock the OmegaT UI to prevent the user to change anything in application.</mrk></target>
</trans-unit>
<trans-unit id="41" restype="x-text:p">
<source xml:lang="en">There is only one “real” thread — it's SaveThread, which saves the project every 10 minutes.</source>
<seg-source><mrk mid="0" mtype="seg">There is only one “real” thread — it's SaveThread, which saves the project every 10 minutes.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">There is only one “real” thread — it's SaveThread, which saves the project every 10 minutes.</mrk></target>
</trans-unit>
<trans-unit id="42" restype="x-text:h">
<source xml:lang="en">Components</source>
<seg-source><mrk mid="0" mtype="seg">Components</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Components</mrk></target>
</trans-unit>
<trans-unit id="43" restype="x-text:p">
<source xml:lang="en">All components accessible from Core class static methods.</source>
<seg-source><mrk mid="0" mtype="seg">All components accessible from Core class static methods.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">All components accessible from Core class static methods.</mrk></target>
</trans-unit>
<trans-unit id="44" restype="x-text:h">
<source xml:lang="en">IMainWindow</source>
<seg-source><mrk mid="0" mtype="seg">IMainWindow</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IMainWindow</mrk></target>
</trans-unit>
<trans-unit id="45" restype="x-text:p">
<source xml:lang="en">This component controls the main application frame and can make some basic operations, like locking/unlocking the UI and displaying messages and errors.</source>
<seg-source><mrk mid="0" mtype="seg">This component controls the main application frame and can make some basic operations, like locking/unlocking the UI and displaying messages and errors.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This component controls the main application frame and can make some basic operations, like locking/unlocking the UI and displaying messages and errors.</mrk></target>
</trans-unit>
<trans-unit id="46" restype="x-text:h">
<source xml:lang="en">IEditor</source>
<seg-source><mrk mid="0" mtype="seg">IEditor</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IEditor</mrk></target>
</trans-unit>
<trans-unit id="47" restype="x-text:p">
<source xml:lang="en">This is the editor of translations. The application must have only one editor, but theoretically the user can switch between different editor implementations without project reloading.</source>
<seg-source><mrk mid="0" mtype="seg">This is the editor of translations.</mrk><mrk mid="1" mtype="seg"> The application must have only one editor, but theoretically the user can switch between different editor implementations without project reloading.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is the editor of translations.</mrk><mrk mid="1" mtype="seg"> The application must have only one editor, but theoretically the user can switch between different editor implementations without project reloading.</mrk></target>
</trans-unit>
<trans-unit id="48" restype="x-text:h">
<source xml:lang="en">IProject</source>
<seg-source><mrk mid="0" mtype="seg">IProject</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IProject</mrk></target>
</trans-unit>
<trans-unit id="49" restype="x-text:p">
<source xml:lang="en">Interface for the currently loaded project. There are two implementation classes: RealProject <bpt id="1" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="1">&lt;/text:soft-page-break&gt;</ept>and NotLoadedProject. The RealProject instance is created when a project is loaded, i.e., if the user clicks on “Open Project”, then the first instance will be created, when the user clicks on “Close Project” and “Open Project” again, the second instance will be created. All project data are stored in this class.</source>
<seg-source><mrk mid="0" mtype="seg">Interface for the currently loaded project.</mrk><mrk mid="1" mtype="seg"> There are two implementation classes: RealProject <bpt id="1" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="1">&lt;/text:soft-page-break&gt;</ept>and NotLoadedProject.</mrk><mrk mid="2" mtype="seg"> The RealProject instance is created when a project is loaded, i.e., if the user clicks on “Open Project”, then the first instance will be created, when the user clicks on “Close Project” and “Open Project” again, the second instance will be created.</mrk><mrk mid="3" mtype="seg"> All project data are stored in this class.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Interface for the currently loaded project.</mrk><mrk mid="1" mtype="seg"> There are two implementation classes: RealProject <bpt id="1" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="1">&lt;/text:soft-page-break&gt;</ept>and NotLoadedProject.</mrk><mrk mid="2" mtype="seg"> The RealProject instance is created when a project is loaded, i.e., if the user clicks on “Open Project”, then the first instance will be created, when the user clicks on “Close Project” and “Open Project” again, the second instance will be created.</mrk><mrk mid="3" mtype="seg"> All project data are stored in this class.</mrk></target>
</trans-unit>
<trans-unit id="50" restype="x-text:h">
<source xml:lang="en">IMatcher</source>
<seg-source><mrk mid="0" mtype="seg">IMatcher</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IMatcher</mrk></target>
</trans-unit>
<trans-unit id="51" restype="x-text:p">
<source xml:lang="en">Panel that find matches in other translations and TM files.</source>
<seg-source><mrk mid="0" mtype="seg">Panel that find matches in other translations and TM files.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Panel that find matches in other translations and TM files.</mrk></target>
</trans-unit>
<trans-unit id="52" restype="x-text:h">
<source xml:lang="en">ITagValidation</source>
<seg-source><mrk mid="0" mtype="seg">ITagValidation</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ITagValidation</mrk></target>
</trans-unit>
<trans-unit id="53" restype="x-text:p">
<source xml:lang="en">Tag validator, that checks tags in all translations and show invalid tags.</source>
<seg-source><mrk mid="0" mtype="seg">Tag validator, that checks tags in all translations and show invalid tags.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Tag validator, that checks tags in all translations and show invalid tags.</mrk></target>
</trans-unit>
<trans-unit id="54" restype="x-text:h">
<source xml:lang="en">ITokenizer</source>
<seg-source><mrk mid="0" mtype="seg">ITokenizer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ITokenizer</mrk></target>
</trans-unit>
<trans-unit id="55" restype="x-text:p">
<source xml:lang="en">It can split segments on tokens for spell checking and to find matches.</source>
<seg-source><mrk mid="0" mtype="seg">It can split segments on tokens for spell checking and to find matches.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">It can split segments on tokens for spell checking and to find matches.</mrk></target>
</trans-unit>
<trans-unit id="56" restype="x-text:h">
<source xml:lang="en">ISpellChecker</source>
<seg-source><mrk mid="0" mtype="seg">ISpellChecker</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ISpellChecker</mrk></target>
</trans-unit>
<trans-unit id="57" restype="x-text:p">
<source xml:lang="en">Spell checker for translation.</source>
<seg-source><mrk mid="0" mtype="seg">Spell checker for translation.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Spell checker for translation.</mrk></target>
</trans-unit>
<trans-unit id="58" restype="x-text:h">
<source xml:lang="en">Events</source>
<seg-source><mrk mid="0" mtype="seg">Events</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Events</mrk></target>
</trans-unit>
<trans-unit id="59" restype="x-text:p">
<source xml:lang="en">Each component can listen to application events. To register listeners, component should call CoreEvents.register... methods. Events can be:</source>
<seg-source><mrk mid="0" mtype="seg">Each component can listen to application events.</mrk><mrk mid="1" mtype="seg"> To register listeners, component should call CoreEvents.register...</mrk><mrk mid="2" mtype="seg"> methods.</mrk><mrk mid="3" mtype="seg"> Events can be:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Each component can listen to application events.</mrk><mrk mid="1" mtype="seg"> To register listeners, component should call CoreEvents.register...</mrk><mrk mid="2" mtype="seg"> methods.</mrk><mrk mid="3" mtype="seg"> Events can be:</mrk></target>
</trans-unit>
<trans-unit id="60" restype="x-text:p">
<source xml:lang="en">IProjectEventListener</source>
<seg-source><mrk mid="0" mtype="seg">IProjectEventListener</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IProjectEventListener</mrk></target>
</trans-unit>
<trans-unit id="61" restype="x-text:p">
<source xml:lang="en">onProjectChanged(PROJECT_CHANGE_TYPE), where PROJECT_CHANGE_TYPE is enum {CLOSE, COMPILE, CREATE, LOAD, SAVE}</source>
<seg-source><mrk mid="0" mtype="seg">onProjectChanged(PROJECT_CHANGE_TYPE), where PROJECT_CHANGE_TYPE is enum {CLOSE, COMPILE, CREATE, LOAD, SAVE}</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">onProjectChanged(PROJECT_CHANGE_TYPE), where PROJECT_CHANGE_TYPE is enum {CLOSE, COMPILE, CREATE, LOAD, SAVE}</mrk></target>
</trans-unit>
<trans-unit id="62" restype="x-text:p">
<source xml:lang="en">Project changed, i.e., when the user closes a project, or compile, create, load, or save it.</source>
<seg-source><mrk mid="0" mtype="seg">Project changed, i.e., when the user closes a project, or compile, create, load, or save it.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Project changed, i.e., when the user closes a project, or compile, create, load, or save it.</mrk></target>
</trans-unit>
<trans-unit id="63" restype="x-text:p">
<source xml:lang="en">IEntryEventListener</source>
<seg-source><mrk mid="0" mtype="seg">IEntryEventListener</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IEntryEventListener</mrk></target>
</trans-unit>
<trans-unit id="64" restype="x-text:p">
<source xml:lang="en">onNewFile(String activeFileName)</source>
<seg-source><mrk mid="0" mtype="seg">onNewFile(String activeFileName)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">onNewFile(String activeFileName)</mrk></target>
</trans-unit>
<trans-unit id="65" restype="x-text:p">
<source xml:lang="en">User changes the current file in the editor.</source>
<seg-source><mrk mid="0" mtype="seg">User changes the current file in the editor.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">User changes the current file in the editor.</mrk></target>
</trans-unit>
<trans-unit id="66" restype="x-text:p">
<source xml:lang="en">onEntryActivated(StringEntry newEntry)</source>
<seg-source><mrk mid="0" mtype="seg">onEntryActivated(StringEntry newEntry)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">onEntryActivated(StringEntry newEntry)</mrk></target>
</trans-unit>
<trans-unit id="67" restype="x-text:p">
<source xml:lang="en">User change current entry in editor.</source>
<seg-source><mrk mid="0" mtype="seg">User change current entry in editor.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">User change current entry in editor.</mrk></target>
</trans-unit>
<trans-unit id="68" restype="x-text:p">
<source xml:lang="en">IFontChangedEventListener</source>
<seg-source><mrk mid="0" mtype="seg">IFontChangedEventListener</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IFontChangedEventListener</mrk></target>
</trans-unit>
<trans-unit id="69" restype="x-text:p">
<source xml:lang="en">onFontChanged(Font newFont)</source>
<seg-source><mrk mid="0" mtype="seg">onFontChanged(Font newFont)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">onFontChanged(Font newFont)</mrk></target>
</trans-unit>
<trans-unit id="70" restype="x-text:p">
<source xml:lang="en">User change application font.</source>
<seg-source><mrk mid="0" mtype="seg">User change application font.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">User change application font.</mrk></target>
</trans-unit>
<trans-unit id="71" restype="x-text:p">
<source xml:lang="en">Event listeners are executed only in the UI (Swing event dispatcher) thread by the “invokeLater” method.</source>
<seg-source><mrk mid="0" mtype="seg">Event listeners are executed only in the UI (Swing event dispatcher) thread by the “invokeLater” method.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Event listeners are executed only in the UI (Swing event dispatcher) thread by the “invokeLater” method.</mrk></target>
</trans-unit>
<trans-unit id="72" restype="x-text:p">
<source xml:lang="en">Event listening is the preferred way to handle project open/close and entry change for components, since the list of components can be large, and the application cannot know anything about user-defined components.</source>
<seg-source><mrk mid="0" mtype="seg">Event listening is the preferred way to handle project open/close and entry change for components, since the list of components can be large, and the application cannot know anything about user-defined components.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Event listening is the preferred way to handle project open/close and entry change for components, since the list of components can be large, and the application cannot know anything about user-defined components.</mrk></target>
</trans-unit>
<trans-unit id="73" restype="x-text:h">
<source xml:lang="en">Filters</source>
<seg-source><mrk mid="0" mtype="seg">Filters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Filters</mrk></target>
</trans-unit>
<trans-unit id="74" restype="x-text:p">
<source xml:lang="en">OmegaT has many classes to parse (and build) translation files. It supports many formats, such as *.po, *.properties, *.html, etc. A class to parse one format is named a “Filter”. There is a FilterMaster, which organizes all filters and can detect which filter should be executed for a specific file format.</source>
<seg-source><mrk mid="0" mtype="seg">OmegaT has many classes to parse (and build) translation files.</mrk><mrk mid="1" mtype="seg"> It supports many formats, such as *.po, *.properties, *.html, etc.</mrk><mrk mid="2" mtype="seg"> A class to parse one format is named a “Filter”.</mrk><mrk mid="3" mtype="seg"> There is a FilterMaster, which organizes all filters and can detect which filter should be executed for a specific file format.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">OmegaT has many classes to parse (and build) translation files.</mrk><mrk mid="1" mtype="seg"> It supports many formats, such as *.po, *.properties, *.html, etc.</mrk><mrk mid="2" mtype="seg"> A class to parse one format is named a “Filter”.</mrk><mrk mid="3" mtype="seg"> There is a FilterMaster, which organizes all filters and can detect which filter should be executed for a specific file format.</mrk></target>
</trans-unit>
<trans-unit id="75" restype="x-text:p">
<source xml:lang="en">Filter is a class that can:</source>
<seg-source><mrk mid="0" mtype="seg">Filter is a class that can:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Filter is a class that can:</mrk></target>
</trans-unit>
<trans-unit id="76" restype="x-text:p">
<source xml:lang="en"><bpt id="1" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="1">&lt;/text:soft-page-break&gt;</ept>Read the document in a given format</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="1">&lt;/text:soft-page-break&gt;</ept>Read the document in a given format</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="1">&lt;/text:soft-page-break&gt;</ept>Read the document in a given format</mrk></target>
</trans-unit>
<trans-unit id="77" restype="x-text:p">
<source xml:lang="en">Extract the translatable content out of it</source>
<seg-source><mrk mid="0" mtype="seg">Extract the translatable content out of it</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Extract the translatable content out of it</mrk></target>
</trans-unit>
<trans-unit id="78" restype="x-text:p">
<source xml:lang="en">Write the document in the same format, replacing translatable content with its translation </source>
<seg-source><mrk mid="0" mtype="seg">Write the document in the same format, replacing translatable content with its translation</mrk> </seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Write the document in the same format, replacing translatable content with its translation</mrk> </target>
</trans-unit>
<trans-unit id="79" restype="x-text:p">
<source xml:lang="en">Note that filters must be two-fold: read &amp; write, reading and writing the same format. Responsibility for such behavior is of course up to the file filter programmer.</source>
<seg-source><mrk mid="0" mtype="seg">Note that filters must be two-fold: read &amp; write, reading and writing the same format.</mrk><mrk mid="1" mtype="seg"> Responsibility for such behavior is of course up to the file filter programmer.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note that filters must be two-fold: read &amp; write, reading and writing the same format.</mrk><mrk mid="1" mtype="seg"> Responsibility for such behavior is of course up to the file filter programmer.</mrk></target>
</trans-unit>
<trans-unit id="80" restype="x-text:p">
<source xml:lang="en">There's a correspondence between a file filter and a file format it handles: only one instance of the file filter is instantiated for a single file format.</source>
<seg-source><mrk mid="0" mtype="seg">There's a correspondence between a file filter and a file format it handles: only one instance of the file filter is instantiated for a single file format.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">There's a correspondence between a file filter and a file format it handles: only one instance of the file filter is instantiated for a single file format.</mrk></target>
</trans-unit>
<trans-unit id="81" restype="x-text:p">
<source xml:lang="en">Two possible options for handling similar file formats:</source>
<seg-source><mrk mid="0" mtype="seg">Two possible options for handling similar file formats:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Two possible options for handling similar file formats:</mrk></target>
</trans-unit>
<trans-unit id="82" restype="x-text:p">
<source xml:lang="en">The same file filter instance handles all the similar formats. For example, the Open Office file filter handles all the file formats of Open Office suite.</source>
<seg-source><mrk mid="0" mtype="seg">The same file filter instance handles all the similar formats.</mrk><mrk mid="1" mtype="seg"> For example, the Open Office file filter handles all the file formats of Open Office suite.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The same file filter instance handles all the similar formats.</mrk><mrk mid="1" mtype="seg"> For example, the Open Office file filter handles all the file formats of Open Office suite.</mrk></target>
</trans-unit>
<trans-unit id="83" restype="x-text:p">
<source xml:lang="en">A single file filter class may be instantiated with different parameters. For example, the text file filter is instantiated with different encoding to handle text files coming with different character sets. </source>
<seg-source><mrk mid="0" mtype="seg">A single file filter class may be instantiated with different parameters.</mrk><mrk mid="1" mtype="seg"> For example, the text file filter is instantiated with different encoding to handle text files coming with different character sets.</mrk> </seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A single file filter class may be instantiated with different parameters.</mrk><mrk mid="1" mtype="seg"> For example, the text file filter is instantiated with different encoding to handle text files coming with different character sets.</mrk> </target>
</trans-unit>
<trans-unit id="84" restype="x-text:p">
<source xml:lang="en">While there are many file filters, there's a need to distinguish what source files are handled by what filter. Currently (OmegaT version 2.0), we distinguish files by extension, and by content, but a more sophisticated mechanism should be invented, and more control over the process should be given both to the filter itself and to the user.</source>
<seg-source><mrk mid="0" mtype="seg">While there are many file filters, there's a need to distinguish what source files are handled by what filter.</mrk><mrk mid="1" mtype="seg"> Currently (OmegaT version 2.0), we distinguish files by extension, and by content, but a more sophisticated mechanism should be invented, and more control over the process should be given both to the filter itself and to the user.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">While there are many file filters, there's a need to distinguish what source files are handled by what filter.</mrk><mrk mid="1" mtype="seg"> Currently (OmegaT version 2.0), we distinguish files by extension, and by content, but a more sophisticated mechanism should be invented, and more control over the process should be given both to the filter itself and to the user.</mrk></target>
</trans-unit>
<trans-unit id="85" restype="x-text:h">
<source xml:lang="en">Details on patterns</source>
<seg-source><mrk mid="0" mtype="seg">Details on patterns</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Details on patterns</mrk></target>
</trans-unit>
<trans-unit id="86" restype="x-text:p">
<source xml:lang="en">Input filename pattern resembles DOS filename pattern:</source>
<seg-source><mrk mid="0" mtype="seg">Input filename pattern resembles DOS filename pattern:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Input filename pattern resembles DOS filename pattern:</mrk></target>
</trans-unit>
<trans-unit id="87" restype="x-text:p">
<source xml:lang="en">*.txt means all files with "txt" extension</source>
<seg-source><mrk mid="0" mtype="seg">*.txt means all files with "txt" extension</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">*.txt means all files with "txt" extension</mrk></target>
</trans-unit>
<trans-unit id="88" restype="x-text:p">
<source xml:lang="en">read* means all the files that start with "read", for example "readme" </source>
<seg-source><mrk mid="0" mtype="seg">read* means all the files that start with "read", for example "readme"</mrk> </seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">read* means all the files that start with "read", for example "readme"</mrk> </target>
</trans-unit>
<trans-unit id="89" restype="x-text:p">
<source xml:lang="en">Output filename pattern is more complex.</source>
<seg-source><mrk mid="0" mtype="seg">Output filename pattern is more complex.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Output filename pattern is more complex.</mrk></target>
</trans-unit>
<trans-unit id="90" restype="x-text:p">
<source xml:lang="en">It may consist of normal characters and some substituted variables. They have the format ${variableName} and are case insensitive.</source>
<seg-source><mrk mid="0" mtype="seg">It may consist of normal characters and some substituted variables.</mrk><mrk mid="1" mtype="seg"> They have the format ${variableName} and are case insensitive.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">It may consist of normal characters and some substituted variables.</mrk><mrk mid="1" mtype="seg"> They have the format ${variableName} and are case insensitive.</mrk></target>
</trans-unit>
<trans-unit id="91" restype="x-text:p">
<source xml:lang="en">The following variables exist:</source>
<seg-source><mrk mid="0" mtype="seg">The following variables exist:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following variables exist:</mrk></target>
</trans-unit>
<trans-unit id="92" restype="x-text:p">
<source xml:lang="en">${filename} - full filename of the input file, both name and extension (default)</source>
<seg-source><mrk mid="0" mtype="seg">${filename} - full filename of the input file, both name and extension (default)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">${filename} - full filename of the input file, both name and extension (default)</mrk></target>
</trans-unit>
<trans-unit id="93" restype="x-text:p">
<source xml:lang="en">${nameOnly} - only the name of the input file without extension part</source>
<seg-source><mrk mid="0" mtype="seg">${nameOnly} - only the name of the input file without extension part</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">${nameOnly} - only the name of the input file without extension part</mrk></target>
</trans-unit>
<trans-unit id="94" restype="x-text:p">
<source xml:lang="en">${extension} - the extension of the input file</source>
<seg-source><mrk mid="0" mtype="seg">${extension} - the extension of the input file</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">${extension} - the extension of the input file</mrk></target>
</trans-unit>
<trans-unit id="95" restype="x-text:p">
<source xml:lang="en">${sourceLanguage} - the source language of the project</source>
<seg-source><mrk mid="0" mtype="seg">${sourceLanguage} - the source language of the project</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">${sourceLanguage} - the source language of the project</mrk></target>
</trans-unit>
<trans-unit id="96" restype="x-text:p">
<source xml:lang="en">${targetLanguage} - the target language of the project</source>
<seg-source><mrk mid="0" mtype="seg">${targetLanguage} - the target language of the project</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">${targetLanguage} - the target language of the project</mrk></target>
</trans-unit>
<trans-unit id="97" restype="x-text:p">
<source xml:lang="en">Most file filters will use default “${filename}”, that leads to the name of translated file being the same as the name of source file. But, for example, the Java Resource Bundles file filter will have the pattern equal to “${nameonly}_${targetlanguage}.${extension}”.</source>
<seg-source><mrk mid="0" mtype="seg">Most file filters will use default “${filename}”, that leads to the name of translated file being the same as the name of source file.</mrk><mrk mid="1" mtype="seg"> But, for example, the Java Resource Bundles file filter will have the pattern equal to “${nameonly}_${targetlanguage}.${extension}”.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Most file filters will use default “${filename}”, that leads to the name of translated file being the same as the name of source file.</mrk><mrk mid="1" mtype="seg"> But, for example, the Java Resource Bundles file filter will have the pattern equal to “${nameonly}_${targetlanguage}.${extension}”.</mrk></target>
</trans-unit>
<trans-unit id="98" restype="x-text:h">
<source xml:lang="en">Project details</source>
<seg-source><mrk mid="0" mtype="seg">Project details</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Project details</mrk></target>
</trans-unit>
<trans-unit id="99" restype="x-text:p">
<source xml:lang="en">Sequence diagram for loading a project:</source>
<seg-source><mrk mid="0" mtype="seg">Sequence diagram for loading a project:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Sequence diagram for loading a project:</mrk></target>
</trans-unit>
<trans-unit id="100" restype="x-text:p">
<source xml:lang="en"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr2" draw:name="відарысы2" text:anchor-type="paragraph" svg:width="16.999cm" svg:height="9.943cm" draw:z-index="0"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/100002010000040C0000025ECD6EA3FA.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept><bpt id="3" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="3">&lt;/text:soft-page-break&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr2" draw:name="відарысы2" text:anchor-type="paragraph" svg:width="16.999cm" svg:height="9.943cm" draw:z-index="0"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/100002010000040C0000025ECD6EA3FA.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept><bpt id="3" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="3">&lt;/text:soft-page-break&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr2" draw:name="відарысы2" text:anchor-type="paragraph" svg:width="16.999cm" svg:height="9.943cm" draw:z-index="0"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/100002010000040C0000025ECD6EA3FA.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept><bpt id="3" ctype="x-text:soft-page-break">&lt;text:soft-page-break&gt;</bpt><ept id="3">&lt;/text:soft-page-break&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="101" restype="x-text:p">
<source xml:lang="en">Application states by project:</source>
<seg-source><mrk mid="0" mtype="seg">Application states by project:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Application states by project:</mrk></target>
</trans-unit>
<trans-unit id="102" restype="x-text:p">
<source xml:lang="en"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr2" draw:name="відарысы3" text:anchor-type="paragraph" svg:width="16.999cm" svg:height="8.132cm" draw:z-index="1"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/100002010000034400000190DB0C6354.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr2" draw:name="відарысы3" text:anchor-type="paragraph" svg:width="16.999cm" svg:height="8.132cm" draw:z-index="1"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/100002010000034400000190DB0C6354.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-draw:frame">&lt;draw:frame draw:style-name="fr2" draw:name="відарысы3" text:anchor-type="paragraph" svg:width="16.999cm" svg:height="8.132cm" draw:z-index="1"&gt;</bpt><bpt id="2" ctype="x-draw:image">&lt;draw:image xlink:href="Pictures/100002010000034400000190DB0C6354.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"&gt;</bpt><ept id="2">&lt;/draw:image&gt;</ept><ept id="1">&lt;/draw:frame&gt;</ept></mrk></target>
</trans-unit>
</body>
</file>
<file original="TestDocument03.odt/styles.xml" source-language="en" target-language="fr" datatype="x-undefined" okp:inputEncoding="UTF-8" okp:configId="/Users/chase/src/okapi-integration-tests/target/test-classes/openoffice/odt/okf_openoffice@default.fprm">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
</body>
</file>
<file original="TestDocument03.odt/meta.xml" source-language="en" target-language="fr" datatype="x-undefined" okp:inputEncoding="UTF-8" okp:configId="/Users/chase/src/okapi-integration-tests/target/test-classes/openoffice/odt/okf_openoffice@default.fprm">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
</body>
</file>
</xliff>
