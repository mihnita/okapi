<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="NotesTowardV10.icml" source-language="en" target-language="fr" datatype="x-application/x-icml+xml" okp:inputEncoding="UTF-8">
<header><tool tool-id="okapi" tool-name="okapi-tests" tool-version="M29" tool-company="okapi"></tool></header>
<body>
<group id="spr1" resname="Stories" restype="x-spread">
<group id="sto1" resname="xhtml2icml_default_story" restype="x-story">
<trans-unit id="xhtml2icml_default_story-1" xml:space="preserve">
<source xml:lang="en">Notes toward v1.0</source>
<seg-source><mrk mid="0" mtype="seg">Notes toward v1.0</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Notes toward v1.0</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-2" xml:space="preserve">
<source xml:lang="en">Some brief notes on the CCSP’s XHTML-to-IDML script</source>
<seg-source><mrk mid="0" mtype="seg">Some brief notes on the CCSP’s XHTML-to-IDML script</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some brief notes on the CCSP’s XHTML-to-IDML script</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-3" xml:space="preserve">
<source xml:lang="en"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange&gt;&lt;Content&gt;</bpt>by <ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt>John Maxwell<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange&gt;&lt;Content&gt;</bpt>by <ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt>John Maxwell<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange&gt;&lt;Content&gt;</bpt>by <ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt>John Maxwell<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-4" xml:space="preserve">
<source xml:lang="en"><bpt id="1" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt>Based on our current v0.3: <ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_LINK">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/link"&gt;&lt;HyperlinkTextSource Hidden="false" Name="xhtml2icmlv0.3.xsl" Self="htss-1"&gt;&lt;Content&gt;</bpt>xhtml2icmlv0.3.xsl<ept id="3">&lt;/Content&gt;&lt;/HyperlinkTextSource&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt>Based on our current v0.3: <ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_LINK">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/link"&gt;&lt;HyperlinkTextSource Hidden="false" Name="xhtml2icmlv0.3.xsl" Self="htss-1"&gt;&lt;Content&gt;</bpt>xhtml2icmlv0.3.xsl<ept id="3">&lt;/Content&gt;&lt;/HyperlinkTextSource&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt>Based on our current v0.3: <ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_LINK">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/link"&gt;&lt;HyperlinkTextSource Hidden="false" Name="xhtml2icmlv0.3.xsl" Self="htss-1"&gt;&lt;Content&gt;</bpt>xhtml2icmlv0.3.xsl<ept id="3">&lt;/Content&gt;&lt;/HyperlinkTextSource&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</ept></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-5" xml:space="preserve">
<source xml:lang="en">Introduction</source>
<seg-source><mrk mid="0" mtype="seg">Introduction</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Introduction</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-6" xml:space="preserve">
<source xml:lang="en">The following is, hopefully, enough background to attack the HTML-IDML script. The big picture is simply that this script was prototyped by a couple of people with absolutely no xslt experience. So, while it is functional, it is a mess of spaghetti—I am certain that there must be a better way of saying “when we see an &lt;em&gt; element, regardless of whether it's in a paragraph, a table cell, or a footnote (etc, etc.), do X with it”—but I don’t have a very good sense of how to do this properly. Another e.g.: we wrote this script specifying “xhtml:” for each selector, because it only worked that way... it cuts down on readablity, though; do we need it, perhaps by declaring differently? Such are the limits of my knowledge...</source>
<seg-source><mrk mid="0" mtype="seg">The following is, hopefully, enough background to attack the HTML-IDML script.</mrk><mrk mid="1" mtype="seg"> The big picture is simply that this script was prototyped by a couple of people with absolutely no xslt experience.</mrk><mrk mid="2" mtype="seg"> So, while it is functional, it is a mess of spaghetti—I am certain that there must be a better way of saying “when we see an &lt;em&gt; element, regardless of whether it's in a paragraph, a table cell, or a footnote (etc, etc.), do X with it”—but I don’t have a very good sense of how to do this properly.</mrk><mrk mid="3" mtype="seg"> Another e.g.: we wrote this script specifying “xhtml:” for each selector, because it only worked that way...</mrk><mrk mid="4" mtype="seg"> it cuts down on readablity, though; do we need it, perhaps by declaring differently? Such are the limits of my knowledge...</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following is, hopefully, enough background to attack the HTML-IDML script.</mrk><mrk mid="1" mtype="seg"> The big picture is simply that this script was prototyped by a couple of people with absolutely no xslt experience.</mrk><mrk mid="2" mtype="seg"> So, while it is functional, it is a mess of spaghetti—I am certain that there must be a better way of saying “when we see an &lt;em&gt; element, regardless of whether it's in a paragraph, a table cell, or a footnote (etc, etc.), do X with it”—but I don’t have a very good sense of how to do this properly.</mrk><mrk mid="3" mtype="seg"> Another e.g.: we wrote this script specifying “xhtml:” for each selector, because it only worked that way...</mrk><mrk mid="4" mtype="seg"> it cuts down on readablity, though; do we need it, perhaps by declaring differently? Such are the limits of my knowledge...</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-7" xml:space="preserve">
<source xml:lang="en">The second issue is that this needs to be a script which I can be maintain—tweak, modify, and add to—over time. The editorial workflow that this script supports is still being prototyped, and I’m certain that there will be lots of little tweaks to how exactly things get marked up, and how exactly we treat things in InDesign. So cleanliness and some degree of modularity are probably critical—we need to design for future changes, to the degree that this is possible.</source>
<seg-source><mrk mid="0" mtype="seg">The second issue is that this needs to be a script which I can be maintain—tweak, modify, and add to—over time.</mrk><mrk mid="1" mtype="seg"> The editorial workflow that this script supports is still being prototyped, and I’m certain that there will be lots of little tweaks to how exactly things get marked up, and how exactly we treat things in InDesign.</mrk><mrk mid="2" mtype="seg"> So cleanliness and some degree of modularity are probably critical—we need to design for future changes, to the degree that this is possible.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The second issue is that this needs to be a script which I can be maintain—tweak, modify, and add to—over time.</mrk><mrk mid="1" mtype="seg"> The editorial workflow that this script supports is still being prototyped, and I’m certain that there will be lots of little tweaks to how exactly things get marked up, and how exactly we treat things in InDesign.</mrk><mrk mid="2" mtype="seg"> So cleanliness and some degree of modularity are probably critical—we need to design for future changes, to the degree that this is possible.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-8" xml:space="preserve">
<source xml:lang="en">Environment</source>
<seg-source><mrk mid="0" mtype="seg">Environment</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Environment</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-9" xml:space="preserve">
<source xml:lang="en">Our prototype script used xslt v1.0, but Liza indicated that xslt v2.0 would be a better result for handling mixed content models. The caveat is that we want to make the execution environment as minimal as possible. I’m currently running my transforms in Tod Ditchendorf’s XSLPalette, which handily includes both libxslt and Saxon 8.9 (saving me the hassle of having to install Java components and set environment variables). More importantly, I wouldn’t want our target audience—small book and journal publishers—to have to wrestle with installing development environments. So simplicity is a major virtue.</source>
<seg-source><mrk mid="0" mtype="seg">Our prototype script used xslt v1.0, but Liza indicated that xslt v2.0 would be a better result for handling mixed content models.</mrk><mrk mid="1" mtype="seg"> The caveat is that we want to make the execution environment as minimal as possible.</mrk><mrk mid="2" mtype="seg"> I’m currently running my transforms in Tod Ditchendorf’s XSLPalette, which handily includes both libxslt and Saxon 8.9 (saving me the hassle of having to install Java components and set environment variables).</mrk><mrk mid="3" mtype="seg"> More importantly, I wouldn’t want our target audience—small book and journal publishers—to have to wrestle with installing development environments.</mrk><mrk mid="4" mtype="seg"> So simplicity is a major virtue.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Our prototype script used xslt v1.0, but Liza indicated that xslt v2.0 would be a better result for handling mixed content models.</mrk><mrk mid="1" mtype="seg"> The caveat is that we want to make the execution environment as minimal as possible.</mrk><mrk mid="2" mtype="seg"> I’m currently running my transforms in Tod Ditchendorf’s XSLPalette, which handily includes both libxslt and Saxon 8.9 (saving me the hassle of having to install Java components and set environment variables).</mrk><mrk mid="3" mtype="seg"> More importantly, I wouldn’t want our target audience—small book and journal publishers—to have to wrestle with installing development environments.</mrk><mrk mid="4" mtype="seg"> So simplicity is a major virtue.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-10" xml:space="preserve">
<source xml:lang="en">Ideally, in the future I’d like to run this script from within InDesign (as in, FILE&gt;Open Web Page)—but that’s outside the scope of the current project—and I believe that CS4 only supports xslt v1.0. So that can remain a wish-list item for the time being.</source>
<seg-source><mrk mid="0" mtype="seg">Ideally, in the future I’d like to run this script from within InDesign (as in, FILE&gt;Open Web Page)—but that’s outside the scope of the current project—and I believe that CS4 only supports xslt v1.0.</mrk><mrk mid="1" mtype="seg"> So that can remain a wish-list item for the time being.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Ideally, in the future I’d like to run this script from within InDesign (as in, FILE&gt;Open Web Page)—but that’s outside the scope of the current project—and I believe that CS4 only supports xslt v1.0.</mrk><mrk mid="1" mtype="seg"> So that can remain a wish-list item for the time being.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-11" xml:space="preserve">
<source xml:lang="en">The other environment component is TinyMCE (v3.2), which is what our editors are using. If you have any question about what kind of XHTML to expect, the short answer is: that which TinyMCE produces.</source>
<seg-source><mrk mid="0" mtype="seg">The other environment component is TinyMCE (v3.2), which is what our editors are using.</mrk><mrk mid="1" mtype="seg"> If you have any question about what kind of XHTML to expect, the short answer is: that which TinyMCE produces.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The other environment component is TinyMCE (v3.2), which is what our editors are using.</mrk><mrk mid="1" mtype="seg"> If you have any question about what kind of XHTML to expect, the short answer is: that which TinyMCE produces.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-12" xml:space="preserve">
<source xml:lang="en">Adobe Indesign and IDML</source>
<seg-source><mrk mid="0" mtype="seg">Adobe Indesign and IDML</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Adobe Indesign and IDML</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-13" xml:space="preserve">
<source xml:lang="en">This entire project is made possible by Adobe’s new InDesign file format, IDML, which exposes the entire guts of an InDesign file as XML. The spec is robust, nicely modularized, and well (even “nicely”) documented. The 1200-page reference is here:</source>
<seg-source><mrk mid="0" mtype="seg">This entire project is made possible by Adobe’s new InDesign file format, IDML, which exposes the entire guts of an InDesign file as XML.</mrk><mrk mid="1" mtype="seg"> The spec is robust, nicely modularized, and well (even “nicely”) documented.</mrk><mrk mid="2" mtype="seg"> The 1200-page reference is here:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This entire project is made possible by Adobe’s new InDesign file format, IDML, which exposes the entire guts of an InDesign file as XML.</mrk><mrk mid="1" mtype="seg"> The spec is robust, nicely modularized, and well (even “nicely”) documented.</mrk><mrk mid="2" mtype="seg"> The 1200-page reference is here:</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-14" xml:space="preserve">
<source xml:lang="en">http://www.adobe.com/devnet/indesign/pdfs/idml-specification.pdf</source>
<seg-source><mrk mid="0" mtype="seg">http://www.adobe.com/devnet/indesign/pdfs/idml-specification.pdf</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">http://www.adobe.com/devnet/indesign/pdfs/idml-specification.pdf</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-15" xml:space="preserve">
<source xml:lang="en">Some samples and quick-start material can be found here:</source>
<seg-source><mrk mid="0" mtype="seg">Some samples and quick-start material can be found here:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some samples and quick-start material can be found here:</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-16" xml:space="preserve">
<source xml:lang="en">http://www.adobe.com/devnet/indesign/pdfs/idml-cookbook.pdf</source>
<seg-source><mrk mid="0" mtype="seg">http://www.adobe.com/devnet/indesign/pdfs/idml-cookbook.pdf</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">http://www.adobe.com/devnet/indesign/pdfs/idml-cookbook.pdf</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-17" xml:space="preserve">
<source xml:lang="en">and general info is here:</source>
<seg-source><mrk mid="0" mtype="seg">and general info is here:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">and general info is here:</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-18" xml:space="preserve">
<source xml:lang="en">http://www.adobe.com/products/indesign/scripting/</source>
<seg-source><mrk mid="0" mtype="seg">http://www.adobe.com/products/indesign/scripting/</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">http://www.adobe.com/products/indesign/scripting/</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-19" xml:space="preserve">
<source xml:lang="en">Full IDML vs InCopy subset: ICML</source>
<seg-source><mrk mid="0" mtype="seg">Full IDML vs InCopy subset: ICML</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Full IDML vs InCopy subset: ICML</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-20" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>IDML represents the totality of an InDesign file. That’s a LOT more complexity than we needed. For our purposes—which is simply to move web-based content into pre-existing InDesign templates—all we need is the “Story” part of an InDesign file. Helpfully, Adobe thought of this already: Adobe’s <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>InCopy<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> software (originally designed for simultaneous editor/designer interaction in a newsroom) uses a subset of IDML called ICML (as of the CS4 version). So, to make a long story short, what we are really producing here are ICML files, which can then be “placed” in an InDesign template (which has master pages, styles, and so on pre-defined). Or, to put it differently, we’re effectively replacing InCopy with the web.<it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>IDML represents the totality of an InDesign file.</mrk><mrk mid="1" mtype="seg"> That’s a LOT more complexity than we needed.</mrk><mrk mid="2" mtype="seg"> For our purposes—which is simply to move web-based content into pre-existing InDesign templates—all we need is the “Story” part of an InDesign file.</mrk><mrk mid="3" mtype="seg"> Helpfully, Adobe thought of this already: Adobe’s <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>InCopy<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> software (originally designed for simultaneous editor/designer interaction in a newsroom) uses a subset of IDML called ICML (as of the CS4 version).</mrk><mrk mid="4" mtype="seg"> So, to make a long story short, what we are really producing here are ICML files, which can then be “placed” in an InDesign template (which has master pages, styles, and so on pre-defined).</mrk><mrk mid="5" mtype="seg"> Or, to put it differently, we’re effectively replacing InCopy with the web.<it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>IDML represents the totality of an InDesign file.</mrk><mrk mid="1" mtype="seg"> That’s a LOT more complexity than we needed.</mrk><mrk mid="2" mtype="seg"> For our purposes—which is simply to move web-based content into pre-existing InDesign templates—all we need is the “Story” part of an InDesign file.</mrk><mrk mid="3" mtype="seg"> Helpfully, Adobe thought of this already: Adobe’s <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>InCopy<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> software (originally designed for simultaneous editor/designer interaction in a newsroom) uses a subset of IDML called ICML (as of the CS4 version).</mrk><mrk mid="4" mtype="seg"> So, to make a long story short, what we are really producing here are ICML files, which can then be “placed” in an InDesign template (which has master pages, styles, and so on pre-defined).</mrk><mrk mid="5" mtype="seg"> Or, to put it differently, we’re effectively replacing InCopy with the web.<it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-21" xml:space="preserve">
<source xml:lang="en">ICML Basic Structures</source>
<seg-source><mrk mid="0" mtype="seg">ICML Basic Structures</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ICML Basic Structures</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-22" xml:space="preserve">
<source xml:lang="en">IDML’s content structures (which make up the bulk of ICML) are really simple:</source>
<seg-source><mrk mid="0" mtype="seg">IDML’s content structures (which make up the bulk of ICML) are really simple:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">IDML’s content structures (which make up the bulk of ICML) are really simple:</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-23" xml:space="preserve">
<source xml:lang="en"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>ParagraphStyleRange<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> elements define chunks of text that inherit a particular named style. Within those are <it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="5" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt> CharacterStyleRange<ept id="5">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> elements, which do the same thing. They’re like divs and spans, except that <it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="9" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>all<ept id="9">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="11" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> content needs to be in a CharacterStyleRange, even though it may be unstyled. It’s verbose as hell, but it’s exactly two layers deep: not complicated.<it id="11" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>ParagraphStyleRange<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> elements define chunks of text that inherit a particular named style.</mrk><mrk mid="1" mtype="seg"> Within those are <it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="5" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt> CharacterStyleRange<ept id="5">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> elements, which do the same thing.</mrk><mrk mid="2" mtype="seg"> They’re like divs and spans, except that <it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="9" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>all<ept id="9">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="11" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> content needs to be in a CharacterStyleRange, even though it may be unstyled.</mrk><mrk mid="3" mtype="seg"> It’s verbose as hell, but it’s exactly two layers deep: not complicated.<it id="11" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>ParagraphStyleRange<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> elements define chunks of text that inherit a particular named style.</mrk><mrk mid="1" mtype="seg"> Within those are <it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="5" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt> CharacterStyleRange<ept id="5">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> elements, which do the same thing.</mrk><mrk mid="2" mtype="seg"> They’re like divs and spans, except that <it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="9" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>all<ept id="9">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="11" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> content needs to be in a CharacterStyleRange, even though it may be unstyled.</mrk><mrk mid="3" mtype="seg"> It’s verbose as hell, but it’s exactly two layers deep: not complicated.<it id="11" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-24" xml:space="preserve">
<source xml:lang="en">Oh... and line breaks are done manually, which explains the &lt;br /&gt; in the middle of each handler.</source>
<seg-source><mrk mid="0" mtype="seg">Oh...</mrk><mrk mid="1" mtype="seg"> and line breaks are done manually, which explains the &lt;br /&gt; in the middle of each handler.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Oh...</mrk><mrk mid="1" mtype="seg"> and line breaks are done manually, which explains the &lt;br /&gt; in the middle of each handler.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-25" xml:space="preserve">
<source xml:lang="en">The only ‘magic’ ICML requires is a couple of boilerplate PIs and that all the named Styles are declared at the top of the ICML file. They don't have to be defined, just declared.</source>
<seg-source><mrk mid="0" mtype="seg">The only ‘magic’ ICML requires is a couple of boilerplate PIs and that all the named Styles are declared at the top of the ICML file.</mrk><mrk mid="1" mtype="seg"> They don't have to be defined, just declared.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The only ‘magic’ ICML requires is a couple of boilerplate PIs and that all the named Styles are declared at the top of the ICML file.</mrk><mrk mid="1" mtype="seg"> They don't have to be defined, just declared.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-26" xml:space="preserve">
<source xml:lang="en"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>Images<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> are relatively straightforward. The only hitch is that they have a size/co-ordinates system which must be converted from width and height attributes—a little arithmetic, which you’ll see in our script.<it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>Images<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> are relatively straightforward.</mrk><mrk mid="1" mtype="seg"> The only hitch is that they have a size/co-ordinates system which must be converted from width and height attributes—a little arithmetic, which you’ll see in our script.<it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>Images<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> are relatively straightforward.</mrk><mrk mid="1" mtype="seg"> The only hitch is that they have a size/co-ordinates system which must be converted from width and height attributes—a little arithmetic, which you’ll see in our script.<it id="3" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-27" xml:space="preserve">
<source xml:lang="en"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>Tables<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt> are more hairy, because the InDesign table model is <ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="5" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>completely<ept id="5">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> different from the HTML table model: column and row counts are declared up front, and then everything is done cell-by-cell. This requires some processing, and in our prototype, you can see a barely functional version cribbed more or less straight from Adobe’s IDML cookbook. Making this perfectly intellegent and robust is not a high priority, but I'm very interested to hear what you think could be done with it.<it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>Tables<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt> are more hairy, because the InDesign table model is <ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="5" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>completely<ept id="5">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> different from the HTML table model: column and row counts are declared up front, and then everything is done cell-by-cell.</mrk><mrk mid="1" mtype="seg"> This requires some processing, and in our prototype, you can see a barely functional version cribbed more or less straight from Adobe’s IDML cookbook.</mrk><mrk mid="2" mtype="seg"> Making this perfectly intellegent and robust is not a high priority, but I'm very interested to hear what you think could be done with it.<it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/b"&gt;&lt;Content&gt;</bpt>Tables<ept id="1">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="3" ctype="x-cs_NOCHARACTERSTYLE">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</bpt> are more hairy, because the InDesign table model is <ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><bpt id="5" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>completely<ept id="5">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> different from the HTML table model: column and row counts are declared up front, and then everything is done cell-by-cell.</mrk><mrk mid="1" mtype="seg"> This requires some processing, and in our prototype, you can see a barely functional version cribbed more or less straight from Adobe’s IDML cookbook.</mrk><mrk mid="2" mtype="seg"> Making this perfectly intellegent and robust is not a high priority, but I'm very interested to hear what you think could be done with it.<it id="7" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-28" xml:space="preserve">
<source xml:lang="en">Quick start: how it works</source>
<seg-source><mrk mid="0" mtype="seg">Quick start: how it works</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Quick start: how it works</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-29" xml:space="preserve">
<source xml:lang="en">Beginning with an HTML document (this one, for instance), we merely save a clean XHTML copy out of the browser (the "Clean XHTML export" link on the left does the work for you). Firefox's "Save as Web Page - HTML Only" produces an XHTML-declared version.</source>
<seg-source><mrk mid="0" mtype="seg">Beginning with an HTML document (this one, for instance), we merely save a clean XHTML copy out of the browser (the "Clean XHTML export" link on the left does the work for you).</mrk><mrk mid="1" mtype="seg"> Firefox's "Save as Web Page - HTML Only" produces an XHTML-declared version.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Beginning with an HTML document (this one, for instance), we merely save a clean XHTML copy out of the browser (the "Clean XHTML export" link on the left does the work for you).</mrk><mrk mid="1" mtype="seg"> Firefox's "Save as Web Page - HTML Only" produces an XHTML-declared version.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-30" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>Run the resulting HTML against the XSLT, and give the result a .icml extension. Then, open up a <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-cs_LINK">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/link"&gt;&lt;HyperlinkTextSource Hidden="false" Name="template file" Self="htss-5"&gt;&lt;Content&gt;</bpt>template file<ept id="3">&lt;/Content&gt;&lt;/HyperlinkTextSource&gt;&lt;/CharacterStyleRange&gt;</ept><it id="6" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> in InDesign CS4. In InDesign, File-&gt;Place... the .icml file, and shift-click to “auto-flow” (generating additional pages as needed).<it id="6" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>Run the resulting HTML against the XSLT, and give the result a .icml extension.</mrk><mrk mid="1" mtype="seg"> Then, open up a <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-cs_LINK">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/link"&gt;&lt;HyperlinkTextSource Hidden="false" Name="template file" Self="htss-5"&gt;&lt;Content&gt;</bpt>template file<ept id="3">&lt;/Content&gt;&lt;/HyperlinkTextSource&gt;&lt;/CharacterStyleRange&gt;</ept><it id="6" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> in InDesign CS4.</mrk><mrk mid="2" mtype="seg"> In InDesign, File-&gt;Place...</mrk><mrk mid="3" mtype="seg"> the .icml file, and shift-click to “auto-flow” (generating additional pages as needed).<it id="6" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>Run the resulting HTML against the XSLT, and give the result a .icml extension.</mrk><mrk mid="1" mtype="seg"> Then, open up a <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-cs_LINK">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/link"&gt;&lt;HyperlinkTextSource Hidden="false" Name="template file" Self="htss-5"&gt;&lt;Content&gt;</bpt>template file<ept id="3">&lt;/Content&gt;&lt;/HyperlinkTextSource&gt;&lt;/CharacterStyleRange&gt;</ept><it id="6" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it> in InDesign CS4.</mrk><mrk mid="2" mtype="seg"> In InDesign, File-&gt;Place...</mrk><mrk mid="3" mtype="seg"> the .icml file, and shift-click to “auto-flow” (generating additional pages as needed).<it id="6" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-31" xml:space="preserve">
<source xml:lang="en">Some extra niceties:</source>
<seg-source><mrk mid="0" mtype="seg">Some extra niceties:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Some extra niceties:</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-32" xml:space="preserve">
<source xml:lang="en">You’ll notice in the prototype that there’s a simple mechanism for distinguishing between initial paragraphs and following paragraphs, so that these can be styled distinctly in InDesign (flush and indented, respectively). I did this as a bit of a show-off (see what you can do with XML!), but also because it is a mark of typographic excellence, and that’s what we're after.</source>
<seg-source><mrk mid="0" mtype="seg">You’ll notice in the prototype that there’s a simple mechanism for distinguishing between initial paragraphs and following paragraphs, so that these can be styled distinctly in InDesign (flush and indented, respectively).</mrk><mrk mid="1" mtype="seg"> I did this as a bit of a show-off (see what you can do with XML!), but also because it is a mark of typographic excellence, and that’s what we're after.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">You’ll notice in the prototype that there’s a simple mechanism for distinguishing between initial paragraphs and following paragraphs, so that these can be styled distinctly in InDesign (flush and indented, respectively).</mrk><mrk mid="1" mtype="seg"> I did this as a bit of a show-off (see what you can do with XML!), but also because it is a mark of typographic excellence, and that’s what we're after.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-33" xml:space="preserve">
<source xml:lang="en">Footnote support is pretty rudimentary. You'll see in here a table-based footnote structure that comes from the reStructuredText system in ZWiki -- which I have since abandoned in favour of TinyMCE, which does a passable job of making functional end-notes out of content pasted in from MSWord (and since our journal publishers especially really like this), this probably needs to be rewritten in the future to support whatever our editors want to with footnotes (currently they don't know). The bottom line is: for the short term however, it’s not a high priority, but this is one of those areas where I will need to make changes to the script to adapt it to editorial needs.</source>
<seg-source><mrk mid="0" mtype="seg">Footnote support is pretty rudimentary.</mrk><mrk mid="1" mtype="seg"> You'll see in here a table-based footnote structure that comes from the reStructuredText system in ZWiki -- which I have since abandoned in favour of TinyMCE, which does a passable job of making functional end-notes out of content pasted in from MSWord (and since our journal publishers especially really like this), this probably needs to be rewritten in the future to support whatever our editors want to with footnotes (currently they don't know).</mrk><mrk mid="2" mtype="seg"> The bottom line is: for the short term however, it’s not a high priority, but this is one of those areas where I will need to make changes to the script to adapt it to editorial needs.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Footnote support is pretty rudimentary.</mrk><mrk mid="1" mtype="seg"> You'll see in here a table-based footnote structure that comes from the reStructuredText system in ZWiki -- which I have since abandoned in favour of TinyMCE, which does a passable job of making functional end-notes out of content pasted in from MSWord (and since our journal publishers especially really like this), this probably needs to be rewritten in the future to support whatever our editors want to with footnotes (currently they don't know).</mrk><mrk mid="2" mtype="seg"> The bottom line is: for the short term however, it’s not a high priority, but this is one of those areas where I will need to make changes to the script to adapt it to editorial needs.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-34" xml:space="preserve">
<source xml:lang="en"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>Quick-and-dirty metadata is handled by assigning ‘semantic’ class names to particular paragraphs (e.g.; &lt;p class="dc-creator"&gt;John Maxwell&lt;/p&gt;). This is simple enough, and also imperfect enough that what it really needs is <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>flexibility<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>. This is one of the key areas of this script where I can imagine going in and changing the behaviour over time: how the metadata is represented in the HTML, how it maps to InDesign styles, etc. What I had imagined was a fair number of possibilities for p classes, all assembled in such a way as to make quick script modifications easy. Open to suggestions about how to handle this...<it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></source>
<seg-source><mrk mid="0" mtype="seg"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>Quick-and-dirty metadata is handled by assigning ‘semantic’ class names to particular paragraphs (e.g.; &lt;p class="dc-creator"&gt;John Maxwell&lt;/p&gt;).</mrk><mrk mid="1" mtype="seg"> This is simple enough, and also imperfect enough that what it really needs is <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>flexibility<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>.</mrk><mrk mid="2" mtype="seg"> This is one of the key areas of this script where I can imagine going in and changing the behaviour over time: how the metadata is represented in the HTML, how it maps to InDesign styles, etc.</mrk><mrk mid="3" mtype="seg"> What I had imagined was a fair number of possibilities for p classes, all assembled in such a way as to make quick script modifications easy.</mrk><mrk mid="4" mtype="seg"> Open to suggestions about how to handle this...<it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>Quick-and-dirty metadata is handled by assigning ‘semantic’ class names to particular paragraphs (e.g.; &lt;p class="dc-creator"&gt;John Maxwell&lt;/p&gt;).</mrk><mrk mid="1" mtype="seg"> This is simple enough, and also imperfect enough that what it really needs is <it id="1" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</it><bpt id="3" ctype="x-CharacterStyleRange">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/i"&gt;&lt;Content&gt;</bpt>flexibility<ept id="3">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;</ept><it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="open">&lt;CharacterStyleRange AppliedCharacterStyle="CharacterStyle/[No character style]"&gt;&lt;Content&gt;</it>.</mrk><mrk mid="2" mtype="seg"> This is one of the key areas of this script where I can imagine going in and changing the behaviour over time: how the metadata is represented in the HTML, how it maps to InDesign styles, etc.</mrk><mrk mid="3" mtype="seg"> What I had imagined was a fair number of possibilities for p classes, all assembled in such a way as to make quick script modifications easy.</mrk><mrk mid="4" mtype="seg"> Open to suggestions about how to handle this...<it id="5" ctype="x-cs_NOCHARACTERSTYLE" pos="close">&lt;/Content&gt;&lt;/CharacterStyleRange&gt;&lt;Br/&gt;</it></mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-35" xml:space="preserve">
<source xml:lang="en">Do I have to say, in 2009, that we just assume Unicode throughout, and not bother at all with those nasty character entities? I probably do. OK, there, I said it.</source>
<seg-source><mrk mid="0" mtype="seg">Do I have to say, in 2009, that we just assume Unicode throughout, and not bother at all with those nasty character entities? I probably do.</mrk><mrk mid="1" mtype="seg"> OK, there, I said it.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Do I have to say, in 2009, that we just assume Unicode throughout, and not bother at all with those nasty character entities? I probably do.</mrk><mrk mid="1" mtype="seg"> OK, there, I said it.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-36" xml:space="preserve">
<source xml:lang="en">Distribution and deployment</source>
<seg-source><mrk mid="0" mtype="seg">Distribution and deployment</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Distribution and deployment</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-37" xml:space="preserve">
<source xml:lang="en">My intent is to release this under GPL. The only reason I haven’t already is that there are chunks of this script cribbed straight from Adobe’s cookbook, and I didn’t want to go GPLing something that wasn’t mine. Any distance you can take us toward this would be appreciated.</source>
<seg-source><mrk mid="0" mtype="seg">My intent is to release this under GPL.</mrk><mrk mid="1" mtype="seg"> The only reason I haven’t already is that there are chunks of this script cribbed straight from Adobe’s cookbook, and I didn’t want to go GPLing something that wasn’t mine.</mrk><mrk mid="2" mtype="seg"> Any distance you can take us toward this would be appreciated.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">My intent is to release this under GPL.</mrk><mrk mid="1" mtype="seg"> The only reason I haven’t already is that there are chunks of this script cribbed straight from Adobe’s cookbook, and I didn’t want to go GPLing something that wasn’t mine.</mrk><mrk mid="2" mtype="seg"> Any distance you can take us toward this would be appreciated.</mrk></target>
</trans-unit>
<trans-unit id="xhtml2icml_default_story-38" xml:space="preserve">
<source xml:lang="en">The overall agenda is to release this into the wild as a usable proof-of-concept (right now it is a not-quite-usable proof of concept) that people can pick up and work with. I have no intention of selling it or otherwise managing it on a commercial basis—apart from using it in a consulting context. I’m more interested in demonstrating to publishers that this way of working is possible and easily acheivable. Of course, the script and basic approach could be taken miles farther.</source>
<seg-source><mrk mid="0" mtype="seg">The overall agenda is to release this into the wild as a usable proof-of-concept (right now it is a not-quite-usable proof of concept) that people can pick up and work with.</mrk><mrk mid="1" mtype="seg"> I have no intention of selling it or otherwise managing it on a commercial basis—apart from using it in a consulting context.</mrk><mrk mid="2" mtype="seg"> I’m more interested in demonstrating to publishers that this way of working is possible and easily acheivable.</mrk><mrk mid="3" mtype="seg"> Of course, the script and basic approach could be taken miles farther.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The overall agenda is to release this into the wild as a usable proof-of-concept (right now it is a not-quite-usable proof of concept) that people can pick up and work with.</mrk><mrk mid="1" mtype="seg"> I have no intention of selling it or otherwise managing it on a commercial basis—apart from using it in a consulting context.</mrk><mrk mid="2" mtype="seg"> I’m more interested in demonstrating to publishers that this way of working is possible and easily acheivable.</mrk><mrk mid="3" mtype="seg"> Of course, the script and basic approach could be taken miles farther.</mrk></target>
</trans-unit>
</group>
</group>
</body>
</file>
</xliff>
